<!doctype html>
<html lang="ro" xmlns:th="http://www.w3.org/1999/xhtml">
 <head>
    <link rel="icon" type="image/png" href="/nume-aplicatie/images/favicon.png">
    <script async src="https://www.googletagmanager.com/gtag/js?id=G-7Q2536ZKL2"></script>
    <script>
      window.dataLayer = window.dataLayer || [];
      window.gtag = function () { dataLayer.push(arguments); };
      gtag('consent', 'default', {
        'wait_for_update': 500,
        'region': ['RO'],
        'ad_storage': 'denied',
        'analytics_storage': 'denied',
        'ad_user_data': 'denied',
        'ad_personalization': 'denied'
      });
      gtag('js', new Date());
      gtag('config', 'G-7Q2536ZKL2');
    </script>


  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title th:text="${lesson.title}">Lesson</title>
  <link rel="stylesheet" th:href="@{/css/styles.css}">
  <style>body { background: #ffffff; }</style>
 </head>
 <body th:with="activeTopic='Java', activeChapter='7.Lucrul cu siruri de caractere', activeLesson='2.Principalele operatiuni cu siruri de caractere'">
  <button class="mobile-sidebar-toggle" onclick="toggleMobileSidebar()">☰</button>
  <div th:replace="~{fragments/nav :: nav}"></div>
  <div class="top-nav">
   <th:block th:each="topic : ${topics}">
    <a th:href="@{'/lectii/topic/' + ${topic.id}}" th:text="${topic.name}" th:classappend="${topic.id} == ${activeTopicId} ? 'active' : ''"> </a>
   </th:block>
  </div>
  <div class="layout">
   <div class="mobile-sidebar" id="mobileSidebar">
    <button class="close-btn" onclick="toggleSidebar()">✖</button>
    <ul class="chapter-list">
     <th:block th:each="chapter : ${chapters}">
      <li class="chapter-item" th:classappend="${chapter.id} == ${activeChapterId} ? 'open' : ''">
       <div class="chapter-title" onclick="toggleChapter(this)">
        <strong th:text="${chapter.title}"></strong> <span class="arrow">▼</span>
       </div>
       <ul class="lesson-list">
        <th:block th:each="lesson : ${chapter.lessons}">
         <li><a th:href="@{'/lessons/' +
    ${#strings.toLowerCase(#strings.replace(chapter.topic.name, ' ', '-'))} + '/' +
    ${#strings.toLowerCase(#strings.replace(chapter.title, ' ', '-'))} + '/' +
    ${#strings.toLowerCase(#strings.replace(lesson.title, ' ', '-'))} }" th:text="${lesson.title}" th:classappend="${lesson.id} == ${activeLessonId} ? 'active' : ''"> </a></li>
        </th:block>
       </ul></li>
     </th:block>
    </ul>
   </div>
   <aside class="sidebar">
    <ul class="sidebar-list">
     <th:block th:each="chapter : ${chapters}">
      <li class="chapter-item" th:classappend="${chapter.id} == ${activeChapterId} ? 'open' : ''">
       <div class="chapter-toggle" onclick="toggleLessons(this)">
        <span th:text="${chapter.title}">Chapter</span>
       </div>
       <ul class="lesson-list hidden">
        <th:block th:each="lesson : ${chapter.lessons}">
         <li><a th:href="@{'/lessons/' +
    ${#strings.toLowerCase(#strings.replace(chapter.topic.name, ' ', '-'))} + '/' +
    ${#strings.toLowerCase(#strings.replace(chapter.title, ' ', '-'))} + '/' +
    ${#strings.toLowerCase(#strings.replace(lesson.title, ' ', '-'))} }" th:text="${lesson.title}" th:classappend="${lesson.id} == ${activeLessonId} ? 'active' : ''"> </a></li>
        </th:block>
       </ul></li>
     </th:block>
    </ul>
   </aside>
   <main class="content">
    <div class="document-container">
     <h1 class="main-title">Principalele operațiuni cu șiruri de caractere</h1>
     <h2 class="subtitle">Îmbinarea șirurilor</h2>
     <p class="paragraph">Pentru îmbinarea șirurilor, se poate utiliza operația de adunare ("+"):</p>
     <div class="code-inline">
      <pre><code>String&nbsp;str1&nbsp;=&nbsp;"Java";<br>String&nbsp;str2&nbsp;=&nbsp;"Hello";<br>String&nbsp;str3&nbsp;=&nbsp;str1&nbsp;+&nbsp;"&nbsp;"&nbsp;+&nbsp;str2;<br><br>System.out.println(str3);&nbsp;//&nbsp;Hello&nbsp;Java</code></pre>
     </div>
     <p class="paragraph">Dacă în operația de adunare a șirurilor este folosit un obiect non-șir, de exemplu, un număr, acel obiect este transformat într-un șir:</p>
     <div class="code-inline">
      <pre><code>String&nbsp;str3&nbsp;=&nbsp;"Anul&nbsp;"&nbsp;+&nbsp;2015;</code></pre>
     </div>
     <p class="paragraph">De fapt, la adunarea șirurilor cu obiecte non-șiruri, se apelează metoda valueOf() din clasa String. Această metodă are multe suprascrieri și convertește aproape toate tipurile de date în șir. Pentru a converti obiectele diferitelor clase, metoda valueOf() apelează metoda toString() a acestor clase.</p>
     <p class="paragraph">O altă modalitate de a îmbina șiruri este metoda concat():</p>
     <div class="code-inline">
      <pre><code>String&nbsp;str1&nbsp;=&nbsp;"Java";<br>String&nbsp;str2&nbsp;=&nbsp;"Hello";<br>str2&nbsp;=&nbsp;str2.concat(str1);&nbsp;//&nbsp;HelloJava</code></pre>
     </div>
     <p class="paragraph">Metoda concat() primește șirul cu care trebuie să îmbine șirul apelant și returnează șirul îmbinat.</p>
     <p class="paragraph">O altă metodă de îmbinare este metoda join(), care permite îmbinarea șirurilor cu un separator. De exemplu, cele două șiruri de mai sus au fost unite într-un singur cuvânt „HelloJava”, dar ideal ar fi să fie separate printr-un spațiu. Pentru aceasta, folosim metoda join():</p>
     <div class="code-inline">
      <pre><code>String&nbsp;str1&nbsp;=&nbsp;"Java";<br>String&nbsp;str2&nbsp;=&nbsp;"Hello";<br>String&nbsp;str3&nbsp;=&nbsp;String.join("&nbsp;",&nbsp;str2,&nbsp;str1);&nbsp;//&nbsp;Hello&nbsp;Java</code></pre>
     </div>
     <p class="paragraph">Metoda join() este statică. Primul parametru este separatorul cu care vor fi separate subșirurile, iar toți ceilalți parametri sunt subșirurile care vor fi unite – în acest caz, două șiruri, deși pot fi și mai multe.</p>
     <h2 class="subtitle">Extracția de caractere și subșiruri</h2>
     <p class="paragraph">Pentru a extrage caracterele după index, în clasa String este definită metoda char charAt(int index). Aceasta primește un index pentru a obține caracterul și returnează caracterul extras:</p>
     <div class="code-inline">
      <pre><code>String&nbsp;str&nbsp;=&nbsp;"Java";<br>char&nbsp;c&nbsp;=&nbsp;str.charAt(2);<br>System.out.println(c);&nbsp;//&nbsp;v</code></pre>
     </div>
     <p class="paragraph">Ca și în tablouri, indexarea începe de la zero.</p>
     <p class="paragraph">Dacă trebuie să extragem un grup de caractere sau un subșir, putem folosi metoda getChars(int srcBegin, int srcEnd, char[] dst, int dstBegin). Aceasta primește următorii parametri:</p>
     <ul class="enumeration">
      <li>srcBegin: indexul din șir de la care începe extragerea caracterelor</li>
      <li>srcEnd: indexul din șir până la care se face extragerea</li>
      <li>dst: tabloul de caractere în care vor fi extrase caracterele</li>
      <li>dstBegin: indexul în tabloul dst de la care vor fi adăugate caracterele extrase</li>
     </ul>
     <div class="code-inline">
      <pre><code>String&nbsp;str&nbsp;=&nbsp;"Hello&nbsp;world!";<br>int&nbsp;start&nbsp;=&nbsp;6;<br>int&nbsp;end&nbsp;=&nbsp;11;<br>char[]&nbsp;dst&nbsp;=&nbsp;new&nbsp;char[end&nbsp;-&nbsp;start];<br>str.getChars(start,&nbsp;end,&nbsp;dst,&nbsp;0);<br>System.out.println(dst);&nbsp;//&nbsp;world</code></pre>
     </div>
     <h2 class="subtitle">Compararea șirurilor</h2>
     <p class="paragraph">Pentru a compara șirurile, sunt utilizate metodele equals() (care ține cont de majuscule/minuscule) și equalsIgnoreCase() (care nu ține cont de majuscule/minuscule). Ambele metode primesc ca parametru șirul cu care trebuie să compare:</p>
     <div class="code-inline">
      <pre><code>String&nbsp;str1&nbsp;=&nbsp;"Hello";<br>String&nbsp;str2&nbsp;=&nbsp;"hello";<br><br>System.out.println(str1.equals(str2));&nbsp;//&nbsp;false<br>System.out.println(str1.equalsIgnoreCase(str2));&nbsp;//&nbsp;true</code></pre>
     </div>
     <p class="paragraph">Spre deosebire de compararea numerelor și altor tipuri de date primitive, pentru șiruri nu se folosește semnul egalității ==. În schimb, se folosește metoda equals().</p>
     <p class="paragraph">O altă metodă specială, regionMatches(), compară subșiruri în cadrul a două șiruri. Aceasta are următoarele forme:</p>
     <div class="code-inline">
      <pre><code>boolean&nbsp;regionMatches(int&nbsp;toffset,&nbsp;String&nbsp;other,&nbsp;int&nbsp;oofset,&nbsp;int&nbsp;len);<br>boolean&nbsp;regionMatches(boolean&nbsp;ignoreCase,&nbsp;int&nbsp;toffset,&nbsp;String&nbsp;other,&nbsp;int&nbsp;oofset,&nbsp;int&nbsp;len);</code></pre>
     </div>
     <p class="paragraph">Metoda primește următorii parametri:</p>
     <ul class="enumeration">
      <li>ignoreCase: dacă trebuie ignorată sensibilitatea la majuscule/minuscule în comparație. Dacă valoarea este true, majusculele/minusculele sunt ignorate</li>
      <li>toffset: indexul de început din șirul apelant de la care începe comparația</li>
      <li>other: șirul cu care se compară</li>
      <li>oofset: indexul de început din șirul comparat de la care începe comparația</li>
      <li>len: numărul de caractere comparate în ambele șiruri</li>
     </ul>
     <p class="paragraph">Exemplu de utilizare:</p>
     <div class="code-inline">
      <pre><code>String&nbsp;str1&nbsp;=&nbsp;"Hello&nbsp;world";<br>String&nbsp;str2&nbsp;=&nbsp;"I&nbsp;work";<br>boolean&nbsp;result&nbsp;=&nbsp;str1.regionMatches(6,&nbsp;str2,&nbsp;2,&nbsp;3);<br>System.out.println(result);&nbsp;//&nbsp;true</code></pre>
     </div>
     <p class="paragraph">În acest caz, metoda compară 3 caractere de la indexul 6 al primului șir („wor”) cu 3 caractere de la indexul 2 al celui de-al doilea șir („wor”). Deoarece aceste subșiruri sunt identice, rezultatul este true.</p>
     <p class="paragraph">O altă pereche de metode, compareTo(String str) și compareToIgnoreCase(String str), permite de asemenea compararea a două șiruri, dar în plus ne indică dacă un șir este mai mare sau mai mic decât altul.</p>
     <p class="paragraph">Dacă valoarea returnată este mai mare decât 0, primul șir este mai mare decât al doilea, dacă este mai mică decât zero, atunci invers. Dacă șirurile sunt egale, se returnează 0.</p>
     <p class="paragraph">Ordinea folosită pentru comparare este cea lexicografică. De exemplu, șirul „A” este mai mic decât șirul „B”, deoarece caracterul 'A' vine înaintea caracterului 'B' în alfabet. Dacă primele caractere sunt egale, se iau în considerare următoarele caractere. De exemplu:</p>
     <div class="code-inline">
      <pre><code>String&nbsp;str1&nbsp;=&nbsp;"hello";<br>String&nbsp;str2&nbsp;=&nbsp;"world";<br>String&nbsp;str3&nbsp;=&nbsp;"hell";<br><br>System.out.println(str1.compareTo(str2));&nbsp;//&nbsp;-15&nbsp;-&nbsp;str1&nbsp;este&nbsp;mai&nbsp;mic&nbsp;decât&nbsp;str2<br>System.out.println(str1.compareTo(str3));&nbsp;//&nbsp;1&nbsp;-&nbsp;str1&nbsp;este&nbsp;mai&nbsp;mare&nbsp;decât&nbsp;str3</code></pre>
     </div>
     <h2 class="subtitle">Căutarea într-un șir</h2>
     <p class="paragraph">Metoda indexOf() găsește indexul primei apariții a unui subșir în șir, iar metoda lastIndexOf() – indexul ultimei apariții. Dacă subșirul nu este găsit, ambele metode returnează -1:</p>
     <div class="code-inline">
      <pre><code>String&nbsp;str&nbsp;=&nbsp;"Hello&nbsp;world";<br>int&nbsp;index1&nbsp;=&nbsp;str.indexOf('l');&nbsp;//&nbsp;2<br>int&nbsp;index2&nbsp;=&nbsp;str.indexOf("wo");&nbsp;//&nbsp;6<br>int&nbsp;index3&nbsp;=&nbsp;str.lastIndexOf('l');&nbsp;//&nbsp;9</code></pre>
     </div>
     <p class="paragraph">Metoda startsWith() determină dacă șirul începe cu un anumit subșir, iar metoda endsWith() determină dacă șirul se termină cu un anumit subșir:</p>
     <div class="code-inline">
      <pre><code>String&nbsp;str&nbsp;=&nbsp;"myfile.exe";<br>boolean&nbsp;start&nbsp;=&nbsp;str.startsWith("my");&nbsp;//&nbsp;true<br>boolean&nbsp;end&nbsp;=&nbsp;str.endsWith("exe");&nbsp;//&nbsp;true</code></pre>
     </div>
     <h2 class="subtitle">Înlocuirea în șir</h2>
     <p class="paragraph">Metoda replace() permite înlocuirea unei secvențe de caractere dintr-un șir cu alta:</p>
     <div class="code-inline">
      <pre><code>String&nbsp;str&nbsp;=&nbsp;"Hello&nbsp;world";<br>String&nbsp;replStr1&nbsp;=&nbsp;str.replace('l',&nbsp;'d');&nbsp;//&nbsp;Heddo&nbsp;wordd<br>String&nbsp;replStr2&nbsp;=&nbsp;str.replace("Hello",&nbsp;"Bye");&nbsp;//&nbsp;Bye&nbsp;world</code></pre>
     </div>
     <h2 class="subtitle">Decuparea unui șir</h2>
     <p class="paragraph">Metoda trim() elimină spațiile de la începutul și sfârșitul șirului:</p>
     <div class="code-inline">
      <pre><code>String&nbsp;str&nbsp;=&nbsp;"&nbsp;&nbsp;hello&nbsp;world&nbsp;&nbsp;";<br>str&nbsp;=&nbsp;str.trim();&nbsp;//&nbsp;hello&nbsp;world</code></pre>
     </div>
     <p class="paragraph">Metoda substring() returnează un subșir, începând de la un anumit index până la sfârșit sau până la un anumit index:</p>
     <div class="code-inline">
      <pre><code>String&nbsp;str&nbsp;=&nbsp;"Hello&nbsp;world";<br>String&nbsp;substr1&nbsp;=&nbsp;str.substring(6);&nbsp;//&nbsp;world<br>String&nbsp;substr2&nbsp;=&nbsp;str.substring(3,5);&nbsp;//&nbsp;lo</code></pre>
     </div>
     <h2 class="subtitle">Modificarea cazului</h2>
     <p class="paragraph">Metoda toLowerCase() convertește toate caracterele șirului în litere mici, iar metoda toUpperCase() – în litere mari:</p>
     <div class="code-inline">
      <pre><code>String&nbsp;str&nbsp;=&nbsp;"Hello&nbsp;World";<br>System.out.println(str.toLowerCase());&nbsp;//&nbsp;hello&nbsp;world<br>System.out.println(str.toUpperCase());&nbsp;//&nbsp;HELLO&nbsp;WORLD</code></pre>
     </div>
     <h2 class="subtitle">Metoda split()</h2>
     <p class="paragraph">Metoda split() permite împărțirea unui șir în subșiruri, după un anumit separator. Separatorul – un caracter sau un set de caractere – este transmis ca parametru metodei. De exemplu, vom împărți un text în cuvinte separate:</p>
     <div class="code-inline">
      <pre><code>String&nbsp;text&nbsp;=&nbsp;"FIFA&nbsp;will&nbsp;never&nbsp;regret&nbsp;it";<br>String[]&nbsp;words&nbsp;=&nbsp;text.split("&nbsp;");<br>for(String&nbsp;word&nbsp;:&nbsp;words){<br>&nbsp;&nbsp;&nbsp;System.out.println(word);<br>}</code></pre>
     </div>
     <p class="paragraph">În acest caz, șirul va fi împărțit după spațiu. Ieșirea în consolă:</p>
     <div class="code-inline">
      <pre><code>FIFA&nbsp;&nbsp;<br>will&nbsp;&nbsp;<br>never&nbsp;&nbsp;<br>regret&nbsp;&nbsp;<br>it</code></pre>
     </div>
    </div>
   </main>
   <aside class="ad-section">
    <div class="ad-box">
     <p>Google Ad Here</p>
    </div>
    <div class="ad-box">
     <p>Promo: SQL Beginner Guide</p>
    </div>
   </aside>
  </div>
  <div class="lesson-navigation">
   <th:block th:if="${previousLesson != null}">
    <a th:href="@{'/lessons/' +
            ${#strings.toLowerCase(#strings.replace(previousLesson.chapter.topic.name, ' ', '-'))} + '/' +
            ${#strings.toLowerCase(#strings.replace(previousLesson.chapter.title, ' ', '-'))} + '/' +
            ${#strings.toLowerCase(#strings.replace(previousLesson.title, ' ', '-'))} }" class="nav-button">← Lecția anterioară</a>
   </th:block> <th:block th:if="${nextLesson != null}">
    <a th:href="@{'/lessons/' +
            ${#strings.toLowerCase(#strings.replace(nextLesson.chapter.topic.name, ' ', '-'))} + '/' +
            ${#strings.toLowerCase(#strings.replace(nextLesson.chapter.title, ' ', '-'))} + '/' +
            ${#strings.toLowerCase(#strings.replace(nextLesson.title, ' ', '-'))} }" class="nav-button">Lecția următoare →</a>
   </th:block>
  </div>
  <div th:replace="~{fragments/footer :: footer}"></div>
  <script th:src="@{/js/script.js}" defer></script>
 </body>
</html>
