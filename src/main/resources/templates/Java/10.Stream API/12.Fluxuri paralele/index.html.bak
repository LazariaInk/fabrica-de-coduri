<!doctype html>
<html lang="ro" xmlns:th="http://www.w3.org/1999/xhtml">
 <head>
    <script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-4253419731329045"
            crossorigin="anonymous"></script>


  <link rel="canonical" th:href="${canonicalUrl}" />

    <link rel="icon" type="image/png" href="/nume-aplicatie/images/favicon.png">
    <script async src="https://www.googletagmanager.com/gtag/js?id=G-7Q2536ZKL2"></script>
    <script>
      window.dataLayer = window.dataLayer || [];
      window.gtag = function () { dataLayer.push(arguments); };
      gtag('consent', 'default', {
        'wait_for_update': 500,
        'region': ['RO'],
        'ad_storage': 'denied',
        'analytics_storage': 'denied',
        'ad_user_data': 'denied',
        'ad_personalization': 'denied'
      });
      gtag('js', new Date());
      gtag('config', 'G-7Q2536ZKL2');
    </script>


  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title th:text="${lesson.title}">Lesson</title>
  <link rel="stylesheet" th:href="@{/css/styles.css}">
  <style>body { background: #ffffff; }</style>
 </head>
 <body th:with="activeTopic='Java', activeChapter='10.Stream API', activeLesson='12.Fluxuri paralele'">
  <button class="mobile-sidebar-toggle" onclick="toggleMobileSidebar()">☰</button>
  <div th:replace="~{fragments/nav :: nav}"></div>
  <div class="top-nav">
   <th:block th:each="topic : ${topics}">
    <a th:href="@{'/lectii/topic/' + ${topic.id}}" th:text="${topic.name}" th:classappend="${topic.id} == ${activeTopicId} ? 'active' : ''"> </a>
   </th:block>
  </div>
  <div class="layout">
   <div class="mobile-sidebar" id="mobileSidebar">
    <button class="close-btn" onclick="toggleSidebar()">✖</button>
    <ul class="chapter-list">
     <th:block th:each="chapter : ${chapters}">
      <li class="chapter-item" th:classappend="${chapter.id} == ${activeChapterId} ? 'open' : ''">
       <div class="chapter-title" onclick="toggleChapter(this)">
        <strong th:text="${chapter.title}"></strong> <span class="arrow">▼</span>
       </div>
       <ul class="lesson-list">
        <th:block th:each="lesson : ${chapter.lessons}">
         <li><a th:href="@{'/lectii/' +
    ${#strings.toLowerCase(#strings.replace(chapter.topic.name, ' ', '-'))} + '/' +
    ${#strings.toLowerCase(#strings.replace(chapter.title, ' ', '-'))} + '/' +
    ${#strings.toLowerCase(#strings.replace(lesson.title, ' ', '-'))} }" th:text="${lesson.title}" th:classappend="${lesson.id} == ${activeLessonId} ? 'active' : ''"> </a></li>
        </th:block>
       </ul></li>
     </th:block>
    </ul>
   </div>
   <aside class="sidebar">
    <ul class="sidebar-list">
     <th:block th:each="chapter : ${chapters}">
      <li class="chapter-item" th:classappend="${chapter.id} == ${activeChapterId} ? 'open' : ''">
       <div class="chapter-toggle" onclick="toggleLessons(this)">
        <span th:text="${chapter.title}">Chapter</span>
       </div>
       <ul class="lesson-list hidden">
        <th:block th:each="lesson : ${chapter.lessons}">
         <li><a th:href="@{'/lectii/' +
    ${#strings.toLowerCase(#strings.replace(chapter.topic.name, ' ', '-'))} + '/' +
    ${#strings.toLowerCase(#strings.replace(chapter.title, ' ', '-'))} + '/' +
    ${#strings.toLowerCase(#strings.replace(lesson.title, ' ', '-'))} }" th:text="${lesson.title}" th:classappend="${lesson.id} == ${activeLessonId} ? 'active' : ''"> </a></li>
        </th:block>
       </ul></li>
     </th:block>
    </ul>
   </aside>
   <main class="content">
    <div class="document-container">
     <h1 class="main-title">Fluxuri paralele</h1>
     <p class="paragraph">Pe lângă fluxurile secvențiale, Stream API suportă și fluxuri paralele. Paralelizarea fluxurilor permite utilizarea mai multor nuclee ale procesorului (dacă mașina țintă este multi-core), ceea ce poate îmbunătăți performanța și accelera calculele.</p>
     <p class="paragraph">Cu toate acestea, nu este întotdeauna corect să afirmăm că utilizarea fluxurilor paralele pe mașinile multi-core va crește performanța în mod garantat. În fiecare caz specific, este necesar să se testeze și să se verifice.</p>
     <p class="paragraph">Pentru a face un flux secvențial obișnuit paralel, trebuie să apelăm metoda parallel a obiectului Stream. De asemenea, putem folosi metoda parallelStream() a interfeței Collection pentru a crea un flux paralel dintr-o colecție.</p>
     <p class="paragraph">Dacă mașina de lucru nu este multi-core, fluxul se va executa secvențial.</p>
     <p class="paragraph">Utilizarea fluxurilor paralele în multe cazuri va fi similară. De exemplu:</p>
     <div class="code-inline">
      <pre><code>import&nbsp;java.util.Optional;<br>import&nbsp;java.util.stream.Stream;<br><br>public&nbsp;class&nbsp;Program&nbsp;{<br>&nbsp;&nbsp;&nbsp;public&nbsp;static&nbsp;void&nbsp;main(String[]&nbsp;args)&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Stream&lt;Integer&gt;&nbsp;numbersStream&nbsp;=&nbsp;Stream.of(1,&nbsp;2,&nbsp;3,&nbsp;4,&nbsp;5,&nbsp;6);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Optional&lt;Integer&gt;&nbsp;result&nbsp;=&nbsp;numbersStream.parallel().reduce((x,&nbsp;y)&nbsp;-&gt;&nbsp;x&nbsp;*&nbsp;y);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(result.get());&nbsp;//&nbsp;720<br>&nbsp;&nbsp;&nbsp;}<br>}</code></pre>
     </div>
     <p class="paragraph">Un alt exemplu:</p>
     <div class="code-inline">
      <pre><code>import&nbsp;java.util.Arrays;<br>import&nbsp;java.util.List;<br><br>public&nbsp;class&nbsp;Program&nbsp;{<br>&nbsp;&nbsp;&nbsp;public&nbsp;static&nbsp;void&nbsp;main(String[]&nbsp;args)&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;List&lt;String&gt;&nbsp;people&nbsp;=&nbsp;Arrays.asList("Tom",&nbsp;"Bob",&nbsp;"Sam",&nbsp;"Kate",&nbsp;"Tim");<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.out.println("Flux&nbsp;secvențial");<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;people.stream().filter(p&nbsp;-&gt;&nbsp;p.length()&nbsp;==&nbsp;3).forEach(System.out::println);<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.out.println("\nFlux&nbsp;paralel");<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;people.parallelStream().filter(p&nbsp;-&gt;&nbsp;p.length()&nbsp;==&nbsp;3).forEach(System.out::println);<br>&nbsp;&nbsp;&nbsp;}<br>}</code></pre>
     </div>
     <p class="paragraph">În acest caz, mai întâi creăm un flux pentru lista people și efectuăm câteva operațiuni în mod secvențial, căutând în listă șiruri de caractere cu lungimea egală cu 3 și afișându-le în consolă. În acest caz, toate operațiunile vor fi efectuate în ordinea în care elementele apar în listă.</p>
     <p class="paragraph">Apoi, folosim metoda people.parallelStream() pentru a crea un flux paralel. Deși aplicăm aceleași operațiuni, ordinea în care elementele listei vor fi procesate nu este determinată.</p>
     <p class="paragraph">Output în consolă:</p>
     <div class="code-inline">
      <pre><code>Flux&nbsp;secvențial<br>Tom<br>Bob<br>Sam<br>Tim<br><br>Flux&nbsp;paralel<br>Sam<br>Tim<br>Bob<br>Tom</code></pre>
     </div>
     <p class="paragraph">În cazul fluxului paralel, rezultatul este nedeterministic și poate varia.</p>
     <p class="paragraph">Totuși, nu toate funcțiile pot fi transferate de la fluxurile secvențiale la cele paralele fără a compromite corectitudinea calculelor. Aceste funcții trebuie să fie fără stări și asociative, adică să producă același rezultat indiferent dacă se efectuează de la stânga la dreapta sau de la dreapta la stânga, ca în cazul înmulțirii numerelor. De exemplu:</p>
     <div class="code-inline">
      <pre><code>Stream&lt;Integer&gt;&nbsp;numbersStream&nbsp;=&nbsp;Stream.of(1,&nbsp;2,&nbsp;3,&nbsp;4,&nbsp;5,&nbsp;6);<br>Integer&nbsp;result&nbsp;=&nbsp;numbersStream.parallel().reduce(1,&nbsp;(x,&nbsp;y)&nbsp;-&gt;&nbsp;x&nbsp;*&nbsp;y);<br>System.out.println(result);</code></pre>
     </div>
     <p class="paragraph">Aici se realizează înmulțirea numerelor. Nu contează dacă ordinea este 1 * 2 * 3 * 4 * (5 * 6) sau 5 * 6 * 1 * (2 * 3) * 4. Putem pune parantezele în orice mod, iar rezultatul va fi același, deoarece operația este asociativă și poate fi paralelizată.</p>
     <h2 class="subtitle">Probleme de performanță în operațiunile paralele</h2>
     <p class="paragraph">Utilizarea fluxurilor paralele implică împărțirea datelor în părți, fiecare parte fiind procesată pe un nucleu separat al procesorului, iar la final aceste părți sunt combinate și se aplică operațiile finale. Iată câțiva factori care pot afecta performanța fluxurilor paralele:</p>
     <ul class="enumeration">
      <li>Dimensiunea datelor: Cu cât datele sunt mai mari, cu atât este mai complicat să le împărțim și apoi să le combinăm</li>
      <li>Numărul de nuclee ale procesorului: Teoretic, cu cât sunt mai multe nuclee, cu atât mai rapid va funcționa programul. Dacă mașina are un singur nucleu, nu are sens să folosim fluxuri paralele</li>
      <li>Structura datelor: Cu cât structura datelor este mai simplă, cu atât mai rapid vor fi efectuate operațiile. De exemplu, ArrayList este ușor de utilizat deoarece conține date neconectate. În schimb, LinkedList nu este cea mai bună alegere, deoarece fiecare element din listă este conectat cu cel anterior/următor, ceea ce face dificilă paralelizarea</li>
      <li>Tipuri de date primitive: Operațiile pe tipuri primitive vor fi efectuate mai rapid decât pe obiecte de clasă</li>
     </ul>
     <h2 class="subtitle">Ordinea în fluxurile paralele</h2>
     <p class="paragraph">De obicei, elementele sunt transmise fluxului în aceeași ordine în care sunt definite în sursa de date. În fluxurile paralele, sistemul menține ordinea elementelor. O excepție este metoda forEach(), care poate afișa elementele într-o ordine aleatorie. Pentru a păstra ordinea, trebuie să folosim metoda forEachOrdered:</p>
     <div class="code-inline">
      <pre><code>phones.parallelStream()<br>&nbsp;&nbsp;&nbsp;.sorted()<br>&nbsp;&nbsp;&nbsp;.forEachOrdered(s&nbsp;-&gt;&nbsp;System.out.println(s));</code></pre>
     </div>
     <p class="paragraph">Păstrarea ordinii în fluxurile paralele implică costuri suplimentare la execuție. Dar dacă ordinea nu este importantă, o putem dezactiva pentru a crește performanța, folosind metoda unordered:</p>
     <div class="code-inline">
      <pre><code>phones.parallelStream()<br>&nbsp;&nbsp;&nbsp;.sorted()<br>&nbsp;&nbsp;&nbsp;.unordered()<br>&nbsp;&nbsp;&nbsp;.forEach(s&nbsp;-&gt;&nbsp;System.out.println(s));</code></pre>
     </div>
    </div>
   </main>
   <aside class="ad-section">
    <div class="ad-box">
     <p>Google Ad Here</p>
    </div>
    <div class="ad-box">
     <p>Promo: SQL Beginner Guide</p>
    </div>
   </aside>
  </div>
  <div class="lesson-navigation">
   <th:block th:if="${previousLesson != null}">
    <a th:href="@{'/lectii/' +
            ${#strings.toLowerCase(#strings.replace(previousLesson.chapter.topic.name, ' ', '-'))} + '/' +
            ${#strings.toLowerCase(#strings.replace(previousLesson.chapter.title, ' ', '-'))} + '/' +
            ${#strings.toLowerCase(#strings.replace(previousLesson.title, ' ', '-'))} }" class="nav-button">← Lecția anterioară</a>
   </th:block> <th:block th:if="${nextLesson != null}">
    <a th:href="@{'/lectii/' +
            ${#strings.toLowerCase(#strings.replace(nextLesson.chapter.topic.name, ' ', '-'))} + '/' +
            ${#strings.toLowerCase(#strings.replace(nextLesson.chapter.title, ' ', '-'))} + '/' +
            ${#strings.toLowerCase(#strings.replace(nextLesson.title, ' ', '-'))} }" class="nav-button">Lecția următoare →</a>
   </th:block>
  </div>
  <div th:replace="~{fragments/footer :: footer}"></div>
  <script th:src="@{/js/script.js}" defer></script>
 </body>
</html>
