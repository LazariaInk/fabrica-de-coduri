<!doctype html>
<html lang="ro" xmlns:th="http://www.w3.org/1999/xhtml">
 <head>
    <link rel="icon" type="image/png" href="/nume-aplicatie/images/favicon.png">
    <script async src="https://www.googletagmanager.com/gtag/js?id=G-7Q2536ZKL2"></script>
    <script>
      window.dataLayer = window.dataLayer || [];
      window.gtag = function () { dataLayer.push(arguments); };
      gtag('consent', 'default', {
        'wait_for_update': 500,
        'region': ['RO'],
        'ad_storage': 'denied',
        'analytics_storage': 'denied',
        'ad_user_data': 'denied',
        'ad_personalization': 'denied'
      });
      gtag('js', new Date());
      gtag('config', 'G-7Q2536ZKL2');
    </script>


  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title th:text="${lesson.title}">Lesson</title>
  <link rel="stylesheet" th:href="@{/css/styles.css}">
  <style>body { background: #ffffff; }</style>
 </head>
 <body th:with="activeTopic='Java', activeChapter='10.Stream API', activeLesson='9.Tipul Optional'">
  <button class="mobile-sidebar-toggle" onclick="toggleMobileSidebar()">☰</button>
  <div th:replace="~{fragments/nav :: nav}"></div>
  <div class="top-nav">
   <th:block th:each="topic : ${topics}">
    <a th:href="@{'/lectii/topic/' + ${topic.id}}" th:text="${topic.name}" th:classappend="${topic.id} == ${activeTopicId} ? 'active' : ''"> </a>
   </th:block>
  </div>
  <div class="layout">
   <div class="mobile-sidebar" id="mobileSidebar">
    <button class="close-btn" onclick="toggleSidebar()">✖</button>
    <ul class="chapter-list">
     <th:block th:each="chapter : ${chapters}">
      <li class="chapter-item" th:classappend="${chapter.id} == ${activeChapterId} ? 'open' : ''">
       <div class="chapter-title" onclick="toggleChapter(this)">
        <strong th:text="${chapter.title}"></strong> <span class="arrow">▼</span>
       </div>
       <ul class="lesson-list">
        <th:block th:each="lesson : ${chapter.lessons}">
         <li><a th:href="@{'/lessons/' +
    ${#strings.toLowerCase(#strings.replace(chapter.topic.name, ' ', '-'))} + '/' +
    ${#strings.toLowerCase(#strings.replace(chapter.title, ' ', '-'))} + '/' +
    ${#strings.toLowerCase(#strings.replace(lesson.title, ' ', '-'))} }" th:text="${lesson.title}" th:classappend="${lesson.id} == ${activeLessonId} ? 'active' : ''"> </a></li>
        </th:block>
       </ul></li>
     </th:block>
    </ul>
   </div>
   <aside class="sidebar">
    <ul class="sidebar-list">
     <th:block th:each="chapter : ${chapters}">
      <li class="chapter-item" th:classappend="${chapter.id} == ${activeChapterId} ? 'open' : ''">
       <div class="chapter-toggle" onclick="toggleLessons(this)">
        <span th:text="${chapter.title}">Chapter</span>
       </div>
       <ul class="lesson-list hidden">
        <th:block th:each="lesson : ${chapter.lessons}">
         <li><a th:href="@{'/lessons/' +
    ${#strings.toLowerCase(#strings.replace(chapter.topic.name, ' ', '-'))} + '/' +
    ${#strings.toLowerCase(#strings.replace(chapter.title, ' ', '-'))} + '/' +
    ${#strings.toLowerCase(#strings.replace(lesson.title, ' ', '-'))} }" th:text="${lesson.title}" th:classappend="${lesson.id} == ${activeLessonId} ? 'active' : ''"> </a></li>
        </th:block>
       </ul></li>
     </th:block>
    </ul>
   </aside>
   <main class="content">
    <div class="document-container">
     <h1 class="main-title">Tipul Optional</h1>
     <p class="paragraph">O serie de operațiuni de agregare, precum min, max, reduce, returnează un obiect Optional&lt;T&gt;. Acest obiect înfășoară de fapt rezultatul operației. După efectuarea operației, cu ajutorul metodei get() a obiectului Optional, putem obține valoarea acestuia:</p>
     <div class="code-inline">
      <pre><code>import&nbsp;java.util.Optional;<br>import&nbsp;java.util.ArrayList;<br>import&nbsp;java.util.Arrays;<br><br>public&nbsp;class&nbsp;Program&nbsp;{<br><br>&nbsp;&nbsp;&nbsp;public&nbsp;static&nbsp;void&nbsp;main(String[]&nbsp;args)&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ArrayList&lt;Integer&gt;&nbsp;numbers&nbsp;=&nbsp;new&nbsp;ArrayList&lt;Integer&gt;();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;numbers.addAll(Arrays.asList(new&nbsp;Integer[]{1,&nbsp;2,&nbsp;3,&nbsp;4,&nbsp;5,&nbsp;6,&nbsp;7,&nbsp;8,&nbsp;9}));<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Optional&lt;Integer&gt;&nbsp;min&nbsp;=&nbsp;numbers.stream().min(Integer::compare);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(min.get());&nbsp;&nbsp;//&nbsp;1<br>&nbsp;&nbsp;&nbsp;}<br>}</code></pre>
     </div>
     <p class="paragraph">Dar ce se întâmplă dacă fluxul nu conține date:</p>
     <div class="code-inline">
      <pre><code>//&nbsp;lista&nbsp;numbers&nbsp;este&nbsp;goală<br>ArrayList&lt;Integer&gt;&nbsp;numbers&nbsp;=&nbsp;new&nbsp;ArrayList&lt;Integer&gt;();<br>Optional&lt;Integer&gt;&nbsp;min&nbsp;=&nbsp;numbers.stream().min(Integer::compare);<br>System.out.println(min.get());&nbsp;&nbsp;//&nbsp;java.util.NoSuchElementException</code></pre>
     </div>
     <p class="paragraph">În acest caz, programul va arunca excepția java.util.NoSuchElementException. Ce putem face pentru a evita aruncarea acestei excepții? Pentru aceasta, clasa Optional oferă o serie de metode.</p>
     <p class="paragraph">Cea mai simplă modalitate de a evita o astfel de situație este verificarea preliminară a prezenței unei valori în Optional folosind metoda isPresent(). Aceasta returnează true dacă valoarea este prezentă în Optional și false dacă valoarea lipsește:</p>
     <div class="code-inline">
      <pre><code>ArrayList&lt;Integer&gt;&nbsp;numbers&nbsp;=&nbsp;new&nbsp;ArrayList&lt;Integer&gt;();<br>Optional&lt;Integer&gt;&nbsp;min&nbsp;=&nbsp;numbers.stream().min(Integer::compare);<br>if&nbsp;(min.isPresent())&nbsp;{<br>&nbsp;&nbsp;&nbsp;System.out.println(min.get());<br>}</code></pre>
     </div>
     <h2 class="subtitle">Metoda orElse()</h2>
     <p class="paragraph">Metoda orElse() permite definirea unei valori alternative care va fi returnată dacă Optional nu conține nicio valoare din flux:</p>
     <div class="code-inline">
      <pre><code>//&nbsp;lista&nbsp;goală<br>ArrayList&lt;Integer&gt;&nbsp;numbers&nbsp;=&nbsp;new&nbsp;ArrayList&lt;Integer&gt;();<br>Optional&lt;Integer&gt;&nbsp;min&nbsp;=&nbsp;numbers.stream().min(Integer::compare);<br>System.out.println(min.orElse(-1));&nbsp;//&nbsp;-1<br><br>//&nbsp;lista&nbsp;ne-goală<br>numbers.addAll(Arrays.asList(new&nbsp;Integer[]{4,&nbsp;5,&nbsp;6,&nbsp;7,&nbsp;8,&nbsp;9}));<br>min&nbsp;=&nbsp;numbers.stream().min(Integer::compare);<br>System.out.println(min.orElse(-1));&nbsp;//&nbsp;4</code></pre>
     </div>
     <h2 class="subtitle">Metoda orElseGet()</h2>
     <p class="paragraph">Metoda orElseGet() permite setarea unei funcții care va returna valoarea implicită:</p>
     <div class="code-inline">
      <pre><code>import&nbsp;java.util.Optional;<br>import&nbsp;java.util.ArrayList;<br>import&nbsp;java.util.Arrays;<br>import&nbsp;java.util.Random;<br><br>public&nbsp;class&nbsp;Program&nbsp;{<br><br>&nbsp;&nbsp;&nbsp;public&nbsp;static&nbsp;void&nbsp;main(String[]&nbsp;args)&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ArrayList&lt;Integer&gt;&nbsp;numbers&nbsp;=&nbsp;new&nbsp;ArrayList&lt;Integer&gt;();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Optional&lt;Integer&gt;&nbsp;min&nbsp;=&nbsp;numbers.stream().min(Integer::compare);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Random&nbsp;rnd&nbsp;=&nbsp;new&nbsp;Random();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(min.orElseGet(()&nbsp;-&gt;&nbsp;rnd.nextInt(100)));<br>&nbsp;&nbsp;&nbsp;}<br>}</code></pre>
     </div>
     <p class="paragraph">În acest caz, valoarea returnată este generată folosind metoda nextInt a clasei Random, care returnează un număr aleatoriu.</p>
     <h2 class="subtitle">Metodă orElseThrow</h2>
     <p class="paragraph">O altă metodă - orElseThrow permite generarea unei excepții dacă Optional nu conține nicio valoare:</p>
     <div class="code-inline">
      <pre><code>ArrayList&lt;Integer&gt;&nbsp;numbers&nbsp;=&nbsp;new&nbsp;ArrayList&lt;Integer&gt;();<br>Optional&lt;Integer&gt;&nbsp;min&nbsp;=&nbsp;numbers.stream().min(Integer::compare);<br>//&nbsp;generare&nbsp;excepție&nbsp;IllegalStateException<br>System.out.println(min.orElseThrow(IllegalStateException::new));</code></pre>
     </div>
     <h2 class="subtitle">Manipularea valorii obținute</h2>
     <p class="paragraph">Metoda ifPresent() definește acțiunile care se vor efectua cu valoarea din Optional, dacă aceasta există:</p>
     <div class="code-inline">
      <pre><code>ArrayList&lt;Integer&gt;&nbsp;numbers&nbsp;=&nbsp;new&nbsp;ArrayList&lt;Integer&gt;();<br>numbers.addAll(Arrays.asList(new&nbsp;Integer[]{4,&nbsp;5,&nbsp;6,&nbsp;7,&nbsp;8,&nbsp;9}));<br>Optional&lt;Integer&gt;&nbsp;min&nbsp;=&nbsp;numbers.stream().min(Integer::compare);<br>min.ifPresent(v&nbsp;-&gt;&nbsp;System.out.println(v));&nbsp;//&nbsp;4</code></pre>
     </div>
     <p class="paragraph">În metoda ifPresent este transmisă o funcție care primește un parametru - valoarea din Optional. În acest caz, numărul minim obținut este afișat pe consolă. Dar dacă lista numbers ar fi fost goală și, prin urmare, Optional nu ar fi conținut nicio valoare, nu s-ar fi generat nicio eroare.</p>
     <p class="paragraph">Metoda ifPresentOrElse() permite definirea unei logici alternative în cazul în care valoarea din Optional lipsește:</p>
     <div class="code-inline">
      <pre><code>ArrayList&lt;Integer&gt;&nbsp;numbers&nbsp;=&nbsp;new&nbsp;ArrayList&lt;Integer&gt;();<br>Optional&lt;Integer&gt;&nbsp;min&nbsp;=&nbsp;numbers.stream().min(Integer::compare);<br>min.ifPresentOrElse(<br>&nbsp;&nbsp;&nbsp;v&nbsp;-&gt;&nbsp;System.out.println(v),<br>&nbsp;&nbsp;&nbsp;()&nbsp;-&gt;&nbsp;System.out.println("Valoare&nbsp;nu&nbsp;a&nbsp;fost&nbsp;găsită")<br>);</code></pre>
     </div>
     <p class="paragraph">În metoda ifPresentOrElse sunt transmise două funcții. Prima prelucrează valoarea din Optional, dacă aceasta este prezentă. A doua funcție definește acțiunile care se vor efectua în cazul în care valoarea lipsește din Optional.</p>
    </div>
   </main>
   <aside class="ad-section">
    <div class="ad-box">
     <p>Google Ad Here</p>
    </div>
    <div class="ad-box">
     <p>Promo: SQL Beginner Guide</p>
    </div>
   </aside>
  </div>
  <div class="lesson-navigation">
   <th:block th:if="${previousLesson != null}">
    <a th:href="@{'/lessons/' +
            ${#strings.toLowerCase(#strings.replace(previousLesson.chapter.topic.name, ' ', '-'))} + '/' +
            ${#strings.toLowerCase(#strings.replace(previousLesson.chapter.title, ' ', '-'))} + '/' +
            ${#strings.toLowerCase(#strings.replace(previousLesson.title, ' ', '-'))} }" class="nav-button">← Lecția anterioară</a>
   </th:block> <th:block th:if="${nextLesson != null}">
    <a th:href="@{'/lessons/' +
            ${#strings.toLowerCase(#strings.replace(nextLesson.chapter.topic.name, ' ', '-'))} + '/' +
            ${#strings.toLowerCase(#strings.replace(nextLesson.chapter.title, ' ', '-'))} + '/' +
            ${#strings.toLowerCase(#strings.replace(nextLesson.title, ' ', '-'))} }" class="nav-button">Lecția următoare →</a>
   </th:block>
  </div>
  <div th:replace="~{fragments/footer :: footer}"></div>
  <script th:src="@{/js/script.js}" defer></script>
 </body>
</html>
