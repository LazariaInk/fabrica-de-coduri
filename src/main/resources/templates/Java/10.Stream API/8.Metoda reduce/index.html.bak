<!doctype html>
<html lang="ro" xmlns:th="http://www.w3.org/1999/xhtml">
 <head>
    <script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-4253419731329045"
            crossorigin="anonymous"></script>


  <link rel="canonical" th:href="${canonicalUrl}" />

    <link rel="icon" type="image/png" href="/nume-aplicatie/images/favicon.png">
    <script async src="https://www.googletagmanager.com/gtag/js?id=G-7Q2536ZKL2"></script>
    <script>
      window.dataLayer = window.dataLayer || [];
      window.gtag = function () { dataLayer.push(arguments); };
      gtag('consent', 'default', {
        'wait_for_update': 500,
        'region': ['RO'],
        'ad_storage': 'denied',
        'analytics_storage': 'denied',
        'ad_user_data': 'denied',
        'ad_personalization': 'denied'
      });
      gtag('js', new Date());
      gtag('config', 'G-7Q2536ZKL2');
    </script>


  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title th:text="${lesson.title}">Lesson</title>
  <link rel="stylesheet" th:href="@{/css/styles.css}">
  <style>body { background: #ffffff; }</style>
 </head>
 <body th:with="activeTopic='Java', activeChapter='10.Stream API', activeLesson='8.Metoda reduce'">
  <button class="mobile-sidebar-toggle" onclick="toggleMobileSidebar()">☰</button>
  <div th:replace="~{fragments/nav :: nav}"></div>
  <div class="top-nav">
   <th:block th:each="topic : ${topics}">
    <a th:href="@{'/lectii/topic/' + ${topic.id}}" th:text="${topic.name}" th:classappend="${topic.id} == ${activeTopicId} ? 'active' : ''"> </a>
   </th:block>
  </div>
  <div class="layout">
   <div class="mobile-sidebar" id="mobileSidebar">
    <button class="close-btn" onclick="toggleSidebar()">✖</button>
    <ul class="chapter-list">
     <th:block th:each="chapter : ${chapters}">
      <li class="chapter-item" th:classappend="${chapter.id} == ${activeChapterId} ? 'open' : ''">
       <div class="chapter-title" onclick="toggleChapter(this)">
        <strong th:text="${chapter.title}"></strong> <span class="arrow">▼</span>
       </div>
       <ul class="lesson-list">
        <th:block th:each="lesson : ${chapter.lessons}">
         <li><a th:href="@{'/lectii/' +
    ${#strings.toLowerCase(#strings.replace(chapter.topic.name, ' ', '-'))} + '/' +
    ${#strings.toLowerCase(#strings.replace(chapter.title, ' ', '-'))} + '/' +
    ${#strings.toLowerCase(#strings.replace(lesson.title, ' ', '-'))} }" th:text="${lesson.title}" th:classappend="${lesson.id} == ${activeLessonId} ? 'active' : ''"> </a></li>
        </th:block>
       </ul></li>
     </th:block>
    </ul>
   </div>
   <aside class="sidebar">
    <ul class="sidebar-list">
     <th:block th:each="chapter : ${chapters}">
      <li class="chapter-item" th:classappend="${chapter.id} == ${activeChapterId} ? 'open' : ''">
       <div class="chapter-toggle" onclick="toggleLessons(this)">
        <span th:text="${chapter.title}">Chapter</span>
       </div>
       <ul class="lesson-list hidden">
        <th:block th:each="lesson : ${chapter.lessons}">
         <li><a th:href="@{'/lectii/' +
    ${#strings.toLowerCase(#strings.replace(chapter.topic.name, ' ', '-'))} + '/' +
    ${#strings.toLowerCase(#strings.replace(chapter.title, ' ', '-'))} + '/' +
    ${#strings.toLowerCase(#strings.replace(lesson.title, ' ', '-'))} }" th:text="${lesson.title}" th:classappend="${lesson.id} == ${activeLessonId} ? 'active' : ''"> </a></li>
        </th:block>
       </ul></li>
     </th:block>
    </ul>
   </aside>
   <main class="content">
    <div class="document-container">
     <h1 class="main-title">Metoda reduce</h1>
     <p class="paragraph">Metoda reduce efectuează operații terminale de reducere, returnând o valoare care reprezintă rezultatul operației. Are următoarele forme:</p>
     <div class="code-inline">
      <pre><code>Optional&lt;T&gt;&nbsp;reduce(BinaryOperator&lt;T&gt;&nbsp;accumulator)<br>T&nbsp;reduce(T&nbsp;identity,&nbsp;BinaryOperator&lt;T&gt;&nbsp;accumulator)<br>&lt;U&gt;&nbsp;U&nbsp;reduce(U&nbsp;identity,&nbsp;BiFunction&lt;U,&nbsp;?&nbsp;super&nbsp;T,&nbsp;U&gt;&nbsp;accumulator,&nbsp;BinaryOperator&lt;U&gt;&nbsp;combiner)</code></pre>
     </div>
     <p class="paragraph">Prima formă returnează rezultatul sub formă de Optional&lt;T&gt;. De exemplu, să calculăm produsul unui set de numere:</p>
     <div class="code-inline">
      <pre><code>import&nbsp;java.util.stream.Stream;<br>import&nbsp;java.util.Optional;<br><br>public&nbsp;class&nbsp;Program&nbsp;{<br><br>&nbsp;&nbsp;&nbsp;public&nbsp;static&nbsp;void&nbsp;main(String[]&nbsp;args)&nbsp;{<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Stream&lt;Integer&gt;&nbsp;numbersStream&nbsp;=&nbsp;Stream.of(1,&nbsp;2,&nbsp;3,&nbsp;4,&nbsp;5,&nbsp;6);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Optional&lt;Integer&gt;&nbsp;result&nbsp;=&nbsp;numbersStream.reduce((x,&nbsp;y)&nbsp;-&gt;&nbsp;x&nbsp;*&nbsp;y);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(result.get());&nbsp;//&nbsp;720<br>&nbsp;&nbsp;&nbsp;}<br>}</code></pre>
     </div>
     <p class="paragraph">Obiectul BinaryOperator&lt;T&gt; reprezintă o funcție care acceptă două elemente și efectuează o anumită operație asupra lor, returnând rezultatul. În acest context, metoda reduce păstrează rezultatul și aplică din nou asupra acestuia și asupra următorului element din set operația binară. De fapt, în acest caz, vom obține un rezultat care va fi egal cu: n1 op n2 op n3 op n4 op n5 op n6, unde op este operația (în acest caz, înmulțirea), iar n1, n2, ... sunt elemente din flux.</p>
     <p class="paragraph">Apoi, cu ajutorul metodei get(), putem obține rezultatul propriu-zis al calculului: result.get().</p>
     <p class="paragraph">Un alt exemplu - unirea cuvintelor într-o propoziție:</p>
     <div class="code-inline">
      <pre><code>Stream&lt;String&gt;&nbsp;wordsStream&nbsp;=&nbsp;Stream.of("mama",&nbsp;"spăla",&nbsp;"rama");<br>Optional&lt;String&gt;&nbsp;sentence&nbsp;=&nbsp;wordsStream.reduce((x,&nbsp;y)&nbsp;-&gt;&nbsp;x&nbsp;+&nbsp;"&nbsp;"&nbsp;+&nbsp;y);<br>System.out.println(sentence.get());</code></pre>
     </div>
     <p class="paragraph">A doua versiune a metodei reduce() acceptă doi parametri:</p>
     <div class="code-inline">
      <pre><code>T&nbsp;reduce(T&nbsp;identity,&nbsp;BinaryOperator&lt;T&gt;&nbsp;accumulator)</code></pre>
     </div>
     <p class="paragraph">Primul parametru - T identity - este elementul care oferă valoarea inițială pentru funcția din al doilea parametru și, de asemenea, oferă o valoare implicită dacă fluxul nu are elemente.</p>
     <p class="paragraph">Al doilea parametru - BinaryOperator&lt;T&gt; accumulator, la fel ca prima formă a metodei reduce, reprezintă o funcție asociativă care se execută pentru fiecare element din flux și acceptă doi parametri.</p>
     <p class="paragraph">Primul parametru reprezintă rezultatul intermediar al funcției, iar al doilea parametru - următorul element din flux. Practic, codul acestei metode va fi echivalent cu următoarea înregistrare:</p>
     <div class="code-inline">
      <pre><code>T&nbsp;result&nbsp;=&nbsp;identity;<br>for&nbsp;(T&nbsp;element&nbsp;:&nbsp;this&nbsp;stream)<br>&nbsp;&nbsp;&nbsp;result&nbsp;=&nbsp;accumulator.apply(result,&nbsp;element)<br>return&nbsp;result;</code></pre>
     </div>
     <p class="paragraph">Adică, la prima apelare, funcția accumulator primește ca prim parametru valoarea identity și ca al doilea parametru - primul element din flux. La a doua apelare, primul parametru este rezultatul primei apelări a funcției accumulator, iar al doilea parametru este al doilea element din flux și așa mai departe. De exemplu:</p>
     <div class="code-inline">
      <pre><code>Stream&lt;Integer&gt;&nbsp;numberStream&nbsp;=&nbsp;Stream.of(-4,&nbsp;3,&nbsp;-2,&nbsp;1);<br>int&nbsp;identity&nbsp;=&nbsp;1;<br>int&nbsp;result&nbsp;=&nbsp;numberStream.reduce(identity,&nbsp;(x,&nbsp;y)&nbsp;-&gt;&nbsp;x&nbsp;*&nbsp;y);<br>System.out.println(result);&nbsp;&nbsp;//&nbsp;24</code></pre>
     </div>
     <p class="paragraph">De fapt, aici se execută următorul lanț de operații: identity op n1 op n2 op n3 op n4...</p>
     <p class="paragraph">În exemplele anterioare, tipul obiectelor returnate coincide cu tipul elementelor care intră în flux. Totuși, acest lucru nu este întotdeauna convenabil. Este posibil să dorim să returnăm un rezultat al cărui tip diferă de tipul obiectelor din flux. De exemplu, să presupunem că avem următoarea clasă Phone, care reprezintă un telefon:</p>
     <div class="code-inline">
      <pre><code>class&nbsp;Phone&nbsp;{<br><br>&nbsp;&nbsp;&nbsp;private&nbsp;String&nbsp;name;<br>&nbsp;&nbsp;&nbsp;private&nbsp;int&nbsp;price;<br><br>&nbsp;&nbsp;&nbsp;public&nbsp;Phone(String&nbsp;name,&nbsp;int&nbsp;price){<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this.name&nbsp;=&nbsp;name;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this.price&nbsp;=&nbsp;price;<br>&nbsp;&nbsp;&nbsp;}<br><br>&nbsp;&nbsp;&nbsp;public&nbsp;String&nbsp;getName()&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;name;<br>&nbsp;&nbsp;&nbsp;}<br><br>&nbsp;&nbsp;&nbsp;public&nbsp;int&nbsp;getPrice()&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;price;<br>&nbsp;&nbsp;&nbsp;}<br>}</code></pre>
     </div>
     <p class="paragraph">Și dorim să găsim suma prețurilor telefoanelor al căror preț este mai mic decât o anumită valoare. Pentru aceasta folosim a treia versiune a metodei reduce:</p>
     <div class="code-inline">
      <pre><code>Stream&lt;Phone&gt;&nbsp;phoneStream&nbsp;=&nbsp;Stream.of(new&nbsp;Phone("iPhone&nbsp;6&nbsp;S",&nbsp;54000),<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;new&nbsp;Phone("Lumia&nbsp;950",&nbsp;45000),<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;new&nbsp;Phone("Samsung&nbsp;Galaxy&nbsp;S&nbsp;6",&nbsp;40000),<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;new&nbsp;Phone("LG&nbsp;G&nbsp;4",&nbsp;32000));<br><br>int&nbsp;sum&nbsp;=&nbsp;phoneStream.reduce(0,<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(x,&nbsp;y)&nbsp;-&gt;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if(y.getPrice()&nbsp;&lt;&nbsp;50000)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;x&nbsp;+&nbsp;y.getPrice();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;x&nbsp;+&nbsp;0;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;},<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(x,&nbsp;y)&nbsp;-&gt;&nbsp;x&nbsp;+&nbsp;y);<br><br>System.out.println(sum);&nbsp;//&nbsp;117000</code></pre>
     </div>
     <p class="paragraph">Și aici, primul parametru este valoarea implicită - 0. Al doilea parametru efectuează o operație binară, care primește valoarea intermediară - prețul total al telefonului curent și al celui anterior. Al treilea parametru reprezintă o operație binară care însumează toate calculele intermediare.</p>
    </div>
   </main>
   <aside class="ad-section">
    <div class="ad-box">
     <p>Google Ad Here</p>
    </div>
    <div class="ad-box">
     <p>Promo: SQL Beginner Guide</p>
    </div>
   </aside>
  </div>
  <div class="lesson-navigation">
   <th:block th:if="${previousLesson != null}">
    <a th:href="@{'/lectii/' +
            ${#strings.toLowerCase(#strings.replace(previousLesson.chapter.topic.name, ' ', '-'))} + '/' +
            ${#strings.toLowerCase(#strings.replace(previousLesson.chapter.title, ' ', '-'))} + '/' +
            ${#strings.toLowerCase(#strings.replace(previousLesson.title, ' ', '-'))} }" class="nav-button">← Lecția anterioară</a>
   </th:block> <th:block th:if="${nextLesson != null}">
    <a th:href="@{'/lectii/' +
            ${#strings.toLowerCase(#strings.replace(nextLesson.chapter.topic.name, ' ', '-'))} + '/' +
            ${#strings.toLowerCase(#strings.replace(nextLesson.chapter.title, ' ', '-'))} + '/' +
            ${#strings.toLowerCase(#strings.replace(nextLesson.title, ' ', '-'))} }" class="nav-button">Lecția următoare →</a>
   </th:block>
  </div>
  <div th:replace="~{fragments/footer :: footer}"></div>
  <script th:src="@{/js/script.js}" defer></script>
 </body>
</html>
