<!doctype html>
<html lang="ro" xmlns:th="http://www.w3.org/1999/xhtml">
 <head>
    <link rel="icon" type="image/png" href="/nume-aplicatie/images/favicon.png">
    <script async src="https://www.googletagmanager.com/gtag/js?id=G-7Q2536ZKL2"></script>
    <script>
      window.dataLayer = window.dataLayer || [];
      window.gtag = function () { dataLayer.push(arguments); };
      gtag('consent', 'default', {
        'wait_for_update': 500,
        'region': ['RO'],
        'ad_storage': 'denied',
        'analytics_storage': 'denied',
        'ad_user_data': 'denied',
        'ad_personalization': 'denied'
      });
      gtag('js', new Date());
      gtag('config', 'G-7Q2536ZKL2');
    </script>


  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title th:text="${lesson.title}">Lesson</title>
  <link rel="stylesheet" th:href="@{/css/styles.css}">
  <style>body { background: #ffffff; }</style>
 </head>
 <body th:with="activeTopic='Java', activeChapter='10.Stream API', activeLesson='11.Grupare'">
  <button class="mobile-sidebar-toggle" onclick="toggleMobileSidebar()">☰</button>
  <div th:replace="~{fragments/nav :: nav}"></div>
  <div class="top-nav">
   <th:block th:each="topic : ${topics}">
    <a th:href="@{'/lectii/topic/' + ${topic.id}}" th:text="${topic.name}" th:classappend="${topic.id} == ${activeTopicId} ? 'active' : ''"> </a>
   </th:block>
  </div>
  <div class="layout">
   <div class="mobile-sidebar" id="mobileSidebar">
    <button class="close-btn" onclick="toggleSidebar()">✖</button>
    <ul class="chapter-list">
     <th:block th:each="chapter : ${chapters}">
      <li class="chapter-item" th:classappend="${chapter.id} == ${activeChapterId} ? 'open' : ''">
       <div class="chapter-title" onclick="toggleChapter(this)">
        <strong th:text="${chapter.title}"></strong> <span class="arrow">▼</span>
       </div>
       <ul class="lesson-list">
        <th:block th:each="lesson : ${chapter.lessons}">
         <li><a th:href="@{'/lessons/' +
    ${#strings.toLowerCase(#strings.replace(chapter.topic.name, ' ', '-'))} + '/' +
    ${#strings.toLowerCase(#strings.replace(chapter.title, ' ', '-'))} + '/' +
    ${#strings.toLowerCase(#strings.replace(lesson.title, ' ', '-'))} }" th:text="${lesson.title}" th:classappend="${lesson.id} == ${activeLessonId} ? 'active' : ''"> </a></li>
        </th:block>
       </ul></li>
     </th:block>
    </ul>
   </div>
   <aside class="sidebar">
    <ul class="sidebar-list">
     <th:block th:each="chapter : ${chapters}">
      <li class="chapter-item" th:classappend="${chapter.id} == ${activeChapterId} ? 'open' : ''">
       <div class="chapter-toggle" onclick="toggleLessons(this)">
        <span th:text="${chapter.title}">Chapter</span>
       </div>
       <ul class="lesson-list hidden">
        <th:block th:each="lesson : ${chapter.lessons}">
         <li><a th:href="@{'/lessons/' +
    ${#strings.toLowerCase(#strings.replace(chapter.topic.name, ' ', '-'))} + '/' +
    ${#strings.toLowerCase(#strings.replace(chapter.title, ' ', '-'))} + '/' +
    ${#strings.toLowerCase(#strings.replace(lesson.title, ' ', '-'))} }" th:text="${lesson.title}" th:classappend="${lesson.id} == ${activeLessonId} ? 'active' : ''"> </a></li>
        </th:block>
       </ul></li>
     </th:block>
    </ul>
   </aside>
   <main class="content">
    <div class="document-container">
     <h1 class="main-title">Grupare</h1>
     <p class="paragraph">Pentru a grupa datele în funcție de un anumit criteriu, trebuie să folosim împreună metoda collect() a obiectului Stream și metoda Collectors.groupingBy(). Să presupunem că avem următoarea clasă:</p>
     <div class="code-inline">
      <pre><code>class&nbsp;Phone&nbsp;{<br>&nbsp;&nbsp;&nbsp;private&nbsp;String&nbsp;name;<br>&nbsp;&nbsp;&nbsp;private&nbsp;String&nbsp;company;<br>&nbsp;&nbsp;&nbsp;private&nbsp;int&nbsp;price;<br><br>&nbsp;&nbsp;&nbsp;public&nbsp;Phone(String&nbsp;name,&nbsp;String&nbsp;comp,&nbsp;int&nbsp;price)&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this.name&nbsp;=&nbsp;name;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this.company&nbsp;=&nbsp;comp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this.price&nbsp;=&nbsp;price;<br>&nbsp;&nbsp;&nbsp;}<br><br>&nbsp;&nbsp;&nbsp;public&nbsp;String&nbsp;getName()&nbsp;{&nbsp;return&nbsp;name;&nbsp;}<br>&nbsp;&nbsp;&nbsp;public&nbsp;int&nbsp;getPrice()&nbsp;{&nbsp;return&nbsp;price;&nbsp;}<br>&nbsp;&nbsp;&nbsp;public&nbsp;String&nbsp;getCompany()&nbsp;{&nbsp;return&nbsp;company;&nbsp;}<br>}</code></pre>
     </div>
     <p class="paragraph">Să presupunem că avem un set de obiecte Phone pe care dorim să le grupăm după companie:</p>
     <div class="code-inline">
      <pre><code>import&nbsp;java.util.List;<br>import&nbsp;java.util.Map;<br>import&nbsp;java.util.stream.Stream;<br>import&nbsp;java.util.stream.Collectors;<br><br>public&nbsp;class&nbsp;Program&nbsp;{<br>&nbsp;&nbsp;&nbsp;public&nbsp;static&nbsp;void&nbsp;main(String[]&nbsp;args)&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Stream&lt;Phone&gt;&nbsp;phoneStream&nbsp;=&nbsp;Stream.of(<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;new&nbsp;Phone("iPhone&nbsp;X",&nbsp;"Apple",&nbsp;600),<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;new&nbsp;Phone("Pixel&nbsp;2",&nbsp;"Google",&nbsp;500),<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;new&nbsp;Phone("iPhone&nbsp;8",&nbsp;"Apple",&nbsp;450),<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;new&nbsp;Phone("Galaxy&nbsp;S9",&nbsp;"Samsung",&nbsp;440),<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;new&nbsp;Phone("Galaxy&nbsp;S8",&nbsp;"Samsung",&nbsp;340)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;);<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Map&lt;String,&nbsp;List&lt;Phone&gt;&gt;&nbsp;phonesByCompany&nbsp;=&nbsp;phoneStream.collect(<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Collectors.groupingBy(Phone::getCompany));<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for&nbsp;(Map.Entry&lt;String,&nbsp;List&lt;Phone&gt;&gt;&nbsp;item&nbsp;:&nbsp;phonesByCompany.entrySet())&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(item.getKey());<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for&nbsp;(Phone&nbsp;phone&nbsp;:&nbsp;item.getValue())&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(phone.getName());<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.out.println();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;}<br>}</code></pre>
     </div>
     <p class="paragraph">Output în consolă:</p>
     <div class="code-inline">
      <pre><code>Google<br>Pixel&nbsp;2<br><br>Apple<br>iPhone&nbsp;X<br>iPhone&nbsp;8<br><br>Samsung<br>Galaxy&nbsp;S9<br>Galaxy&nbsp;S8</code></pre>
     </div>
     <p class="paragraph">Așadar, pentru a crea grupuri, în metoda phoneStream.collect() transmitem apelul funcției Collectors.groupingBy(), care grupează obiectele după companie folosind expresia Phone::getCompany. Rezultatul este un obiect Map în care cheile sunt denumirile companiilor, iar valorile sunt liste de telefoane asociate fiecărei companii.</p>
     <h2 class="subtitle">Metoda Collectors.partitioningBy</h2>
     <p class="paragraph">Metoda Collectors.partitioningBy() funcționează similar, dar împarte elementele în grupuri în funcție de o condiție. De exemplu:</p>
     <div class="code-inline">
      <pre><code>Map&lt;Boolean,&nbsp;List&lt;Phone&gt;&gt;&nbsp;phonesByCompany&nbsp;=&nbsp;phoneStream.collect(<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Collectors.partitioningBy(p&nbsp;-&gt;&nbsp;p.getCompany()&nbsp;==&nbsp;"Apple"));<br><br>for&nbsp;(Map.Entry&lt;Boolean,&nbsp;List&lt;Phone&gt;&gt;&nbsp;item&nbsp;:&nbsp;phonesByCompany.entrySet())&nbsp;{<br>&nbsp;&nbsp;&nbsp;System.out.println(item.getKey());<br>&nbsp;&nbsp;&nbsp;for&nbsp;(Phone&nbsp;phone&nbsp;:&nbsp;item.getValue())&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(phone.getName());<br>&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;System.out.println();<br>}</code></pre>
     </div>
     <p class="paragraph">În acest caz, condiția p -&gt; p.getCompany() == "Apple" verifică dacă telefonul aparține companiei Apple. Dacă aparține, telefonul este plasat într-un grup, altfel este plasat în altul.</p>
     <h2 class="subtitle">Metoda Collectors.counting</h2>
     <p class="paragraph">Metoda Collectors.counting este folosită împreună cu Collectors.groupingBy() pentru a calcula numărul de elemente din fiecare grup:</p>
     <div class="code-inline">
      <pre><code>Map&lt;String,&nbsp;Long&gt;&nbsp;phonesByCompany&nbsp;=&nbsp;phoneStream.collect(<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Collectors.groupingBy(Phone::getCompany,&nbsp;Collectors.counting()));<br><br>for&nbsp;(Map.Entry&lt;String,&nbsp;Long&gt;&nbsp;item&nbsp;:&nbsp;phonesByCompany.entrySet())&nbsp;{<br>&nbsp;&nbsp;&nbsp;System.out.println(item.getKey()&nbsp;+&nbsp;"&nbsp;-&nbsp;"&nbsp;+&nbsp;item.getValue());<br>}</code></pre>
     </div>
     <p class="paragraph">Output în consolă:</p>
     <div class="code-inline">
      <pre><code>Google&nbsp;-&nbsp;1<br>Apple&nbsp;-&nbsp;2<br>Samsung&nbsp;-&nbsp;2</code></pre>
     </div>
     <h2 class="subtitle">Metoda Collectors.summing</h2>
     <p class="paragraph">Metoda Collectors.summing este utilizată pentru a calcula suma elementelor. În funcție de tipul de date, are următoarele forme: summingInt(), summingLong(), summingDouble(). Aplicăm această metodă pentru a calcula prețul total al smartphone-urilor pe companii:</p>
     <div class="code-inline">
      <pre><code>Map&lt;String,&nbsp;Integer&gt;&nbsp;phonesByCompany&nbsp;=&nbsp;phoneStream.collect(<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Collectors.groupingBy(Phone::getCompany,&nbsp;Collectors.summingInt(Phone::getPrice)));<br><br>for&nbsp;(Map.Entry&lt;String,&nbsp;Integer&gt;&nbsp;item&nbsp;:&nbsp;phonesByCompany.entrySet())&nbsp;{<br>&nbsp;&nbsp;&nbsp;System.out.println(item.getKey()&nbsp;+&nbsp;"&nbsp;-&nbsp;"&nbsp;+&nbsp;item.getValue());<br>}</code></pre>
     </div>
     <p class="paragraph">Output în consolă:</p>
     <div class="code-inline">
      <pre><code>Google&nbsp;-&nbsp;500<br>Apple&nbsp;-&nbsp;1050<br>Samsung&nbsp;-&nbsp;780</code></pre>
     </div>
     <p class="paragraph">Prin expresia Collectors.summingInt(Phone::getPrice) indicăm că pentru fiecare companie va fi calculată suma totală a prețurilor tuturor smartphone-urilor sale. Și deoarece rezultatul calculat este o sumă pentru valori de tip int, tipul colecției returnate va fi Map&lt;String, Integer&gt;.</p>
     <h2 class="subtitle">Metodele maxBy și minBy</h2>
     <p class="paragraph">Metodele maxBy și minBy sunt folosite pentru a calcula valoarea maximă sau minimă din fiecare grup. Aceste metode acceptă ca parametru o funcție comparator. De exemplu, găsim telefonul cu prețul minim pentru fiecare companie:</p>
     <div class="code-inline">
      <pre><code>import&nbsp;java.util.Comparator;<br>import&nbsp;java.util.Optional;<br>import&nbsp;java.util.Map;<br><br>Map&lt;String,&nbsp;Optional&lt;Phone&gt;&gt;&nbsp;phonesByCompany&nbsp;=&nbsp;phoneStream.collect(<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Collectors.groupingBy(Phone::getCompany,<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Collectors.minBy(Comparator.comparing(Phone::getPrice))));<br><br>for&nbsp;(Map.Entry&lt;String,&nbsp;Optional&lt;Phone&gt;&gt;&nbsp;item&nbsp;:&nbsp;phonesByCompany.entrySet())&nbsp;{<br>&nbsp;&nbsp;&nbsp;System.out.println(item.getKey()&nbsp;+&nbsp;"&nbsp;-&nbsp;"&nbsp;+&nbsp;item.getValue().get().getName());<br>}</code></pre>
     </div>
     <p class="paragraph">Output în consolă:</p>
     <div class="code-inline">
      <pre><code>Google&nbsp;-&nbsp;Pixel&nbsp;2<br>Apple&nbsp;-&nbsp;iPhone&nbsp;8<br>Samsung&nbsp;-&nbsp;Galaxy&nbsp;S8</code></pre>
     </div>
     <p class="paragraph">Ca valoare returnată a operațiunii de grupare este utilizat un obiect de tip Map&lt;String, Optional&lt;Phone&gt;&gt;. Deoarece grupăm după companii, cheia va fi un șir de caractere, iar valoarea va fi un obiect Optional&lt;Phone&gt;.</p>
     <h2 class="subtitle">Metoda summarizing</h2>
     <p class="paragraph">Metodele summarizingInt(), summarizingLong(), summarizingDouble() permit colectarea datelor într-un set de valori de tipul corespunzător:</p>
     <div class="code-inline">
      <pre><code>import&nbsp;java.util.IntSummaryStatistics;<br>import&nbsp;java.util.Map;<br><br>Map&lt;String,&nbsp;IntSummaryStatistics&gt;&nbsp;priceSummary&nbsp;=&nbsp;phoneStream.collect(<br>&nbsp;&nbsp;&nbsp;Collectors.groupingBy(Phone::getCompany,<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Collectors.summarizingInt(Phone::getPrice)));<br><br>for&nbsp;(Map.Entry&lt;String,&nbsp;IntSummaryStatistics&gt;&nbsp;item&nbsp;:&nbsp;priceSummary.entrySet())&nbsp;{<br>&nbsp;&nbsp;&nbsp;System.out.println(item.getKey()&nbsp;+&nbsp;"&nbsp;-&nbsp;"&nbsp;+&nbsp;item.getValue().getAverage());<br>}</code></pre>
     </div>
     <p class="paragraph">Metoda Collectors.summarizingInt(Phone::getPrice()) creează un set de prețuri pentru fiecare companie. Rezultatul este încorporat într-un obiect IntSummaryStatistics, care are diverse metode pentru a efectua operații atomice asupra setului de date:</p>
     <ul class="enumeration">
      <li>getAverage(): returnează valoarea medie</li>
      <li>getCount(): returnează numărul de elemente din set</li>
      <li>getMax(): returnează valoarea maximă</li>
      <li>getMin(): returnează valoarea minimă</li>
      <li>getSum(): returnează suma elementelor</li>
     </ul>
     <p class="paragraph">Output în consolă:</p>
     <div class="code-inline">
      <pre><code>Google&nbsp;-&nbsp;500.0<br>Apple&nbsp;-&nbsp;525.0<br>Samsung&nbsp;-&nbsp;390.0</code></pre>
     </div>
     <h2 class="subtitle">Metoda mapping</h2>
     <p class="paragraph">Metoda mapping permite procesarea suplimentară a datelor și transformarea obiectelor din flux într-un alt tip de date. De exemplu:</p>
     <div class="code-inline">
      <pre><code>Map&lt;String,&nbsp;List&lt;String&gt;&gt;&nbsp;phonesByCompany&nbsp;=&nbsp;phoneStream.collect(<br>&nbsp;&nbsp;&nbsp;Collectors.groupingBy(Phone::getCompany,<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Collectors.mapping(Phone::getName,&nbsp;Collectors.toList())));<br><br>for&nbsp;(Map.Entry&lt;String,&nbsp;List&lt;String&gt;&gt;&nbsp;item&nbsp;:&nbsp;phonesByCompany.entrySet())&nbsp;{<br>&nbsp;&nbsp;&nbsp;System.out.println(item.getKey());<br>&nbsp;&nbsp;&nbsp;for&nbsp;(String&nbsp;name&nbsp;:&nbsp;item.getValue())&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(name);<br>&nbsp;&nbsp;&nbsp;}<br>}</code></pre>
     </div>
     <p class="paragraph">Expresia Collectors.mapping(Phone::getName, Collectors.toList()) specifică faptul că în grup vor fi extrase doar numele smartphone-urilor, iar fiecare grup va fi reprezentat ca un obiect List.</p>
    </div>
   </main>
   <aside class="ad-section">
    <div class="ad-box">
     <p>Google Ad Here</p>
    </div>
    <div class="ad-box">
     <p>Promo: SQL Beginner Guide</p>
    </div>
   </aside>
  </div>
  <div class="lesson-navigation">
   <th:block th:if="${previousLesson != null}">
    <a th:href="@{'/lessons/' +
            ${#strings.toLowerCase(#strings.replace(previousLesson.chapter.topic.name, ' ', '-'))} + '/' +
            ${#strings.toLowerCase(#strings.replace(previousLesson.chapter.title, ' ', '-'))} + '/' +
            ${#strings.toLowerCase(#strings.replace(previousLesson.title, ' ', '-'))} }" class="nav-button">← Lecția anterioară</a>
   </th:block> <th:block th:if="${nextLesson != null}">
    <a th:href="@{'/lessons/' +
            ${#strings.toLowerCase(#strings.replace(nextLesson.chapter.topic.name, ' ', '-'))} + '/' +
            ${#strings.toLowerCase(#strings.replace(nextLesson.chapter.title, ' ', '-'))} + '/' +
            ${#strings.toLowerCase(#strings.replace(nextLesson.title, ' ', '-'))} }" class="nav-button">Lecția următoare →</a>
   </th:block>
  </div>
  <div th:replace="~{fragments/footer :: footer}"></div>
  <script th:src="@{/js/script.js}" defer></script>
 </body>
</html>
