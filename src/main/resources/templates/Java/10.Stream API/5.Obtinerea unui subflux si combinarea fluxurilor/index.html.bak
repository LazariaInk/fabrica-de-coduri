<!doctype html>
<html lang="ro" xmlns:th="http://www.w3.org/1999/xhtml">
 <head>
    <link rel="icon" type="image/png" href="/nume-aplicatie/images/favicon.png">
    <script async src="https://www.googletagmanager.com/gtag/js?id=G-7Q2536ZKL2"></script>
    <script>
      window.dataLayer = window.dataLayer || [];
      window.gtag = function () { dataLayer.push(arguments); };
      gtag('consent', 'default', {
        'wait_for_update': 500,
        'region': ['RO'],
        'ad_storage': 'denied',
        'analytics_storage': 'denied',
        'ad_user_data': 'denied',
        'ad_personalization': 'denied'
      });
      gtag('js', new Date());
      gtag('config', 'G-7Q2536ZKL2');
    </script>


  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title th:text="${lesson.title}">Lesson</title>
  <link rel="stylesheet" th:href="@{/css/styles.css}">
  <style>body { background: #ffffff; }</style>
 </head>
 <body th:with="activeTopic='Java', activeChapter='10.Stream API', activeLesson='5.Obtinerea unui subflux si combinarea fluxurilor'">
  <button class="mobile-sidebar-toggle" onclick="toggleMobileSidebar()">☰</button>
  <div th:replace="~{fragments/nav :: nav}"></div>
  <div class="top-nav">
   <th:block th:each="topic : ${topics}">
    <a th:href="@{'/lectii/topic/' + ${topic.id}}" th:text="${topic.name}" th:classappend="${topic.id} == ${activeTopicId} ? 'active' : ''"> </a>
   </th:block>
  </div>
  <div class="layout">
   <div class="mobile-sidebar" id="mobileSidebar">
    <button class="close-btn" onclick="toggleSidebar()">✖</button>
    <ul class="chapter-list">
     <th:block th:each="chapter : ${chapters}">
      <li class="chapter-item" th:classappend="${chapter.id} == ${activeChapterId} ? 'open' : ''">
       <div class="chapter-title" onclick="toggleChapter(this)">
        <strong th:text="${chapter.title}"></strong> <span class="arrow">▼</span>
       </div>
       <ul class="lesson-list">
        <th:block th:each="lesson : ${chapter.lessons}">
         <li><a th:href="@{'/lessons/' +
    ${#strings.toLowerCase(#strings.replace(chapter.topic.name, ' ', '-'))} + '/' +
    ${#strings.toLowerCase(#strings.replace(chapter.title, ' ', '-'))} + '/' +
    ${#strings.toLowerCase(#strings.replace(lesson.title, ' ', '-'))} }" th:text="${lesson.title}" th:classappend="${lesson.id} == ${activeLessonId} ? 'active' : ''"> </a></li>
        </th:block>
       </ul></li>
     </th:block>
    </ul>
   </div>
   <aside class="sidebar">
    <ul class="sidebar-list">
     <th:block th:each="chapter : ${chapters}">
      <li class="chapter-item" th:classappend="${chapter.id} == ${activeChapterId} ? 'open' : ''">
       <div class="chapter-toggle" onclick="toggleLessons(this)">
        <span th:text="${chapter.title}">Chapter</span>
       </div>
       <ul class="lesson-list hidden">
        <th:block th:each="lesson : ${chapter.lessons}">
         <li><a th:href="@{'/lessons/' +
    ${#strings.toLowerCase(#strings.replace(chapter.topic.name, ' ', '-'))} + '/' +
    ${#strings.toLowerCase(#strings.replace(chapter.title, ' ', '-'))} + '/' +
    ${#strings.toLowerCase(#strings.replace(lesson.title, ' ', '-'))} }" th:text="${lesson.title}" th:classappend="${lesson.id} == ${activeLessonId} ? 'active' : ''"> </a></li>
        </th:block>
       </ul></li>
     </th:block>
    </ul>
   </aside>
   <main class="content">
    <div class="document-container">
     <h1 class="main-title">Obținerea unui subflux și combinarea fluxurilor</h1>
     <p class="paragraph">O serie de metode din Stream API returnează subfluxuri sau fluxuri combinate pe baza fluxurilor existente. Să analizăm aceste metode.</p>
     <h2 class="subtitle">Metoda takeWhile()</h2>
     <p class="paragraph">Metoda takeWhile() selectează din flux elementele care corespund unei condiții. Dacă întâlnește un element care nu respectă condiția, metoda își încheie execuția. Elementele selectate sunt returnate sub formă de flux.</p>
     <div class="code-inline">
      <pre><code>import&nbsp;java.util.stream.Stream;<br><br>public&nbsp;class&nbsp;Program&nbsp;{<br><br>&nbsp;&nbsp;&nbsp;public&nbsp;static&nbsp;void&nbsp;main(String[]&nbsp;args)&nbsp;{<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Stream&lt;Integer&gt;&nbsp;numbers&nbsp;=&nbsp;Stream.of(-3,&nbsp;-2,&nbsp;-1,&nbsp;0,&nbsp;1,&nbsp;2,&nbsp;3,&nbsp;-4,&nbsp;-5);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;numbers.takeWhile(n&nbsp;-&gt;&nbsp;n&nbsp;&lt;&nbsp;0)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;.forEach(n&nbsp;-&gt;&nbsp;System.out.println(n));<br>&nbsp;&nbsp;&nbsp;}<br>}</code></pre>
     </div>
     <p class="paragraph">În acest exemplu, programul selectează din flux numerele mai mici decât zero. Rezultatul afișat pe consolă va fi:</p>
     <div class="code-inline">
      <pre><code>-3&nbsp;<br>-2&nbsp;<br>-1</code></pre>
     </div>
     <p class="paragraph">Chiar dacă în flux mai sunt numere negative, metoda se oprește când întâlnește primul număr care nu îndeplinește condiția. Aceasta este diferența principală față de metoda filter().</p>
     <p class="paragraph">Pentru a acoperi toate elementele mai mici decât zero, fluxul ar trebui sortat în prealabil:</p>
     <div class="code-inline">
      <pre><code>Stream&lt;Integer&gt;&nbsp;numbers&nbsp;=&nbsp;Stream.of(-3,&nbsp;-2,&nbsp;-1,&nbsp;0,&nbsp;1,&nbsp;2,&nbsp;3,&nbsp;-4,&nbsp;-5);<br>numbers.sorted().takeWhile(n&nbsp;-&gt;&nbsp;n&nbsp;&lt;&nbsp;0)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;.forEach(n&nbsp;-&gt;&nbsp;System.out.println(n));</code></pre>
     </div>
     <p class="paragraph">Rezultatul afișat pe consolă va fi:</p>
     <div class="code-inline">
      <pre><code>-5&nbsp;<br>-4&nbsp;<br>-3&nbsp;<br>-2&nbsp;<br>-1</code></pre>
     </div>
     <h2 class="subtitle">Metoda dropWhile()</h2>
     <p class="paragraph">Metoda dropWhile() realizează o sarcină opusă - omite elementele din flux care îndeplinesc condiția, până întâlnește un element care nu îndeplinește condiția:</p>
     <div class="code-inline">
      <pre><code>Stream&lt;Integer&gt;&nbsp;numbers&nbsp;=&nbsp;Stream.of(-3,&nbsp;-2,&nbsp;-1,&nbsp;0,&nbsp;1,&nbsp;2,&nbsp;3,&nbsp;-4,&nbsp;-5);<br>numbers.sorted().dropWhile(n&nbsp;-&gt;&nbsp;n&nbsp;&lt;&nbsp;0)<br>&nbsp;&nbsp;&nbsp;.forEach(n&nbsp;-&gt;&nbsp;System.out.println(n));</code></pre>
     </div>
     <p class="paragraph">Rezultatul afișat pe consolă va fi:</p>
     <div class="code-inline">
      <pre><code>0&nbsp;<br>1&nbsp;<br>2&nbsp;<br>3</code></pre>
     </div>
     <h2 class="subtitle">Metoda statică concat()</h2>
     <p class="paragraph">Metoda statică concat() unește elementele din două fluxuri și returnează fluxul combinat:</p>
     <div class="code-inline">
      <pre><code>import&nbsp;java.util.stream.Stream;<br><br>public&nbsp;class&nbsp;Program&nbsp;{<br><br>&nbsp;&nbsp;&nbsp;public&nbsp;static&nbsp;void&nbsp;main(String[]&nbsp;args)&nbsp;{<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Stream&lt;String&gt;&nbsp;people1&nbsp;=&nbsp;Stream.of("Tom",&nbsp;"Bob",&nbsp;"Sam");<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Stream&lt;String&gt;&nbsp;people2&nbsp;=&nbsp;Stream.of("Alice",&nbsp;"Kate",&nbsp;"Sam");<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Stream.concat(people1,&nbsp;people2).forEach(n&nbsp;-&gt;&nbsp;System.out.println(n));<br>&nbsp;&nbsp;&nbsp;}<br>}</code></pre>
     </div>
     <p class="paragraph">Rezultatul afișat pe consolă va fi:</p>
     <div class="code-inline">
      <pre><code>Tom&nbsp;&nbsp;<br>Bob&nbsp;&nbsp;<br>Sam&nbsp;&nbsp;<br>Alice&nbsp;&nbsp;<br>Kate&nbsp;&nbsp;<br>Sam</code></pre>
     </div>
     <h2 class="subtitle">Metoda distinct()</h2>
     <p class="paragraph">Metoda distinct() returnează doar elementele unice sub formă de flux:</p>
     <div class="code-inline">
      <pre><code>Stream&lt;String&gt;&nbsp;people&nbsp;=&nbsp;Stream.of("Tom",&nbsp;"Bob",&nbsp;"Sam",&nbsp;"Tom",&nbsp;"Alice",&nbsp;"Kate",&nbsp;"Sam");<br>people.distinct().forEach(p&nbsp;-&gt;&nbsp;System.out.println(p));</code></pre>
     </div>
     <p class="paragraph">Rezultatul afișat pe consolă va fi:</p>
     <div class="code-inline">
      <pre><code>Tom&nbsp;&nbsp;<br>Bob&nbsp;&nbsp;<br>Sam&nbsp;&nbsp;<br>Alice&nbsp;&nbsp;<br>Kate</code></pre>
     </div>
    </div>
   </main>
   <aside class="ad-section">
    <div class="ad-box">
     <p>Google Ad Here</p>
    </div>
    <div class="ad-box">
     <p>Promo: SQL Beginner Guide</p>
    </div>
   </aside>
  </div>
  <div class="lesson-navigation">
   <th:block th:if="${previousLesson != null}">
    <a th:href="@{'/lessons/' +
            ${#strings.toLowerCase(#strings.replace(previousLesson.chapter.topic.name, ' ', '-'))} + '/' +
            ${#strings.toLowerCase(#strings.replace(previousLesson.chapter.title, ' ', '-'))} + '/' +
            ${#strings.toLowerCase(#strings.replace(previousLesson.title, ' ', '-'))} }" class="nav-button">← Lecția anterioară</a>
   </th:block> <th:block th:if="${nextLesson != null}">
    <a th:href="@{'/lessons/' +
            ${#strings.toLowerCase(#strings.replace(nextLesson.chapter.topic.name, ' ', '-'))} + '/' +
            ${#strings.toLowerCase(#strings.replace(nextLesson.chapter.title, ' ', '-'))} + '/' +
            ${#strings.toLowerCase(#strings.replace(nextLesson.title, ' ', '-'))} }" class="nav-button">Lecția următoare →</a>
   </th:block>
  </div>
  <div th:replace="~{fragments/footer :: footer}"></div>
  <script th:src="@{/js/script.js}" defer></script>
 </body>
</html>
