<!doctype html>
<html lang="ro" xmlns:th="http://www.w3.org/1999/xhtml">
 <head>
    <link rel="icon" type="image/png" href="/nume-aplicatie/images/favicon.png">
    <script async src="https://www.googletagmanager.com/gtag/js?id=G-7Q2536ZKL2"></script>
    <script>
      window.dataLayer = window.dataLayer || [];
      window.gtag = function () { dataLayer.push(arguments); };
      gtag('consent', 'default', {
        'wait_for_update': 500,
        'region': ['RO'],
        'ad_storage': 'denied',
        'analytics_storage': 'denied',
        'ad_user_data': 'denied',
        'ad_personalization': 'denied'
      });
      gtag('js', new Date());
      gtag('config', 'G-7Q2536ZKL2');
    </script>


  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title th:text="${lesson.title}">Lesson</title>
  <link rel="stylesheet" th:href="@{/css/styles.css}">
  <style>body { background: #ffffff; }</style>
 </head>
 <body th:with="activeTopic='Java', activeChapter='6.Fluxuri - Lucrul cu fisiere', activeLesson='7.Clasele DataOutputStream si DataInputStream'">
  <button class="mobile-sidebar-toggle" onclick="toggleMobileSidebar()">☰</button>
  <div th:replace="~{fragments/nav :: nav}"></div>
  <div class="top-nav">
   <th:block th:each="topic : ${topics}">
    <a th:href="@{'/lectii/topic/' + ${topic.id}}" th:text="${topic.name}" th:classappend="${topic.id} == ${activeTopicId} ? 'active' : ''"> </a>
   </th:block>
  </div>
  <div class="layout">
   <div class="mobile-sidebar" id="mobileSidebar">
    <button class="close-btn" onclick="toggleSidebar()">✖</button>
    <ul class="chapter-list">
     <th:block th:each="chapter : ${chapters}">
      <li class="chapter-item" th:classappend="${chapter.id} == ${activeChapterId} ? 'open' : ''">
       <div class="chapter-title" onclick="toggleChapter(this)">
        <strong th:text="${chapter.title}"></strong> <span class="arrow">▼</span>
       </div>
       <ul class="lesson-list">
        <th:block th:each="lesson : ${chapter.lessons}">
         <li><a th:href="@{'/lessons/' +
    ${#strings.toLowerCase(#strings.replace(chapter.topic.name, ' ', '-'))} + '/' +
    ${#strings.toLowerCase(#strings.replace(chapter.title, ' ', '-'))} + '/' +
    ${#strings.toLowerCase(#strings.replace(lesson.title, ' ', '-'))} }" th:text="${lesson.title}" th:classappend="${lesson.id} == ${activeLessonId} ? 'active' : ''"> </a></li>
        </th:block>
       </ul></li>
     </th:block>
    </ul>
   </div>
   <aside class="sidebar">
    <ul class="sidebar-list">
     <th:block th:each="chapter : ${chapters}">
      <li class="chapter-item" th:classappend="${chapter.id} == ${activeChapterId} ? 'open' : ''">
       <div class="chapter-toggle" onclick="toggleLessons(this)">
        <span th:text="${chapter.title}">Chapter</span>
       </div>
       <ul class="lesson-list hidden">
        <th:block th:each="lesson : ${chapter.lessons}">
         <li><a th:href="@{'/lessons/' +
    ${#strings.toLowerCase(#strings.replace(chapter.topic.name, ' ', '-'))} + '/' +
    ${#strings.toLowerCase(#strings.replace(chapter.title, ' ', '-'))} + '/' +
    ${#strings.toLowerCase(#strings.replace(lesson.title, ' ', '-'))} }" th:text="${lesson.title}" th:classappend="${lesson.id} == ${activeLessonId} ? 'active' : ''"> </a></li>
        </th:block>
       </ul></li>
     </th:block>
    </ul>
   </aside>
   <main class="content">
    <div class="document-container">
     <h1 class="main-title">Clasele DataOutputStream și DataInputStream</h1>
     <p class="paragraph">Clasele DataOutputStream și DataInputStream permit scrierea și citirea datelor de tipuri primitiv.</p>
     <h2 class="subtitle">Scrierea datelor cu DataOutputStream</h2>
     <p class="paragraph">Clasa DataOutputStream reprezintă un flux de ieșire și este destinată scrierii datelor de tipuri primitive, cum ar fi int, double, etc. Fiecare tip primitiv are metoda sa pentru scriere:</p>
     <ul class="enumeration">
      <li>writeBoolean(boolean v): scrie în flux o valoare booleană de un octet</li>
      <li>writeByte(int v): scrie un octet în flux, reprezentat ca valoare întreagă</li>
      <li>writeChar(int v): scrie o valoare char de 2 octeți</li>
      <li>writeDouble(double v): scrie o valoare double de 8 octeți</li>
      <li>writeFloat(float v): scrie o valoare float de 4 octeți</li>
      <li>writeInt(int v): scrie o valoare întreagă int</li>
      <li>writeLong(long v): scrie o valoare long</li>
      <li>writeShort(int v): scrie o valoare short</li>
      <li>writeUTF(String str): scrie un șir de caractere în codare UTF-8</li>
     </ul>
     <h2 class="subtitle">Citirea datelor cu DataInputStream</h2>
     <p class="paragraph">Clasa DataInputStream funcționează invers - citește din flux date de tipuri primitive. Pentru fiecare tip primitiv există o metodă corespunzătoare de citire:</p>
     <ul class="enumeration">
      <li>boolean readBoolean(): citește o valoare booleană de un octet</li>
      <li>byte readByte(): citește un octet</li>
      <li>char readChar(): citește o valoare char</li>
      <li>double readDouble(): citește o valoare double de 8 octeți</li>
      <li>float readFloat(): citește o valoare float de 4 octeți</li>
      <li>int readInt(): citește o valoare întreagă int</li>
      <li>long readLong(): citește o valoare long</li>
      <li>short readShort(): citește o valoare short</li>
      <li>String readUTF(): citește un șir de caractere în codare UTF-8</li>
      <li>int skipBytes(int n): sărind peste n octeți în flux</li>
     </ul>
     <h2 class="subtitle">Exemplu de utilizare a claselor DataOutputStream și DataInputStream</h2>
     <p class="paragraph">Să analizăm un exemplu:</p>
     <div class="code-inline">
      <pre><code>import&nbsp;java.io.*;<br><br>public&nbsp;class&nbsp;Program&nbsp;{<br><br>&nbsp;&nbsp;&nbsp;public&nbsp;static&nbsp;void&nbsp;main(String[]&nbsp;args)&nbsp;{<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Person&nbsp;tom&nbsp;=&nbsp;new&nbsp;Person("Tom",&nbsp;34,&nbsp;1.68,&nbsp;false);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;scrierea&nbsp;în&nbsp;fișier<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;try&nbsp;(DataOutputStream&nbsp;dos&nbsp;=&nbsp;new&nbsp;DataOutputStream(new&nbsp;FileOutputStream("data.bin")))&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;scriem&nbsp;valorile<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dos.writeUTF(tom.name);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dos.writeInt(tom.age);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dos.writeDouble(tom.height);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dos.writeBoolean(tom.married);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.out.println("Fișierul&nbsp;a&nbsp;fost&nbsp;scris");<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;catch&nbsp;(IOException&nbsp;ex)&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(ex.getMessage());<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;citirea&nbsp;inversă&nbsp;din&nbsp;fișier<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;try&nbsp;(DataInputStream&nbsp;dis&nbsp;=&nbsp;new&nbsp;DataInputStream(new&nbsp;FileInputStream("data.bin")))&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;citim&nbsp;valorile<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;String&nbsp;name&nbsp;=&nbsp;dis.readUTF();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;int&nbsp;age&nbsp;=&nbsp;dis.readInt();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;double&nbsp;height&nbsp;=&nbsp;dis.readDouble();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;boolean&nbsp;married&nbsp;=&nbsp;dis.readBoolean();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.out.printf("Name:&nbsp;%s&nbsp;&nbsp;Age:&nbsp;%d&nbsp;&nbsp;Height:&nbsp;%f&nbsp;&nbsp;Married:&nbsp;%b",&nbsp;name,&nbsp;age,&nbsp;height,&nbsp;married);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;catch&nbsp;(IOException&nbsp;ex)&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(ex.getMessage());<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;}<br>}<br><br>class&nbsp;Person&nbsp;{<br>&nbsp;&nbsp;&nbsp;public&nbsp;String&nbsp;name;<br>&nbsp;&nbsp;&nbsp;public&nbsp;int&nbsp;age;<br>&nbsp;&nbsp;&nbsp;public&nbsp;double&nbsp;height;<br>&nbsp;&nbsp;&nbsp;public&nbsp;boolean&nbsp;married;<br><br>&nbsp;&nbsp;&nbsp;public&nbsp;Person(String&nbsp;n,&nbsp;int&nbsp;a,&nbsp;double&nbsp;h,&nbsp;boolean&nbsp;m)&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this.name&nbsp;=&nbsp;n;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this.age&nbsp;=&nbsp;a;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this.height&nbsp;=&nbsp;h;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this.married&nbsp;=&nbsp;m;<br>&nbsp;&nbsp;&nbsp;}<br>}</code></pre>
     </div>
     <p class="paragraph">În acest exemplu, datele unui obiect Person sunt scrise secvențial într-un fișier.</p>
     <p class="paragraph">Obiectul DataOutputStream primește în constructor un flux de ieșire: DataOutputStream(OutputStream out). În acest caz, fluxul de ieșire este un obiect FileOutputStream, deci ieșirea se face într-un fișier. Cu ajutorul metodelor prezentate mai sus, cum ar fi writeUTF(), valorile sunt scrise într-un fișier binar.</p>
     <p class="paragraph">După aceea, citirea datelor are loc folosind DataInputStream, care primește un flux de intrare: DataInputStream(InputStream in), iar în acest caz, fluxul de intrare este FileInputStream.</p>
     <p class="paragraph">Acest exemplu ilustrează cum putem scrie și citi date de tipuri primitive utilizând clasele DataOutputStream și DataInputStream.</p>
    </div>
   </main>
   <aside class="ad-section">
    <div class="ad-box">
     <p>Google Ad Here</p>
    </div>
    <div class="ad-box">
     <p>Promo: SQL Beginner Guide</p>
    </div>
   </aside>
  </div>
  <div class="lesson-navigation">
   <th:block th:if="${previousLesson != null}">
    <a th:href="@{'/lessons/' +
            ${#strings.toLowerCase(#strings.replace(previousLesson.chapter.topic.name, ' ', '-'))} + '/' +
            ${#strings.toLowerCase(#strings.replace(previousLesson.chapter.title, ' ', '-'))} + '/' +
            ${#strings.toLowerCase(#strings.replace(previousLesson.title, ' ', '-'))} }" class="nav-button">← Lecția anterioară</a>
   </th:block> <th:block th:if="${nextLesson != null}">
    <a th:href="@{'/lessons/' +
            ${#strings.toLowerCase(#strings.replace(nextLesson.chapter.topic.name, ' ', '-'))} + '/' +
            ${#strings.toLowerCase(#strings.replace(nextLesson.chapter.title, ' ', '-'))} + '/' +
            ${#strings.toLowerCase(#strings.replace(nextLesson.title, ' ', '-'))} }" class="nav-button">Lecția următoare →</a>
   </th:block>
  </div>
  <div th:replace="~{fragments/footer :: footer}"></div>
  <script th:src="@{/js/script.js}" defer></script>
 </body>
</html>
