<!doctype html>
<html lang="ro" xmlns:th="http://www.w3.org/1999/xhtml">
 <head>
    <script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-4253419731329045"
            crossorigin="anonymous"></script>


  <link rel="canonical" th:href="${canonicalUrl}" />

    <link rel="icon" type="image/png" href="/nume-aplicatie/images/favicon.png">
    <script async src="https://www.googletagmanager.com/gtag/js?id=G-7Q2536ZKL2"></script>
    <script>
      window.dataLayer = window.dataLayer || [];
      window.gtag = function () { dataLayer.push(arguments); };
      gtag('consent', 'default', {
        'wait_for_update': 500,
        'region': ['RO'],
        'ad_storage': 'denied',
        'analytics_storage': 'denied',
        'ad_user_data': 'denied',
        'ad_personalization': 'denied'
      });
      gtag('js', new Date());
      gtag('config', 'G-7Q2536ZKL2');
    </script>


  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title th:text="${lesson.title}">Lesson</title>
  <link rel="stylesheet" th:href="@{/css/styles.css}">
  <style>body { background: #ffffff; }</style>
 </head>
 <body th:with="activeTopic='Java', activeChapter='6.Fluxuri - Lucrul cu fisiere', activeLesson='1.Fluxuri de intrare-iesire'">
  <button class="mobile-sidebar-toggle" onclick="toggleMobileSidebar()">☰</button>
  <div th:replace="~{fragments/nav :: nav}"></div>
  <div class="top-nav">
   <th:block th:each="topic : ${topics}">
    <a th:href="@{'/lectii/topic/' + ${topic.id}}" th:text="${topic.name}" th:classappend="${topic.id} == ${activeTopicId} ? 'active' : ''"> </a>
   </th:block>
  </div>
  <div class="layout">
   <div class="mobile-sidebar" id="mobileSidebar">
    <button class="close-btn" onclick="toggleSidebar()">✖</button>
    <ul class="chapter-list">
     <th:block th:each="chapter : ${chapters}">
      <li class="chapter-item" th:classappend="${chapter.id} == ${activeChapterId} ? 'open' : ''">
       <div class="chapter-title" onclick="toggleChapter(this)">
        <strong th:text="${chapter.title}"></strong> <span class="arrow">▼</span>
       </div>
       <ul class="lesson-list">
        <th:block th:each="lesson : ${chapter.lessons}">
         <li><a th:href="@{'/lectii/' +
    ${#strings.toLowerCase(#strings.replace(chapter.topic.name, ' ', '-'))} + '/' +
    ${#strings.toLowerCase(#strings.replace(chapter.title, ' ', '-'))} + '/' +
    ${#strings.toLowerCase(#strings.replace(lesson.title, ' ', '-'))} }" th:text="${lesson.title}" th:classappend="${lesson.id} == ${activeLessonId} ? 'active' : ''"> </a></li>
        </th:block>
       </ul></li>
     </th:block>
    </ul>
   </div>
   <aside class="sidebar">
    <ul class="sidebar-list">
     <th:block th:each="chapter : ${chapters}">
      <li class="chapter-item" th:classappend="${chapter.id} == ${activeChapterId} ? 'open' : ''">
       <div class="chapter-toggle" onclick="toggleLessons(this)">
        <span th:text="${chapter.title}">Chapter</span>
       </div>
       <ul class="lesson-list hidden">
        <th:block th:each="lesson : ${chapter.lessons}">
         <li><a th:href="@{'/lectii/' +
    ${#strings.toLowerCase(#strings.replace(chapter.topic.name, ' ', '-'))} + '/' +
    ${#strings.toLowerCase(#strings.replace(chapter.title, ' ', '-'))} + '/' +
    ${#strings.toLowerCase(#strings.replace(lesson.title, ' ', '-'))} }" th:text="${lesson.title}" th:classappend="${lesson.id} == ${activeLessonId} ? 'active' : ''"> </a></li>
        </th:block>
       </ul></li>
     </th:block>
    </ul>
   </aside>
   <main class="content">
    <div class="document-container">
     <h1 class="main-title">Fluxuri de intrare-ieșire</h1>
     <p class="paragraph">O trăsătură distinctivă a multor limbaje de programare este lucrul cu fișiere și fluxuri. În Java, funcționalitatea de bază pentru lucrul cu fluxuri este concentrată în clasele din pachetul java.io.</p>
     <p class="paragraph">Conceptul cheie aici este conceptul de flux. Deși conceptul de "flux" în programare este destul de suprasolicitat și poate desemna multe concepte diferite. În acest caz, aplicabil lucrului cu fișiere și intrare-ieșire, vom vorbi despre flux (stream) ca o abstracție care este utilizată pentru citirea sau scrierea informațiilor (fișiere, socket-uri, textul din consolă etc.).</p>
     <p class="paragraph">Fluxul este legat de un dispozitiv fizic real prin sistemul de intrare-ieșire Java. Putem avea definit un flux care este legat de un fișier și prin intermediul căruia putem citi sau scrie în fișier. De asemenea, poate fi un flux legat de un socket de rețea, prin intermediul căruia putem primi sau trimite date în rețea.</p>
     <p class="paragraph">Toate aceste sarcini: citirea și scrierea diferitelor fișiere, schimbul de informații prin rețea, intrarea-ieșirea în consolă, le vom rezolva în Java cu ajutorul fluxurilor.</p>
     <p class="paragraph">Un obiect din care se pot citi date se numește flux de intrare, iar un obiect în care se pot scrie date - flux de ieșire. De exemplu, dacă trebuie citit conținutul unui fișier, se utilizează fluxul de intrare, iar dacă trebuie scris într-un fișier - fluxul de ieșire.</p>
     <p class="paragraph">La baza tuturor claselor care gestionează fluxuri de octeți se află două clase abstracte: InputStream (reprezentând fluxuri de intrare) și OutputStream (reprezentând fluxuri de ieșire).</p>
     <p class="paragraph">Dar, deoarece lucrul cu octeți nu este foarte comod, pentru lucrul cu fluxurile de caractere au fost adăugate clase abstracte Reader (pentru citirea fluxurilor de caractere) și Writer (pentru scrierea fluxurilor de caractere).</p>
     <p class="paragraph">Toate celelalte clase care lucrează cu fluxuri sunt moștenite din aceste clase abstracte. Clasele principale ale fluxurilor:</p>
     <div class="image-container">
      <img th:src="@{/images/Java/6.Fluxuri%20-%20Lucrul%20cu%20fisiere/1.Fluxuri%20de%20intrare-iesire/images/image1.png}" alt="" class="responsive-image">
     </div>
     <h2 class="subtitle">Fluxuri de octeți</h2>
     <p class="paragraph">Clasa InputStream este baza pentru toate clasele care gestionează fluxurile de octeți de intrare. Să analizăm metodele sale principale:</p>
     <h2 class="subtitle">Metodele principale a clasei InputStream</h2>
     <ul class="enumeration">
      <li>int available(): returnează numărul de octeți disponibili pentru citire în flux</li>
      <li>void close(): închide fluxul</li>
      <li>int read(): returnează o reprezentare întreagă a următorului octet din flux. Când în flux nu mai sunt octeți disponibili pentru citire, această metodă va returna numărul -1</li>
      <li>int read(byte[] buffer): citește octeți din flux în tabloul buffer. După citire, returnează numărul de octeți citiți. Dacă nu a fost citit niciun octet, se returnează numărul -1</li>
      <li>int read(byte[] buffer, int offset, int length): citește un anumit număr de octeți, egal cu length, din flux în tabloul buffer. Octeții citiți sunt plasați în tablou începând de la offset, adică de la elementul buffer[offset]. Metoda returnează numărul de octeți citiți cu succes</li>
      <li>long skip(long number): sare peste un număr de octeți egal cu number la citirea din flux</li>
     </ul>
     <h2 class="subtitle">Clasa OutputStream</h2>
     <p class="paragraph">Clasa OutputStream este clasa de bază pentru toate clasele care lucrează cu fluxuri binare de ieșire. Funcționalitatea sa este realizată prin următoarele metode:</p>
     <ul class="enumeration">
      <li>void close(): închide fluxul</li>
      <li>void flush(): golește tamponul de ieșire, scriind tot conținutul acestuia</li>
      <li>void write(int b): scrie în fluxul de ieșire un octet, care este reprezentat prin parametrul întreg b</li>
      <li>void write(byte[] buffer): scrie în fluxul de ieșire tabloul de octeți buffer</li>
      <li>void write(byte[] buffer, int offset, int length): scrie în fluxul de ieșire un număr de octeți egal cu length din tabloul buffer, începând de la offset, adică de la elementul buffer[offset]</li>
     </ul>
     <h2 class="subtitle">Clasele abstracte Reader și Writer</h2>
     <p class="paragraph">Clasa abstractă Reader oferă funcționalitate pentru citirea informațiilor textuale. Să analizăm metodele sale principale:</p>
     <ul class="enumeration">
      <li>abstract void close(): închide fluxul de intrare</li>
      <li>int read(): returnează o reprezentare întreagă a următorului caracter din flux. Dacă nu există astfel de caractere și s-a ajuns la sfârșitul fișierului, se returnează numărul -1</li>
      <li>int read(char[] buffer): citește în tabloul buffer caractere din flux, al căror număr este egal cu lungimea tabloului buffer. Returnează numărul de caractere citite cu succes. La atingerea sfârșitului fișierului, returnează -1</li>
      <li>int read(CharBuffer buffer): citește caractere din flux în obiectul CharBuffer. Returnează numărul de caractere citite cu succes. La atingerea sfârșitului fișierului, returnează -1</li>
      <li>abstract int read(char[] buffer, int offset, int count): citește în tabloul buffer, începând de la offset, caractere din flux, al căror număr este egal cu count</li>
      <li>long skip(long count): sare peste un număr de caractere egal cu count. Returnează numărul de caractere sărite cu succes</li>
     </ul>
     <p class="paragraph">Clasa Writer definește funcționalitatea pentru toate fluxurile de caractere de ieșire. Metodele sale principale:</p>
     <ul class="enumeration">
      <li>Writer append(char c): adaugă la sfârșitul fluxului de ieșire caracterul c. Returnează obiectul Writer</li>
      <li>Writer append(CharSequence chars): adaugă la sfârșitul fluxului de ieșire un set de caractere chars. Returnează obiectul Writer</li>
      <li>abstract void close(): închide fluxul</li>
      <li>abstract void flush(): golește tampoanele fluxului</li>
      <li>void write(int c): scrie în flux un caracter care are o reprezentare întreagă</li>
      <li>void write(char[] buffer): scrie în flux tabloul de caractere</li>
      <li>abstract void write(char[] buffer, int off, int len): scrie în flux doar câteva caractere din tabloul buffer. Numărul de caractere este egal cu len, iar selecția caracterelor din tablou începe de la indexul off</li>
      <li>void write(String str): scrie în flux un șir de caractere</li>
      <li>void write(String str, int off, int len): scrie în flux un anumit număr de caractere dintr-un șir, egal cu len, iar selecția caracterelor din șir începe de la indexul off</li>
     </ul>
     <p class="paragraph">Funcționalitatea descrisă de clasele Reader și Writer este moștenită direct de clasele fluxurilor de caractere, în special de clasele FileReader și FileWriter, destinate lucrului cu fișiere text.</p>
     <p class="paragraph">Acum să analizăm clasele specifice ale fluxurilor.</p>
    </div>
   </main>
   <aside class="ad-section">
    <div class="ad-box">
     <p>Google Ad Here</p>
    </div>
    <div class="ad-box">
     <p>Promo: SQL Beginner Guide</p>
    </div>
   </aside>
  </div>
  <div class="lesson-navigation">
   <th:block th:if="${previousLesson != null}">
    <a th:href="@{'/lectii/' +
            ${#strings.toLowerCase(#strings.replace(previousLesson.chapter.topic.name, ' ', '-'))} + '/' +
            ${#strings.toLowerCase(#strings.replace(previousLesson.chapter.title, ' ', '-'))} + '/' +
            ${#strings.toLowerCase(#strings.replace(previousLesson.title, ' ', '-'))} }" class="nav-button">← Lecția anterioară</a>
   </th:block> <th:block th:if="${nextLesson != null}">
    <a th:href="@{'/lectii/' +
            ${#strings.toLowerCase(#strings.replace(nextLesson.chapter.topic.name, ' ', '-'))} + '/' +
            ${#strings.toLowerCase(#strings.replace(nextLesson.chapter.title, ' ', '-'))} + '/' +
            ${#strings.toLowerCase(#strings.replace(nextLesson.title, ' ', '-'))} }" class="nav-button">Lecția următoare →</a>
   </th:block>
  </div>
  <div th:replace="~{fragments/footer :: footer}"></div>
  <script th:src="@{/js/script.js}" defer></script>
 </body>
</html>
