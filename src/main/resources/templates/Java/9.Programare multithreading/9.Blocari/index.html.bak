<!doctype html>
<html lang="ro" xmlns:th="http://www.w3.org/1999/xhtml">
 <head>
    <script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-4253419731329045"
            crossorigin="anonymous"></script>


  <link rel="canonical" th:href="${canonicalUrl}" />

    <link rel="icon" type="image/png" href="/nume-aplicatie/images/favicon.png">
    <script async src="https://www.googletagmanager.com/gtag/js?id=G-7Q2536ZKL2"></script>
    <script>
      window.dataLayer = window.dataLayer || [];
      window.gtag = function () { dataLayer.push(arguments); };
      gtag('consent', 'default', {
        'wait_for_update': 500,
        'region': ['RO'],
        'ad_storage': 'denied',
        'analytics_storage': 'denied',
        'ad_user_data': 'denied',
        'ad_personalization': 'denied'
      });
      gtag('js', new Date());
      gtag('config', 'G-7Q2536ZKL2');
    </script>


  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title th:text="${lesson.title}">Lesson</title>
  <link rel="stylesheet" th:href="@{/css/styles.css}">
  <style>body { background: #ffffff; }</style>
 </head>
 <body th:with="activeTopic='Java', activeChapter='9.Programare multithreading', activeLesson='9.Blocari'">
  <button class="mobile-sidebar-toggle" onclick="toggleMobileSidebar()">☰</button>
  <div th:replace="~{fragments/nav :: nav}"></div>
  <div class="top-nav">
   <th:block th:each="topic : ${topics}">
    <a th:href="@{'/lectii/topic/' + ${topic.id}}" th:text="${topic.name}" th:classappend="${topic.id} == ${activeTopicId} ? 'active' : ''"> </a>
   </th:block>
  </div>
  <div class="layout">
   <div class="mobile-sidebar" id="mobileSidebar">
    <button class="close-btn" onclick="toggleSidebar()">✖</button>
    <ul class="chapter-list">
     <th:block th:each="chapter : ${chapters}">
      <li class="chapter-item" th:classappend="${chapter.id} == ${activeChapterId} ? 'open' : ''">
       <div class="chapter-title" onclick="toggleChapter(this)">
        <strong th:text="${chapter.title}"></strong> <span class="arrow">▼</span>
       </div>
       <ul class="lesson-list">
        <th:block th:each="lesson : ${chapter.lessons}">
         <li><a th:href="@{'/lectii/' +
    ${#strings.toLowerCase(#strings.replace(chapter.topic.name, ' ', '-'))} + '/' +
    ${#strings.toLowerCase(#strings.replace(chapter.title, ' ', '-'))} + '/' +
    ${#strings.toLowerCase(#strings.replace(lesson.title, ' ', '-'))} }" th:text="${lesson.title}" th:classappend="${lesson.id} == ${activeLessonId} ? 'active' : ''"> </a></li>
        </th:block>
       </ul></li>
     </th:block>
    </ul>
   </div>
   <aside class="sidebar">
    <ul class="sidebar-list">
     <th:block th:each="chapter : ${chapters}">
      <li class="chapter-item" th:classappend="${chapter.id} == ${activeChapterId} ? 'open' : ''">
       <div class="chapter-toggle" onclick="toggleLessons(this)">
        <span th:text="${chapter.title}">Chapter</span>
       </div>
       <ul class="lesson-list hidden">
        <th:block th:each="lesson : ${chapter.lessons}">
         <li><a th:href="@{'/lectii/' +
    ${#strings.toLowerCase(#strings.replace(chapter.topic.name, ' ', '-'))} + '/' +
    ${#strings.toLowerCase(#strings.replace(chapter.title, ' ', '-'))} + '/' +
    ${#strings.toLowerCase(#strings.replace(lesson.title, ' ', '-'))} }" th:text="${lesson.title}" th:classappend="${lesson.id} == ${activeLessonId} ? 'active' : ''"> </a></li>
        </th:block>
       </ul></li>
     </th:block>
    </ul>
   </aside>
   <main class="content">
    <div class="document-container">
     <h1 class="main-title">Blocări - ReentrantLock</h1>
     <p class="paragraph">Pentru gestionarea accesului la o resursă comună, ca alternativă la operatorul synchronized, putem folosi blocările. Funcționalitatea blocărilor este inclusă în pachetul java.util.concurrent.locks.</p>
     <p class="paragraph">La început, firul de execuție încearcă să acceseze resursa comună. Dacă aceasta este liberă, se aplică o blocare. După finalizarea lucrului, blocarea este eliberată de pe resursă. Dacă resursa nu este liberă și deja are o blocare aplicată, firul de execuție așteaptă până când blocarea este eliberată.</p>
     <p class="paragraph">Clasele de blocări implementează interfața Lock, care definește următoarele metode:</p>
     <ul class="enumeration">
      <li>void lock(): așteaptă până când se obține blocarea</li>
      <li>void lockInterruptibly() throws InterruptedException: așteaptă până când se obține blocarea, dacă firul de execuție nu este întrerupt</li>
      <li>boolean tryLock(): încearcă să obțină blocarea; dacă se obține, returnează true. Dacă nu, returnează false. Spre deosebire de metoda lock(), nu așteaptă obținerea blocării, dacă aceasta nu este disponibilă</li>
      <li>void unlock(): eliberează blocarea</li>
      <li>Condition newCondition(): returnează un obiect Condition, care este asociat cu blocarea curentă</li>
     </ul>
     <p class="paragraph">Organizarea unei blocări, în general, este destul de simplă: pentru a obține blocarea se apelează metoda lock(), iar după ce lucrul cu resursele comune este încheiat, se apelează metoda unlock(), care eliberează blocarea.</p>
     <p class="paragraph">Obiectul Condition permite gestionarea blocării.</p>
     <p class="paragraph">De obicei, pentru lucrul cu blocări, se folosește clasa ReentrantLock din pachetul java.util.concurrent.locks. Această clasă implementează interfața Lock.</p>
     <p class="paragraph">Pentru exemplu, vom lua codul din tema despre operatorul synchronized și vom rescrie acest cod folosind blocarea ReentrantLock:</p>
     <div class="code-inline">
      <pre><code>import&nbsp;java.util.concurrent.locks.ReentrantLock;<br><br>public&nbsp;class&nbsp;Program&nbsp;{<br>&nbsp;<br>&nbsp;&nbsp;&nbsp;public&nbsp;static&nbsp;void&nbsp;main(String[]&nbsp;args)&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;CommonResource&nbsp;commonResource&nbsp;=&nbsp;new&nbsp;CommonResource();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ReentrantLock&nbsp;locker&nbsp;=&nbsp;new&nbsp;ReentrantLock();&nbsp;//&nbsp;creăm&nbsp;blocarea<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for&nbsp;(int&nbsp;i&nbsp;=&nbsp;1;&nbsp;i&nbsp;&lt;&nbsp;6;&nbsp;i++)&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Thread&nbsp;t&nbsp;=&nbsp;new&nbsp;Thread(new&nbsp;CountThread(commonResource,&nbsp;locker));<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;t.setName("Thread&nbsp;"&nbsp;+&nbsp;i);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;t.start();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;}<br>}<br>&nbsp;<br>class&nbsp;CommonResource&nbsp;{<br>&nbsp;&nbsp;&nbsp;int&nbsp;x&nbsp;=&nbsp;0;<br>}<br>&nbsp;<br>class&nbsp;CountThread&nbsp;implements&nbsp;Runnable&nbsp;{<br>&nbsp;<br>&nbsp;&nbsp;&nbsp;CommonResource&nbsp;res;<br>&nbsp;&nbsp;&nbsp;ReentrantLock&nbsp;locker;<br>&nbsp;&nbsp;&nbsp;CountThread(CommonResource&nbsp;res,&nbsp;ReentrantLock&nbsp;lock)&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this.res&nbsp;=&nbsp;res;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;locker&nbsp;=&nbsp;lock;<br>&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;public&nbsp;void&nbsp;run()&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;locker.lock();&nbsp;//&nbsp;aplicăm&nbsp;blocarea<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;try&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;res.x&nbsp;=&nbsp;1;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for&nbsp;(int&nbsp;i&nbsp;=&nbsp;1;&nbsp;i&nbsp;&lt;&nbsp;5;&nbsp;i++)&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.out.printf("%s&nbsp;%d&nbsp;\n",&nbsp;Thread.currentThread().getName(),&nbsp;res.x);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;res.x++;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Thread.sleep(100);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;catch&nbsp;(InterruptedException&nbsp;e)&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(e.getMessage());<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;finally&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;locker.unlock();&nbsp;//&nbsp;eliberăm&nbsp;blocarea<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;}<br>}</code></pre>
     </div>
     <p class="paragraph">Aici se folosește și resursa comună CommonResource, pentru gestionarea căreia se creează cinci fire de execuție. La intrarea în secțiunea critică se aplică blocarea:</p>
     <div class="code-inline">
      <pre><code>locker.lock();</code></pre>
     </div>
     <p class="paragraph">După aceasta, doar un fir de execuție are acces la secțiunea critică, iar celelalte fire așteaptă eliberarea blocării. În blocul finally, după ce firul de execuție și-a încheiat activitatea principală, blocarea este eliberată. Acest lucru se face neapărat în blocul finally, deoarece în cazul apariției unei erori, toate celelalte fire ar rămâne blocate.</p>
     <p class="paragraph">În final, vom obține un rezultat similar cu cel obținut în cazul folosirii operatorului synchronized:</p>
     <div class="code-inline">
      <pre><code>Thread&nbsp;4&nbsp;1&nbsp;<br>Thread&nbsp;4&nbsp;2&nbsp;<br>Thread&nbsp;4&nbsp;3&nbsp;<br>Thread&nbsp;4&nbsp;4&nbsp;<br>Thread&nbsp;3&nbsp;1&nbsp;<br>Thread&nbsp;3&nbsp;2&nbsp;<br>Thread&nbsp;3&nbsp;3&nbsp;<br>Thread&nbsp;3&nbsp;4&nbsp;<br>Thread&nbsp;2&nbsp;1&nbsp;<br>Thread&nbsp;2&nbsp;2&nbsp;<br>Thread&nbsp;2&nbsp;3&nbsp;<br>Thread&nbsp;2&nbsp;4&nbsp;<br>Thread&nbsp;1&nbsp;1&nbsp;<br>Thread&nbsp;1&nbsp;2&nbsp;<br>Thread&nbsp;1&nbsp;3&nbsp;<br>Thread&nbsp;1&nbsp;4&nbsp;<br>Thread&nbsp;5&nbsp;1&nbsp;<br>Thread&nbsp;5&nbsp;2&nbsp;<br>Thread&nbsp;5&nbsp;3&nbsp;<br>Thread&nbsp;5&nbsp;4</code></pre>
     </div>
    </div>
   </main>
   <aside class="ad-section">
    <div class="ad-box">
     <p>Google Ad Here</p>
    </div>
    <div class="ad-box">
     <p>Promo: SQL Beginner Guide</p>
    </div>
   </aside>
  </div>
  <div class="lesson-navigation">
   <th:block th:if="${previousLesson != null}">
    <a th:href="@{'/lectii/' +
            ${#strings.toLowerCase(#strings.replace(previousLesson.chapter.topic.name, ' ', '-'))} + '/' +
            ${#strings.toLowerCase(#strings.replace(previousLesson.chapter.title, ' ', '-'))} + '/' +
            ${#strings.toLowerCase(#strings.replace(previousLesson.title, ' ', '-'))} }" class="nav-button">← Lecția anterioară</a>
   </th:block> <th:block th:if="${nextLesson != null}">
    <a th:href="@{'/lectii/' +
            ${#strings.toLowerCase(#strings.replace(nextLesson.chapter.topic.name, ' ', '-'))} + '/' +
            ${#strings.toLowerCase(#strings.replace(nextLesson.chapter.title, ' ', '-'))} + '/' +
            ${#strings.toLowerCase(#strings.replace(nextLesson.title, ' ', '-'))} }" class="nav-button">Lecția următoare →</a>
   </th:block>
  </div>
  <div th:replace="~{fragments/footer :: footer}"></div>
  <script th:src="@{/js/script.js}" defer></script>
 </body>
</html>
