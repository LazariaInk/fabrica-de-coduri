<!doctype html>
<html lang="ro" xmlns:th="http://www.w3.org/1999/xhtml">
 <head>
    <script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-4253419731329045"
            crossorigin="anonymous"></script>


  <link rel="canonical" th:href="${canonicalUrl}" />

    <link rel="icon" type="image/png" href="/nume-aplicatie/images/favicon.png">
    <script async src="https://www.googletagmanager.com/gtag/js?id=G-7Q2536ZKL2"></script>
    <script>
      window.dataLayer = window.dataLayer || [];
      window.gtag = function () { dataLayer.push(arguments); };
      gtag('consent', 'default', {
        'wait_for_update': 500,
        'region': ['RO'],
        'ad_storage': 'denied',
        'analytics_storage': 'denied',
        'ad_user_data': 'denied',
        'ad_personalization': 'denied'
      });
      gtag('js', new Date());
      gtag('config', 'G-7Q2536ZKL2');
    </script>


  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title th:text="${lesson.title}">Lesson</title>
  <link rel="stylesheet" th:href="@{/css/styles.css}">
  <style>body { background: #ffffff; }</style>
 </head>
 <body th:with="activeTopic='Java', activeChapter='2.Bazele programarii in Java', activeLesson='3.Tipuri de date'">
  <button class="mobile-sidebar-toggle" onclick="toggleMobileSidebar()">☰</button>
  <div th:replace="~{fragments/nav :: nav}"></div>
  <div class="top-nav">
   <th:block th:each="topic : ${topics}">
    <a th:href="@{'/lectii/topic/' + ${topic.id}}" th:text="${topic.name}" th:classappend="${topic.id} == ${activeTopicId} ? 'active' : ''"> </a>
   </th:block>
  </div>
  <div class="layout">
   <div class="mobile-sidebar" id="mobileSidebar">
    <button class="close-btn" onclick="toggleSidebar()">✖</button>
    <ul class="chapter-list">
     <th:block th:each="chapter : ${chapters}">
      <li class="chapter-item" th:classappend="${chapter.id} == ${activeChapterId} ? 'open' : ''">
       <div class="chapter-title" onclick="toggleChapter(this)">
        <strong th:text="${chapter.title}"></strong> <span class="arrow">▼</span>
       </div>
       <ul class="lesson-list">
        <th:block th:each="lesson : ${chapter.lessons}">
         <li><a th:href="@{'/lectii/' +
    ${#strings.toLowerCase(#strings.replace(chapter.topic.name, ' ', '-'))} + '/' +
    ${#strings.toLowerCase(#strings.replace(chapter.title, ' ', '-'))} + '/' +
    ${#strings.toLowerCase(#strings.replace(lesson.title, ' ', '-'))} }" th:text="${lesson.title}" th:classappend="${lesson.id} == ${activeLessonId} ? 'active' : ''"> </a></li>
        </th:block>
       </ul></li>
     </th:block>
    </ul>
   </div>
   <aside class="sidebar">
    <ul class="sidebar-list">
     <th:block th:each="chapter : ${chapters}">
      <li class="chapter-item" th:classappend="${chapter.id} == ${activeChapterId} ? 'open' : ''">
       <div class="chapter-toggle" onclick="toggleLessons(this)">
        <span th:text="${chapter.title}">Chapter</span>
       </div>
       <ul class="lesson-list hidden">
        <th:block th:each="lesson : ${chapter.lessons}">
         <li><a th:href="@{'/lectii/' +
    ${#strings.toLowerCase(#strings.replace(chapter.topic.name, ' ', '-'))} + '/' +
    ${#strings.toLowerCase(#strings.replace(chapter.title, ' ', '-'))} + '/' +
    ${#strings.toLowerCase(#strings.replace(lesson.title, ' ', '-'))} }" th:text="${lesson.title}" th:classappend="${lesson.id} == ${activeLessonId} ? 'active' : ''"> </a></li>
        </th:block>
       </ul></li>
     </th:block>
    </ul>
   </aside>
   <main class="content">
    <div class="document-container">
     <h1 class="main-title">Tipuri de date</h1>
     <p class="paragraph">Una dintre principalele caracteristici ale Java este faptul că este un limbaj puternic tipizat. Aceasta înseamnă că fiecare variabilă și constantă reprezintă un anumit tip de date, iar acest tip este strict definit. Tipul de date determină intervalul valorilor pe care le poate stoca variabila sau constanta.</p>
     <p class="paragraph">Să analizăm sistemul de tipuri de date de bază încorporate, utilizat pentru crearea variabilelor în Java. Acesta include următoarele tipuri:</p>
     <ul class="enumeration">
      <li>boolean: stochează valoarea true sau false</li>
     </ul>
     <div class="code-inline">
      <pre><code>boolean&nbsp;isActive&nbsp;=&nbsp;false;<br>boolean&nbsp;isAlive&nbsp;=&nbsp;true;</code></pre>
     </div>
     <ul class="enumeration">
      <li>byte: stochează un număr întreg de la -128 la 127 și ocupă 1 byte</li>
     </ul>
     <div class="code-inline">
      <pre><code>byte&nbsp;a&nbsp;=&nbsp;3;<br>byte&nbsp;b&nbsp;=&nbsp;8;</code></pre>
     </div>
     <ul class="enumeration">
      <li>short: stochează un număr întreg de la -32768 la 32767 și ocupă 2 bytes</li>
     </ul>
     <div class="code-inline">
      <pre><code>short&nbsp;a&nbsp;=&nbsp;3;<br>short&nbsp;b&nbsp;=&nbsp;8;</code></pre>
     </div>
     <ul class="enumeration">
      <li>int: stochează un număr întreg de la -2147483648 la 2147483647 și ocupă 4 bytes</li>
     </ul>
     <div class="code-inline">
      <pre><code>int&nbsp;a&nbsp;=&nbsp;4;<br>int&nbsp;b&nbsp;=&nbsp;9;</code></pre>
     </div>
     <ul class="enumeration">
      <li>long: stochează un număr întreg de la –9 223 372 036 854 775 808 la 9 223 372 036 854 775 807 și ocupă 8 bytes</li>
     </ul>
     <div class="code-inline">
      <pre><code>long&nbsp;a&nbsp;=&nbsp;5;<br>long&nbsp;b&nbsp;=&nbsp;10;</code></pre>
     </div>
     <ul class="enumeration">
      <li>double: stochează un număr în virgulă mobilă de la ±4.9*10^-324 la ±1.7976931348623157*10^308 și ocupă 8 bytes</li>
     </ul>
     <div class="code-inline">
      <pre><code>double&nbsp;x&nbsp;=&nbsp;8.5;<br>double&nbsp;y&nbsp;=&nbsp;2.7;</code></pre>
     </div>
     <p class="paragraph">Ca separator între partea întreagă și partea fracționară a unui număr zecimal se folosește punctul.</p>
     <ul class="enumeration">
      <li>float: stochează un număr în virgulă mobilă de la -3.4*10^38 la 3.4*10^38 și ocupă 4 bytes</li>
     </ul>
     <div class="code-inline">
      <pre><code>float&nbsp;x&nbsp;=&nbsp;8.5F;<br>float&nbsp;y&nbsp;=&nbsp;2.7F;</code></pre>
     </div>
     <ul class="enumeration">
      <li>char: stochează un singur caracter în codarea UTF-16 și ocupă 2 bytes, astfel încât intervalul valorilor stocate este de la 0 la 65535</li>
     </ul>
     <p class="paragraph">O variabilă poate primi doar valori care corespund tipului său. Dacă o variabilă reprezintă un tip întreg, nu poate stoca valori în virgulă mobilă.</p>
     <h2 class="subtitle">Numere întregi</h2>
     <p class="paragraph">Toate literalurile întregi, cum ar fi numerele 10, 4, -5, sunt considerate valori de tip int în Java. Totuși, putem atribui literaluri întregi și altor tipuri de date întregi precum byte, long, short. În acest caz, Java efectuează automat conversiile necesare:</p>
     <div class="code-inline">
      <pre><code>byte&nbsp;a&nbsp;=&nbsp;1;<br>short&nbsp;b&nbsp;=&nbsp;2;<br>long&nbsp;c&nbsp;=&nbsp;2121;</code></pre>
     </div>
     <p class="paragraph">Dacă dorim să atribuim un număr foarte mare unei variabile de tip long, care depășește valorile permise pentru int, vom primi o eroare de compilare:</p>
     <div class="code-inline">
      <pre><code>long&nbsp;num&nbsp;=&nbsp;2147483649;</code></pre>
     </div>
     <p class="paragraph">În acest caz, numărul 2147483649 este valabil pentru long, dar depășește limitele valorilor pentru int. Deoarece toate valorile întregi sunt considerate implicit de tip int, compilatorul va semnala o eroare. Pentru a rezolva problema, trebuie să adăugăm sufixul l sau L la număr, indicând că este de tip long:</p>
     <div class="code-inline">
      <pre><code>long&nbsp;num&nbsp;=&nbsp;2147483649L;</code></pre>
     </div>
     <p class="paragraph">De obicei, valorile pentru variabilele întregi sunt date în sistemul zecimal, însă putem folosi și alte sisteme de numerație. De exemplu:</p>
     <div class="code-inline">
      <pre><code>int&nbsp;num111&nbsp;=&nbsp;0x6F;&nbsp;//&nbsp;sistem&nbsp;hexazecimal,&nbsp;numărul&nbsp;111<br>int&nbsp;num8&nbsp;=&nbsp;010;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;sistem&nbsp;octal,&nbsp;numărul&nbsp;8<br>int&nbsp;num13&nbsp;=&nbsp;0b1101;&nbsp;//&nbsp;sistem&nbsp;binar,&nbsp;numărul&nbsp;13</code></pre>
     </div>
     <p class="paragraph">Pentru a specifica o valoare hexazecimală, se folosește prefixul 0x. Similar, pentru valori octale se folosește prefixul 0, iar pentru valori binare prefixul 0b.</p>
     <p class="paragraph">Numerele întregi permit, de asemenea, separarea cifrelor cu ajutorul caracterului de subliniere:</p>
     <div class="code-inline">
      <pre><code>int&nbsp;x&nbsp;=&nbsp;123_456;<br>int&nbsp;y&nbsp;=&nbsp;234_567__789;<br>System.out.println(x);&nbsp;&nbsp;//&nbsp;123456<br>System.out.println(y);&nbsp;&nbsp;//&nbsp;234567789</code></pre>
     </div>
     <h2 class="subtitle">Numere în virgulă mobilă</h2>
     <p class="paragraph">Când atribuim un literal în virgulă mobilă unei variabile de tip float, cum ar fi 3.1, 4.5 etc., Java consideră acest literal ca fiind de tip double. Pentru a indica faptul că valoarea trebuie tratată ca float, trebuie să folosim sufixul f:</p>
     <div class="code-inline">
      <pre><code>float&nbsp;fl&nbsp;=&nbsp;30.6f;<br>double&nbsp;db&nbsp;=&nbsp;30.6;</code></pre>
     </div>
     <p class="paragraph">Deși în acest caz ambele variabile au aproape aceeași valoare, ele vor fi tratate diferit și vor ocupa dimensiuni diferite în memorie.</p>
     <h2 class="subtitle">Caractere și șiruri de caractere</h2>
     <p class="paragraph">O variabilă de tip char primește un singur caracter, încadrat între apostrofuri: char ch='e';. De asemenea, o variabilă de tip char poate primi o valoare întreagă între 0 și 65535. În acest caz, variabila va stoca un caracter, iar valoarea întreagă va indica poziția acestuia în tabelul de caractere Unicode (UTF-16). De exemplu:</p>
     <div class="code-inline">
      <pre><code>char&nbsp;ch&nbsp;=&nbsp;102;&nbsp;//&nbsp;caracterul&nbsp;'f'<br>System.out.println(ch);</code></pre>
     </div>
     <p class="paragraph">O altă formă de a specifica o valoare pentru o variabilă de tip char este folosirea formatului hexazecimal. De exemplu, char ch='\u0066'; va stoca tot caracterul 'f'.</p>
     <p class="paragraph">Variabilele de tip char nu trebuie confundate cu variabilele de tip String. 'a' nu este identic cu "a". Variabilele de tip String reprezintă obiecte, spre deosebire de char sau int, care sunt tipuri primitive în Java:</p>
     <div class="code-inline">
      <pre><code>String&nbsp;hello&nbsp;=&nbsp;"Hello...";<br>System.out.println(hello);</code></pre>
     </div>
     <p class="paragraph">Pe lângă caracterele propriu-zise, care pot reprezenta litere, cifre sau semne de punctuație, există și secvențe speciale de caractere numite secvențe de control. De exemplu, cea mai utilizată este \n, care face trecerea pe următoarea linie. De exemplu:</p>
     <div class="code-inline">
      <pre><code>String&nbsp;text&nbsp;=&nbsp;"Hello&nbsp;\nworld";<br>System.out.println(text);</code></pre>
     </div>
     <p class="paragraph">Rezultatul acestui cod va fi:</p>
     <div class="code-inline">
      <pre><code>Hello<br>world</code></pre>
     </div>
     <p class="paragraph">În acest caz, secvența \n semnalează necesitatea trecerii la următoarea linie.</p>
     <p class="paragraph">Începând cu versiunea 15, Java suportă blocuri de text (text blocks) - text pe mai multe linii, încadrat între triple ghilimele. Acestea sunt utile pentru scrierea ușoară a textului pe mai multe linii. De exemplu:</p>
     <div class="code-inline">
      <pre><code>String&nbsp;text&nbsp;=&nbsp;"""<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Acesta&nbsp;este&nbsp;un&nbsp;text<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pe&nbsp;mai&nbsp;multe&nbsp;linii<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fără&nbsp;a&nbsp;folosi&nbsp;concatenarea.<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;""";<br>System.out.println(text);</code></pre>
     </div>
     <p class="paragraph">Blocurile de text simplifică scrierea textului pe mai multe linii, fără a mai fi necesară concatenarea șirurilor sau utilizarea secvenței \n pentru trecerea la o linie nouă.</p>
    </div>
   </main>
   <aside class="ad-section">
    <div class="ad-box">
     <p>Google Ad Here</p>
    </div>
    <div class="ad-box">
     <p>Promo: SQL Beginner Guide</p>
    </div>
   </aside>
  </div>
  <div class="lesson-navigation">
   <th:block th:if="${previousLesson != null}">
    <a th:href="@{'/lectii/' +
            ${#strings.toLowerCase(#strings.replace(previousLesson.chapter.topic.name, ' ', '-'))} + '/' +
            ${#strings.toLowerCase(#strings.replace(previousLesson.chapter.title, ' ', '-'))} + '/' +
            ${#strings.toLowerCase(#strings.replace(previousLesson.title, ' ', '-'))} }" class="nav-button">← Lecția anterioară</a>
   </th:block> <th:block th:if="${nextLesson != null}">
    <a th:href="@{'/lectii/' +
            ${#strings.toLowerCase(#strings.replace(nextLesson.chapter.topic.name, ' ', '-'))} + '/' +
            ${#strings.toLowerCase(#strings.replace(nextLesson.chapter.title, ' ', '-'))} + '/' +
            ${#strings.toLowerCase(#strings.replace(nextLesson.title, ' ', '-'))} }" class="nav-button">Lecția următoare →</a>
   </th:block>
  </div>
  <div th:replace="~{fragments/footer :: footer}"></div>
  <script th:src="@{/js/script.js}" defer></script>
 </body>
</html>
