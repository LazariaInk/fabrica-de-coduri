<!doctype html>
<html lang="ro" xmlns:th="http://www.w3.org/1999/xhtml">
 <head>
    <script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-4253419731329045"
            crossorigin="anonymous"></script>


  <link rel="canonical" th:href="${canonicalUrl}" />

    <link rel="icon" type="image/png" href="/nume-aplicatie/images/favicon.png">
    <script async src="https://www.googletagmanager.com/gtag/js?id=G-7Q2536ZKL2"></script>
    <script>
      window.dataLayer = window.dataLayer || [];
      window.gtag = function () { dataLayer.push(arguments); };
      gtag('consent', 'default', {
        'wait_for_update': 500,
        'region': ['RO'],
        'ad_storage': 'denied',
        'analytics_storage': 'denied',
        'ad_user_data': 'denied',
        'ad_personalization': 'denied'
      });
      gtag('js', new Date());
      gtag('config', 'G-7Q2536ZKL2');
    </script>


  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title th:text="${lesson.title}">Lesson</title>
  <link rel="stylesheet" th:href="@{/css/styles.css}">
  <style>body { background: #ffffff; }</style>
 </head>
 <body th:with="activeTopic='Java', activeChapter='2.Bazele programarii in Java', activeLesson='2.Variabile si constante'">
  <button class="mobile-sidebar-toggle" onclick="toggleMobileSidebar()">☰</button>
  <div th:replace="~{fragments/nav :: nav}"></div>
  <div class="top-nav">
   <th:block th:each="topic : ${topics}">
    <a th:href="@{'/lectii/topic/' + ${topic.id}}" th:text="${topic.name}" th:classappend="${topic.id} == ${activeTopicId} ? 'active' : ''"> </a>
   </th:block>
  </div>
  <div class="layout">
   <div class="mobile-sidebar" id="mobileSidebar">
    <button class="close-btn" onclick="toggleSidebar()">✖</button>
    <ul class="chapter-list">
     <th:block th:each="chapter : ${chapters}">
      <li class="chapter-item" th:classappend="${chapter.id} == ${activeChapterId} ? 'open' : ''">
       <div class="chapter-title" onclick="toggleChapter(this)">
        <strong th:text="${chapter.title}"></strong> <span class="arrow">▼</span>
       </div>
       <ul class="lesson-list">
        <th:block th:each="lesson : ${chapter.lessons}">
         <li><a th:href="@{'/lectii/' +
    ${#strings.toLowerCase(#strings.replace(chapter.topic.name, ' ', '-'))} + '/' +
    ${#strings.toLowerCase(#strings.replace(chapter.title, ' ', '-'))} + '/' +
    ${#strings.toLowerCase(#strings.replace(lesson.title, ' ', '-'))} }" th:text="${lesson.title}" th:classappend="${lesson.id} == ${activeLessonId} ? 'active' : ''"> </a></li>
        </th:block>
       </ul></li>
     </th:block>
    </ul>
   </div>
   <aside class="sidebar">
    <ul class="sidebar-list">
     <th:block th:each="chapter : ${chapters}">
      <li class="chapter-item" th:classappend="${chapter.id} == ${activeChapterId} ? 'open' : ''">
       <div class="chapter-toggle" onclick="toggleLessons(this)">
        <span th:text="${chapter.title}">Chapter</span>
       </div>
       <ul class="lesson-list hidden">
        <th:block th:each="lesson : ${chapter.lessons}">
         <li><a th:href="@{'/lectii/' +
    ${#strings.toLowerCase(#strings.replace(chapter.topic.name, ' ', '-'))} + '/' +
    ${#strings.toLowerCase(#strings.replace(chapter.title, ' ', '-'))} + '/' +
    ${#strings.toLowerCase(#strings.replace(lesson.title, ' ', '-'))} }" th:text="${lesson.title}" th:classappend="${lesson.id} == ${activeLessonId} ? 'active' : ''"> </a></li>
        </th:block>
       </ul></li>
     </th:block>
    </ul>
   </aside>
   <main class="content">
    <div class="document-container">
     <h1 class="main-title">Variabile și constante</h1>
     <p class="paragraph">Pentru stocarea datelor într-un program se folosesc variabilele. O variabilă reprezintă o zonă de memorie denumită, care stochează o valoare de un anumit tip. Fiecare variabilă are un tip, un nume și o valoare. Tipul determină ce fel de informație poate stoca variabila sau intervalul valorilor permise.</p>
     <p class="paragraph">Variabilele se declară astfel:</p>
     <div class="code-inline">
      <pre><code>tip_date&nbsp;nume_variabilă;</code></pre>
     </div>
     <p class="paragraph">De exemplu, să definim o variabilă numită x, care va avea tipul int:</p>
     <div class="code-inline">
      <pre><code>int&nbsp;x;</code></pre>
     </div>
     <p class="paragraph">În această expresie, declarăm variabila x de tip int. Asta înseamnă că x va stoca un număr de cel mult 4 bytes.</p>
     <p class="paragraph">Ca nume al unei variabile, se poate folosi orice denumire arbitrară care respectă următoarele cerințe:</p>
     <ul class="enumeration">
      <li>Numele poate conține orice caractere alfanumerice, precum și caracterul de subliniere, dar primul caracter din nume nu trebuie să fie o cifră</li>
      <li>Numele nu trebuie să conțină semne de punctuație sau spații</li>
      <li>Numele nu poate fi un cuvânt-cheie din Java</li>
     </ul>
     <p class="paragraph">În plus, la declarare și utilizare, trebuie să ținem cont că Java este un limbaj case-sensitive, deci declarațiile int num; și int NUM; vor reprezenta două variabile diferite.</p>
     <p class="paragraph">După declararea unei variabile, îi putem atribui o valoare:</p>
     <div class="code-inline">
      <pre><code>int&nbsp;x;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;declararea&nbsp;variabilei<br>x&nbsp;=&nbsp;10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;atribuirea&nbsp;unei&nbsp;valori<br>System.out.println(x);&nbsp;&nbsp;//&nbsp;10</code></pre>
     </div>
     <p class="paragraph">De asemenea, putem atribui o valoare variabilei chiar la declararea sa. Acest proces se numește inițializare:</p>
     <div class="code-inline">
      <pre><code>int&nbsp;x&nbsp;=&nbsp;10;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;declararea&nbsp;și&nbsp;inițializarea&nbsp;variabilei<br>System.out.println(x);&nbsp;&nbsp;//&nbsp;10</code></pre>
     </div>
     <p class="paragraph">Dacă nu atribuim o valoare variabilei înainte de utilizarea sa, putem întâmpina o eroare, cum este în următorul caz:</p>
     <div class="code-inline">
      <pre><code>int&nbsp;x;<br>System.out.println(x);&nbsp;&nbsp;//&nbsp;Eroare:&nbsp;variabila&nbsp;nu&nbsp;este&nbsp;inițializată</code></pre>
     </div>
     <p class="paragraph">Putem declara mai multe variabile de același tip folosind virgula:</p>
     <div class="code-inline">
      <pre><code>int&nbsp;x,&nbsp;y;<br>x&nbsp;=&nbsp;10;<br>y&nbsp;=&nbsp;25;<br>System.out.println(x);&nbsp;&nbsp;//&nbsp;10<br>System.out.println(y);&nbsp;&nbsp;//&nbsp;25</code></pre>
     </div>
     <p class="paragraph">De asemenea, putem să le inițializăm direct:</p>
     <div class="code-inline">
      <pre><code>int&nbsp;x&nbsp;=&nbsp;8,&nbsp;y&nbsp;=&nbsp;15;<br>System.out.println(x);&nbsp;&nbsp;//&nbsp;8<br>System.out.println(y);&nbsp;&nbsp;//&nbsp;15</code></pre>
     </div>
     <p class="paragraph">O caracteristică distinctivă a variabilelor este că putem să le schimbăm valoarea pe parcursul execuției programului:</p>
     <div class="code-inline">
      <pre><code>int&nbsp;x&nbsp;=&nbsp;10;<br>System.out.println(x);&nbsp;&nbsp;//&nbsp;10<br>x&nbsp;=&nbsp;25;<br>System.out.println(x);&nbsp;&nbsp;//&nbsp;25</code></pre>
     </div>
     <h2 class="subtitle">Cuvântul-cheie var</h2>
     <p class="paragraph">Începând cu Java 10, a fost adăugat cuvântul-cheie var, care permite și el definirea variabilelor:</p>
     <div class="code-inline">
      <pre><code>var&nbsp;x&nbsp;=&nbsp;10;<br>System.out.println(x);&nbsp;&nbsp;//&nbsp;10</code></pre>
     </div>
     <p class="paragraph">Cuvântul var înlocuiește tipul de date, iar tipul variabilei este dedus din valoarea care i se atribuie. De exemplu, variabilei x i se atribuie valoarea 10, deci tipul variabilei va fi int.</p>
     <p class="paragraph">Însă, dacă variabila este declarată cu var, trebuie neapărat să o inițializăm imediat, altfel va apărea o eroare, așa cum se întâmplă în următorul caz:</p>
     <div class="code-inline">
      <pre><code>var&nbsp;x;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;!&nbsp;Eroare:&nbsp;variabila&nbsp;nu&nbsp;este&nbsp;inițializată<br>x&nbsp;=&nbsp;10;</code></pre>
     </div>
     <h2 class="subtitle">Constante</h2>
     <p class="paragraph">Pe lângă variabile, în Java putem folosi constante pentru stocarea datelor. Spre deosebire de variabile, o constantă poate primi o valoare o singură dată. O constantă se declară similar unei variabile, dar precedată de cuvântul-cheie final:</p>
     <div class="code-inline">
      <pre><code>final&nbsp;int&nbsp;LIMIT&nbsp;=&nbsp;5;<br>System.out.println(LIMIT);&nbsp;&nbsp;//&nbsp;5<br>//&nbsp;LIMIT&nbsp;=&nbsp;57;&nbsp;//&nbsp;acest&nbsp;lucru&nbsp;nu&nbsp;este&nbsp;permis,&nbsp;deoarece&nbsp;LIMIT&nbsp;este&nbsp;o&nbsp;constantă</code></pre>
     </div>
     <p class="paragraph">De regulă, numele constantelor sunt scrise cu majuscule.</p>
     <p class="paragraph">Constantele permit declararea unor variabile care nu trebuie să fie modificate. De exemplu, dacă avem o variabilă pentru stocarea valorii lui pi, o putem declara ca o constantă, deoarece valoarea sa este fixă.</p>
    </div>
   </main>
   <aside class="ad-section">
    <div class="ad-box">
     <p>Google Ad Here</p>
    </div>
    <div class="ad-box">
     <p>Promo: SQL Beginner Guide</p>
    </div>
   </aside>
  </div>
  <div class="lesson-navigation">
   <th:block th:if="${previousLesson != null}">
    <a th:href="@{'/lectii/' +
            ${#strings.toLowerCase(#strings.replace(previousLesson.chapter.topic.name, ' ', '-'))} + '/' +
            ${#strings.toLowerCase(#strings.replace(previousLesson.chapter.title, ' ', '-'))} + '/' +
            ${#strings.toLowerCase(#strings.replace(previousLesson.title, ' ', '-'))} }" class="nav-button">← Lecția anterioară</a>
   </th:block> <th:block th:if="${nextLesson != null}">
    <a th:href="@{'/lectii/' +
            ${#strings.toLowerCase(#strings.replace(nextLesson.chapter.topic.name, ' ', '-'))} + '/' +
            ${#strings.toLowerCase(#strings.replace(nextLesson.chapter.title, ' ', '-'))} + '/' +
            ${#strings.toLowerCase(#strings.replace(nextLesson.title, ' ', '-'))} }" class="nav-button">Lecția următoare →</a>
   </th:block>
  </div>
  <div th:replace="~{fragments/footer :: footer}"></div>
  <script th:src="@{/js/script.js}" defer></script>
 </body>
</html>
