<!doctype html>
<html lang="ro" xmlns:th="http://www.w3.org/1999/xhtml">
 <head>
    <script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-4253419731329045"
            crossorigin="anonymous"></script>


  <link rel="canonical" th:href="${canonicalUrl}" />

    <link rel="icon" type="image/png" href="/nume-aplicatie/images/favicon.png">
    <script async src="https://www.googletagmanager.com/gtag/js?id=G-7Q2536ZKL2"></script>
    <script>
      window.dataLayer = window.dataLayer || [];
      window.gtag = function () { dataLayer.push(arguments); };
      gtag('consent', 'default', {
        'wait_for_update': 500,
        'region': ['RO'],
        'ad_storage': 'denied',
        'analytics_storage': 'denied',
        'ad_user_data': 'denied',
        'ad_personalization': 'denied'
      });
      gtag('js', new Date());
      gtag('config', 'G-7Q2536ZKL2');
    </script>


  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title th:text="${lesson.title}">Lesson</title>
  <link rel="stylesheet" th:href="@{/css/styles.css}">
  <style>body { background: #ffffff; }</style>
 </head>
 <body th:with="activeTopic='Java', activeChapter='3.Clase. Programare orientata pe obiecte in Java', activeLesson='12.Enumeratii (enum)'">
  <button class="mobile-sidebar-toggle" onclick="toggleMobileSidebar()">☰</button>
  <div th:replace="~{fragments/nav :: nav}"></div>
  <div class="top-nav">
   <th:block th:each="topic : ${topics}">
    <a th:href="@{'/lectii/topic/' + ${topic.id}}" th:text="${topic.name}" th:classappend="${topic.id} == ${activeTopicId} ? 'active' : ''"> </a>
   </th:block>
  </div>
  <div class="layout">
   <div class="mobile-sidebar" id="mobileSidebar">
    <button class="close-btn" onclick="toggleSidebar()">✖</button>
    <ul class="chapter-list">
     <th:block th:each="chapter : ${chapters}">
      <li class="chapter-item" th:classappend="${chapter.id} == ${activeChapterId} ? 'open' : ''">
       <div class="chapter-title" onclick="toggleChapter(this)">
        <strong th:text="${chapter.title}"></strong> <span class="arrow">▼</span>
       </div>
       <ul class="lesson-list">
        <th:block th:each="lesson : ${chapter.lessons}">
         <li><a th:href="@{'/lectii/' +
    ${#strings.toLowerCase(#strings.replace(chapter.topic.name, ' ', '-'))} + '/' +
    ${#strings.toLowerCase(#strings.replace(chapter.title, ' ', '-'))} + '/' +
    ${#strings.toLowerCase(#strings.replace(lesson.title, ' ', '-'))} }" th:text="${lesson.title}" th:classappend="${lesson.id} == ${activeLessonId} ? 'active' : ''"> </a></li>
        </th:block>
       </ul></li>
     </th:block>
    </ul>
   </div>
   <aside class="sidebar">
    <ul class="sidebar-list">
     <th:block th:each="chapter : ${chapters}">
      <li class="chapter-item" th:classappend="${chapter.id} == ${activeChapterId} ? 'open' : ''">
       <div class="chapter-toggle" onclick="toggleLessons(this)">
        <span th:text="${chapter.title}">Chapter</span>
       </div>
       <ul class="lesson-list hidden">
        <th:block th:each="lesson : ${chapter.lessons}">
         <li><a th:href="@{'/lectii/' +
    ${#strings.toLowerCase(#strings.replace(chapter.topic.name, ' ', '-'))} + '/' +
    ${#strings.toLowerCase(#strings.replace(chapter.title, ' ', '-'))} + '/' +
    ${#strings.toLowerCase(#strings.replace(lesson.title, ' ', '-'))} }" th:text="${lesson.title}" th:classappend="${lesson.id} == ${activeLessonId} ? 'active' : ''"> </a></li>
        </th:block>
       </ul></li>
     </th:block>
    </ul>
   </aside>
   <main class="content">
    <div class="document-container">
     <h1 class="main-title">Enumerații (enum)</h1>
     <p class="paragraph">Pe lângă tipurile primitive și clase, în Java există un tip numit enum sau enumerare. Enumerațiile reprezintă un set de constante logic legate între ele. Enumerația este declarată cu ajutorul cuvântului cheie enum, urmat de numele enumerației. Apoi, este prezentată lista elementelor enumerației, separate prin virgulă:</p>
     <div class="code-inline">
      <pre><code>enum&nbsp;Day&nbsp;{<br>&nbsp;&nbsp;&nbsp;MONDAY,<br>&nbsp;&nbsp;&nbsp;TUESDAY,<br>&nbsp;&nbsp;&nbsp;WEDNESDAY,<br>&nbsp;&nbsp;&nbsp;THURSDAY,<br>&nbsp;&nbsp;&nbsp;FRIDAY,<br>&nbsp;&nbsp;&nbsp;SATURDAY,<br>&nbsp;&nbsp;&nbsp;SUNDAY<br>}</code></pre>
     </div>
     <p class="paragraph">Enumerațiile reprezintă de fapt un nou tip de date, astfel încât putem defini o variabilă de acest tip și o putem utiliza:</p>
     <div class="code-inline">
      <pre><code>public&nbsp;class&nbsp;Program&nbsp;{<br>&nbsp;&nbsp;&nbsp;public&nbsp;static&nbsp;void&nbsp;main(String[]&nbsp;args)&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Day&nbsp;current&nbsp;=&nbsp;Day.MONDAY;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(current);&nbsp;&nbsp;//&nbsp;MONDAY<br>&nbsp;&nbsp;&nbsp;}<br>}<br><br>enum&nbsp;Day&nbsp;{<br>&nbsp;&nbsp;&nbsp;MONDAY,<br>&nbsp;&nbsp;&nbsp;TUESDAY,<br>&nbsp;&nbsp;&nbsp;WEDNESDAY,<br>&nbsp;&nbsp;&nbsp;THURSDAY,<br>&nbsp;&nbsp;&nbsp;FRIDAY,<br>&nbsp;&nbsp;&nbsp;SATURDAY,<br>&nbsp;&nbsp;&nbsp;SUNDAY<br>}</code></pre>
     </div>
     <p class="paragraph">Enumerațiile pot fi utilizate în clase pentru a stoca date:</p>
     <div class="code-inline">
      <pre><code>public&nbsp;class&nbsp;Program&nbsp;{<br>&nbsp;&nbsp;&nbsp;public&nbsp;static&nbsp;void&nbsp;main(String[]&nbsp;args)&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Book&nbsp;b1&nbsp;=&nbsp;new&nbsp;Book("War&nbsp;and&nbsp;Peace",&nbsp;"L.&nbsp;Tolstoy",&nbsp;Type.BELLETRE);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.out.printf("Cartea&nbsp;'%s'&nbsp;are&nbsp;tipul&nbsp;%s&nbsp;\n",&nbsp;b1.name,&nbsp;b1.getType());<br>&nbsp;&nbsp;&nbsp;}<br>}<br><br>class&nbsp;Book&nbsp;{<br>&nbsp;&nbsp;&nbsp;private&nbsp;Type&nbsp;bookType;<br>&nbsp;&nbsp;&nbsp;String&nbsp;name;<br>&nbsp;&nbsp;&nbsp;String&nbsp;author;<br><br>&nbsp;&nbsp;&nbsp;Book(String&nbsp;name,&nbsp;String&nbsp;author,&nbsp;Type&nbsp;type)&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this.bookType&nbsp;=&nbsp;type;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this.name&nbsp;=&nbsp;name;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this.author&nbsp;=&nbsp;author;<br>&nbsp;&nbsp;&nbsp;}<br><br>&nbsp;&nbsp;&nbsp;String&nbsp;getType()&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;switch(bookType)&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;case&nbsp;BELLETRE:&nbsp;return&nbsp;"Belletre";<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;case&nbsp;SCIENCE:&nbsp;return&nbsp;"Science";<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;case&nbsp;SCIENCE_FICTION:&nbsp;return&nbsp;"Science&nbsp;fiction";<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;case&nbsp;PHANTASY:&nbsp;return&nbsp;"Phantasy";<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;default:&nbsp;return&nbsp;"Undefined";<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;}<br>}<br><br>enum&nbsp;Type&nbsp;{<br>&nbsp;&nbsp;&nbsp;SCIENCE,<br>&nbsp;&nbsp;&nbsp;BELLETRE,<br>&nbsp;&nbsp;&nbsp;PHANTASY,<br>&nbsp;&nbsp;&nbsp;SCIENCE_FICTION<br>}</code></pre>
     </div>
     <p class="paragraph">Enumerația este definită în afara clasei și conține patru genuri de cărți. Clasa Book include o variabilă de tipul enumerației noastre, care este inițializată în constructor la fel ca celelalte câmpuri ale clasei. Prin instrucțiunea switch..case, putem verifica ce tip de carte este stocat în bookType.</p>
     <p class="paragraph">Rezultatul programului:</p>
     <div class="code-inline">
      <pre><code>Cartea&nbsp;'War&nbsp;and&nbsp;Peace'&nbsp;are&nbsp;tipul&nbsp;Belletre</code></pre>
     </div>
     <h2 class="subtitle">Metode ale enumerațiilor</h2>
     <p class="paragraph">Fiecare enumerație are o metodă statică values(), care returnează un array cu toate constantele enumerației:</p>
     <div class="code-inline">
      <pre><code>public&nbsp;class&nbsp;Program&nbsp;{<br>&nbsp;&nbsp;&nbsp;public&nbsp;static&nbsp;void&nbsp;main(String[]&nbsp;args)&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Type[]&nbsp;types&nbsp;=&nbsp;Type.values();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for&nbsp;(Type&nbsp;s&nbsp;:&nbsp;types)&nbsp;{&nbsp;System.out.println(s);&nbsp;}<br>&nbsp;&nbsp;&nbsp;}<br>}<br><br>enum&nbsp;Type&nbsp;{<br>&nbsp;&nbsp;&nbsp;SCIENCE,<br>&nbsp;&nbsp;&nbsp;BELLETRE,<br>&nbsp;&nbsp;&nbsp;PHANTASY,<br>&nbsp;&nbsp;&nbsp;SCIENCE_FICTION<br>}</code></pre>
     </div>
     <p class="paragraph">Metoda ordinal() returnează indexul unei constante (indexarea începe de la 0):</p>
     <div class="code-inline">
      <pre><code>System.out.println(Type.BELLETRE.ordinal());&nbsp;&nbsp;//&nbsp;1</code></pre>
     </div>
     <h2 class="subtitle">Constructori, câmpuri și metode ale enumerațiilor</h2>
     <p class="paragraph">Enumerațiile, la fel ca și clasele obișnuite, pot defini constructori, câmpuri și metode. De exemplu:</p>
     <div class="code-inline">
      <pre><code>public&nbsp;class&nbsp;Program&nbsp;{<br>&nbsp;&nbsp;&nbsp;public&nbsp;static&nbsp;void&nbsp;main(String[]&nbsp;args)&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(Color.RED.getCode());&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;#FF0000<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(Color.GREEN.getCode());&nbsp;&nbsp;//&nbsp;#00FF00<br>&nbsp;&nbsp;&nbsp;}<br>}<br><br>enum&nbsp;Color&nbsp;{<br>&nbsp;&nbsp;&nbsp;RED("#FF0000"),&nbsp;BLUE("#0000FF"),&nbsp;GREEN("#00FF00");<br>&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;private&nbsp;String&nbsp;code;<br>&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;Color(String&nbsp;code)&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this.code&nbsp;=&nbsp;code;<br>&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;public&nbsp;String&nbsp;getCode()&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;code;<br>&nbsp;&nbsp;&nbsp;}<br>}</code></pre>
     </div>
     <p class="paragraph">Enumerația Color definește un câmp privat code pentru stocarea codului culorii, iar cu ajutorul metodei getCode() este returnat codul. Valoarea este transmisă prin constructor. Este important de menționat că, implicit, constructorul este privat. Prin urmare, nu putem crea constant enumerații din afara enumerației.</p>
     <h2 class="subtitle">Definirea metodelor pentru constante individuale</h2>
     <p class="paragraph">De asemenea, putem defini metode pentru constantele individuale ale unei enumerații:</p>
     <div class="code-inline">
      <pre><code>public&nbsp;class&nbsp;Program&nbsp;{<br>&nbsp;&nbsp;&nbsp;public&nbsp;static&nbsp;void&nbsp;main(String[]&nbsp;args)&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Operation&nbsp;op&nbsp;=&nbsp;Operation.SUM;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(op.action(10,&nbsp;4));&nbsp;&nbsp;//&nbsp;14<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;op&nbsp;=&nbsp;Operation.MULTIPLY;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(op.action(6,&nbsp;4));&nbsp;&nbsp;&nbsp;//&nbsp;24<br>&nbsp;&nbsp;&nbsp;}<br>}<br><br>enum&nbsp;Operation&nbsp;{<br>&nbsp;&nbsp;&nbsp;SUM&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;int&nbsp;action(int&nbsp;x,&nbsp;int&nbsp;y)&nbsp;{&nbsp;return&nbsp;x&nbsp;+&nbsp;y;&nbsp;}<br>&nbsp;&nbsp;&nbsp;},<br>&nbsp;&nbsp;&nbsp;SUBTRACT&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;int&nbsp;action(int&nbsp;x,&nbsp;int&nbsp;y)&nbsp;{&nbsp;return&nbsp;x&nbsp;-&nbsp;y;&nbsp;}<br>&nbsp;&nbsp;&nbsp;},<br>&nbsp;&nbsp;&nbsp;MULTIPLY&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;int&nbsp;action(int&nbsp;x,&nbsp;int&nbsp;y)&nbsp;{&nbsp;return&nbsp;x&nbsp;*&nbsp;y;&nbsp;}<br>&nbsp;&nbsp;&nbsp;};<br><br>&nbsp;&nbsp;&nbsp;public&nbsp;abstract&nbsp;int&nbsp;action(int&nbsp;x,&nbsp;int&nbsp;y);<br>}</code></pre>
     </div>
     <p class="paragraph">Aici, fiecare constantă din enumerația Operation implementează metoda abstractă action() într-un mod diferit, în funcție de operația pe care o reprezintă.</p>
    </div>
   </main>
   <aside class="ad-section">
    <div class="ad-box">
     <p>Google Ad Here</p>
    </div>
    <div class="ad-box">
     <p>Promo: SQL Beginner Guide</p>
    </div>
   </aside>
  </div>
  <div class="lesson-navigation">
   <th:block th:if="${previousLesson != null}">
    <a th:href="@{'/lectii/' +
            ${#strings.toLowerCase(#strings.replace(previousLesson.chapter.topic.name, ' ', '-'))} + '/' +
            ${#strings.toLowerCase(#strings.replace(previousLesson.chapter.title, ' ', '-'))} + '/' +
            ${#strings.toLowerCase(#strings.replace(previousLesson.title, ' ', '-'))} }" class="nav-button">← Lecția anterioară</a>
   </th:block> <th:block th:if="${nextLesson != null}">
    <a th:href="@{'/lectii/' +
            ${#strings.toLowerCase(#strings.replace(nextLesson.chapter.topic.name, ' ', '-'))} + '/' +
            ${#strings.toLowerCase(#strings.replace(nextLesson.chapter.title, ' ', '-'))} + '/' +
            ${#strings.toLowerCase(#strings.replace(nextLesson.title, ' ', '-'))} }" class="nav-button">Lecția următoare →</a>
   </th:block>
  </div>
  <div th:replace="~{fragments/footer :: footer}"></div>
  <script th:src="@{/js/script.js}" defer></script>
 </body>
</html>
