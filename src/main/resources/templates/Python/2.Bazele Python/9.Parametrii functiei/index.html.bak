<!doctype html>
<html lang="ro" xmlns:th="http://www.w3.org/1999/xhtml">
 <head>
    <link rel="icon" type="image/png" href="/nume-aplicatie/images/favicon.png">
    <script async src="https://www.googletagmanager.com/gtag/js?id=G-7Q2536ZKL2"></script>
    <script>
      window.dataLayer = window.dataLayer || [];
      window.gtag = function () { dataLayer.push(arguments); };
      gtag('consent', 'default', {
        'wait_for_update': 500,
        'region': ['RO'],
        'ad_storage': 'denied',
        'analytics_storage': 'denied',
        'ad_user_data': 'denied',
        'ad_personalization': 'denied'
      });
      gtag('js', new Date());
      gtag('config', 'G-7Q2536ZKL2');
    </script>


  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title th:text="${lesson.title}">Lesson</title>
  <link rel="stylesheet" th:href="@{/css/styles.css}">
  <style>body { background: #ffffff; }</style>
 </head>
 <body th:with="activeTopic='Python', activeChapter='2.Bazele Python', activeLesson='9.Parametrii functiei'">
  <button class="mobile-sidebar-toggle" onclick="toggleMobileSidebar()">☰</button>
  <div th:replace="~{fragments/nav :: nav}"></div>
  <div class="top-nav">
   <th:block th:each="topic : ${topics}">
    <a th:href="@{'/lectii/topic/' + ${topic.id}}" th:text="${topic.name}" th:classappend="${topic.id} == ${activeTopicId} ? 'active' : ''"> </a>
   </th:block>
  </div>
  <div class="layout">
   <div class="mobile-sidebar" id="mobileSidebar">
    <button class="close-btn" onclick="toggleSidebar()">✖</button>
    <ul class="chapter-list">
     <th:block th:each="chapter : ${chapters}">
      <li class="chapter-item" th:classappend="${chapter.id} == ${activeChapterId} ? 'open' : ''">
       <div class="chapter-title" onclick="toggleChapter(this)">
        <strong th:text="${chapter.title}"></strong> <span class="arrow">▼</span>
       </div>
       <ul class="lesson-list">
        <th:block th:each="lesson : ${chapter.lessons}">
         <li><a th:href="@{'/lessons/' +
    ${#strings.toLowerCase(#strings.replace(chapter.topic.name, ' ', '-'))} + '/' +
    ${#strings.toLowerCase(#strings.replace(chapter.title, ' ', '-'))} + '/' +
    ${#strings.toLowerCase(#strings.replace(lesson.title, ' ', '-'))} }" th:text="${lesson.title}" th:classappend="${lesson.id} == ${activeLessonId} ? 'active' : ''"> </a></li>
        </th:block>
       </ul></li>
     </th:block>
    </ul>
   </div>
   <aside class="sidebar">
    <ul class="sidebar-list">
     <th:block th:each="chapter : ${chapters}">
      <li class="chapter-item" th:classappend="${chapter.id} == ${activeChapterId} ? 'open' : ''">
       <div class="chapter-toggle" onclick="toggleLessons(this)">
        <span th:text="${chapter.title}">Chapter</span>
       </div>
       <ul class="lesson-list hidden">
        <th:block th:each="lesson : ${chapter.lessons}">
         <li><a th:href="@{'/lessons/' +
    ${#strings.toLowerCase(#strings.replace(chapter.topic.name, ' ', '-'))} + '/' +
    ${#strings.toLowerCase(#strings.replace(chapter.title, ' ', '-'))} + '/' +
    ${#strings.toLowerCase(#strings.replace(lesson.title, ' ', '-'))} }" th:text="${lesson.title}" th:classappend="${lesson.id} == ${activeLessonId} ? 'active' : ''"> </a></li>
        </th:block>
       </ul></li>
     </th:block>
    </ul>
   </aside>
   <main class="content">
    <div class="document-container">
     <h1 class="main-title">Parametrii funcției</h1>
     <p class="paragraph">O funcție poate accepta parametri. Prin intermediul parametrilor, se pot transmite date către funcție. Un exemplu banal este funcția print(), care folosește parametri pentru a accepta valoarea de afișat în consolă.</p>
     <p class="paragraph">Acum vom defini și utiliza propria funcție cu parametri:</p>
     <div class="code-inline">
      <pre><code>def&nbsp;spune_salut(nume):<br>&nbsp;&nbsp;&nbsp;print(f"Salut,&nbsp;{nume}")<br><br>spune_salut("Tom")<br>spune_salut("Bob")<br>spune_salut("Alice")</code></pre>
     </div>
     <p class="paragraph">Funcția spune_salut are un parametru nume, și la apelarea funcției putem transmite acestui parametru o valoare. În interiorul funcției, putem folosi parametrul ca pe o variabilă obișnuită, de exemplu, pentru a afișa valoarea acestuia în consolă folosind funcția print. Astfel, în expresia:</p>
     <div class="code-inline">
      <pre><code>spune_salut("Tom")</code></pre>
     </div>
     <p class="paragraph">Șirul "Tom" va fi transmis parametrului nume. În consecință, la execuția programului, vom obține următorul output în consolă:</p>
     <div class="code-inline">
      <pre><code>Salut,&nbsp;Tom<br>Salut,&nbsp;Bob<br>Salut,&nbsp;Alice</code></pre>
     </div>
     <p class="paragraph">La apelarea funcției, valorile sunt transmise parametrilor în funcție de poziție. De exemplu, să definim și să apelăm o funcție cu mai mulți parametri:</p>
     <div class="code-inline">
      <pre><code>def&nbsp;afiseaza_persoana(nume,&nbsp;varsta):<br>&nbsp;&nbsp;&nbsp;print(f"Nume:&nbsp;{nume}")<br>&nbsp;&nbsp;&nbsp;print(f"Vârstă:&nbsp;{varsta}")<br>afiseaza_persoana("Tom",&nbsp;37)</code></pre>
     </div>
     <p class="paragraph">Aici funcția afiseaza_persoana acceptă doi parametri: nume și varsta. La apelarea funcției:</p>
     <div class="code-inline">
      <pre><code>afiseaza_persoana("Tom",&nbsp;37)</code></pre>
     </div>
     <p class="paragraph">Prima valoare - "Tom" este transmisă primului parametru, adică parametrului nume. A doua valoare - 37 este transmisă celui de-al doilea parametru - varsta. În interiorul funcției, valorile parametrilor sunt afișate în consolă:</p>
     <div class="code-inline">
      <pre><code>Nume:&nbsp;Tom<br>Vârstă:&nbsp;37</code></pre>
     </div>
     <h2 class="subtitle">Valori implicite</h2>
     <p class="paragraph">Unii parametri ai funcției pot fi făcuți opționali, specificând valori implicite pentru aceștia la definirea funcției. De exemplu:</p>
     <div class="code-inline">
      <pre><code>def&nbsp;spune_salut(nume="Tom"):<br>&nbsp;&nbsp;&nbsp;print(f"Salut,&nbsp;{nume}")<br><br><br>spune_salut()&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;#&nbsp;aici&nbsp;parametrul&nbsp;nume&nbsp;va&nbsp;avea&nbsp;valoarea&nbsp;"Tom"<br>spune_salut("Bob")&nbsp;&nbsp;&nbsp;&nbsp;#&nbsp;aici&nbsp;nume&nbsp;=&nbsp;"Bob"</code></pre>
     </div>
     <p class="paragraph">Aici parametrul nume este opțional. Și dacă nu transmitem o valoare pentru acesta la apelarea funcției, se va folosi valoarea implicită, adică șirul "Tom". Output-ul în consolă al acestui program:</p>
     <div class="code-inline">
      <pre><code>Salut,&nbsp;Tom<br>Salut,&nbsp;Bob</code></pre>
     </div>
     <p class="paragraph">Dacă funcția are mai mulți parametri, parametrii opționali trebuie să fie plasați după cei obligatorii. De exemplu:</p>
     <div class="code-inline">
      <pre><code>def&nbsp;afiseaza_persoana(nume,&nbsp;varsta=18):<br>&nbsp;&nbsp;&nbsp;print(f"Nume:&nbsp;{nume}&nbsp;&nbsp;Vârstă:&nbsp;{varsta}")<br><br><br>afiseaza_persoana("Bob")<br>afiseaza_persoana("Tom",&nbsp;37)</code></pre>
     </div>
     <p class="paragraph">Aici parametrul varsta este opțional și are implicit valoarea 18. Înaintea acestuia este plasat parametrul obligatoriu nume. Astfel, la apelarea funcției putem să nu transmitem o valoare parametrului varsta, dar trebuie să transmitem o valoare parametrului nume.</p>
     <p class="paragraph">Dacă este necesar, putem face toți parametrii opționali:</p>
     <div class="code-inline">
      <pre><code>def&nbsp;afiseaza_persoana(nume="Tom",&nbsp;varsta=18):<br>&nbsp;&nbsp;&nbsp;print(f"Nume:&nbsp;{nume}&nbsp;&nbsp;Vârstă:&nbsp;{varsta}")<br><br><br>afiseaza_persoana()&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;#&nbsp;Nume:&nbsp;Tom&nbsp;&nbsp;Vârstă:&nbsp;18<br>afiseaza_persoana("Bob")&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;#&nbsp;Nume:&nbsp;Bob&nbsp;&nbsp;Vârstă:&nbsp;18<br>afiseaza_persoana("Sam",&nbsp;37)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;#&nbsp;Nume:&nbsp;Sam&nbsp;&nbsp;Vârstă:&nbsp;37</code></pre>
     </div>
     <h2 class="subtitle">Transmiterea valorilor parametrilor prin nume. Parametri numiți</h2>
     <p class="paragraph">În exemplele de mai sus, la apelarea funcției, valorile sunt transmise parametrilor în funcție de poziție. Dar valorile pot fi transmise și parametrilor prin nume. Pentru aceasta, la apelarea funcției, se specifică numele parametrului și i se atribuie o valoare:</p>
     <div class="code-inline">
      <pre><code>def&nbsp;afiseaza_persoana(nume,&nbsp;varsta):<br>&nbsp;&nbsp;&nbsp;print(f"Nume:&nbsp;{nume}&nbsp;&nbsp;Vârstă:&nbsp;{varsta}")<br><br>afiseaza_persoana(varsta=22,&nbsp;nume="Tom")</code></pre>
     </div>
     <p class="paragraph">În acest caz, valorile parametrilor varsta și nume sunt transmise prin nume. Și chiar dacă parametrul nume este primul în definirea funcției, putem scrie afiseaza_persoana(varsta=22, nume="Tom") la apelarea funcției și astfel să transmitem valoarea 22 parametrului varsta și șirul "Tom" parametrului nume.</p>
     <p class="paragraph">Simbolul * permite stabilirea parametrilor care vor fi numiți - adică acei parametri cărora li se pot transmite valori doar prin nume. Toți parametrii care se află la dreapta simbolului * primesc valori doar prin nume:</p>
     <div class="code-inline">
      <pre><code>def&nbsp;afiseaza_persoana(nume,&nbsp;*,&nbsp;varsta,&nbsp;companie):<br>&nbsp;&nbsp;&nbsp;print(f"Nume:&nbsp;{nume}&nbsp;&nbsp;Vârstă:&nbsp;{varsta}&nbsp;&nbsp;Companie:&nbsp;{companie}")<br><br>afiseaza_persoana("Bob",&nbsp;varsta=41,&nbsp;companie="Microsoft")&nbsp;&nbsp;&nbsp;&nbsp;<br><br>#&nbsp;Nume:&nbsp;Bob&nbsp;&nbsp;Vârstă:&nbsp;41&nbsp;&nbsp;Companie:&nbsp;Microsoft</code></pre>
     </div>
     <p class="paragraph">În acest caz, parametrii varsta și companie sunt numiți.</p>
     <p class="paragraph">Putem face toți parametrii numiți, plasând simbolul * înaintea listei de parametri:</p>
     <div class="code-inline">
      <pre><code>def&nbsp;afiseaza_persoana(*,&nbsp;nume,&nbsp;varsta,&nbsp;companie):<br>&nbsp;&nbsp;&nbsp;print(f"Nume:&nbsp;{nume}&nbsp;&nbsp;Vârstă:&nbsp;{varsta}&nbsp;&nbsp;Companie:&nbsp;{companie}")</code></pre>
     </div>
     <p class="paragraph">Dacă dorim să definim parametri cărora li se pot transmite valori doar prin poziție, adică parametri poziționali, putem folosi simbolul /: toți parametrii care se află înaintea simbolului / sunt poziționali și pot primi valori doar prin poziție:</p>
     <div class="code-inline">
      <pre><code>def&nbsp;afiseaza_persoana(nume,&nbsp;/,&nbsp;varsta,&nbsp;companie="Microsoft"):<br>&nbsp;&nbsp;&nbsp;print(f"Nume:&nbsp;{nume}&nbsp;&nbsp;Vârstă:&nbsp;{varsta}&nbsp;&nbsp;Companie:&nbsp;{companie}")<br><br><br>afiseaza_persoana("Tom",&nbsp;companie="JetBrains",&nbsp;varsta=24)&nbsp;&nbsp;&nbsp;&nbsp;<br><br>#&nbsp;Nume:&nbsp;Tom&nbsp;&nbsp;Vârstă:&nbsp;24&nbsp;&nbsp;Companie:&nbsp;JetBrains<br>afiseaza_persoana("Bob",&nbsp;41)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br><br>#&nbsp;Nume:&nbsp;Bob&nbsp;&nbsp;Vârstă:&nbsp;41&nbsp;&nbsp;Companie:&nbsp;Microsoft</code></pre>
     </div>
     <p class="paragraph">În acest caz, parametrul nume este pozițional.</p>
     <p class="paragraph">Pentru o funcție, putem defini simultan parametri poziționali și numiți.</p>
     <div class="code-inline">
      <pre><code>def&nbsp;afiseaza_persoana(nume,&nbsp;/,&nbsp;varsta=18,&nbsp;*,&nbsp;companie):<br>&nbsp;&nbsp;&nbsp;print(f"Nume:&nbsp;{nume}&nbsp;&nbsp;Vârstă:&nbsp;{varsta}&nbsp;&nbsp;Companie:&nbsp;{companie}")<br>afiseaza_persoana("Sam",&nbsp;companie="Google")&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br><br>#&nbsp;Nume:&nbsp;Sam&nbsp;&nbsp;Vârstă:&nbsp;18&nbsp;&nbsp;Companie:&nbsp;Google<br>afiseaza_persoana("Tom",&nbsp;37,&nbsp;companie="JetBrains")&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br><br>#&nbsp;Nume:&nbsp;Tom&nbsp;&nbsp;Vârstă:&nbsp;37&nbsp;&nbsp;Companie:&nbsp;JetBrains<br>afiseaza_persoana("Bob",&nbsp;companie="Microsoft",&nbsp;varsta=42)<br><br>#&nbsp;Nume:&nbsp;Bob&nbsp;&nbsp;Vârstă:&nbsp;42&nbsp;&nbsp;Companie:&nbsp;Microsoft</code></pre>
     </div>
     <p class="paragraph">În acest caz, parametrul nume este pozițional și obligatoriu - îi putem transmite o valoare doar prin poziție.</p>
     <p class="paragraph">Parametrul companie este numit, deoarece se află la dreapta simbolului *. Parametrul varsta poate primi valori atât prin nume, cât și prin poziție.</p>
     <h2 class="subtitle">Număr variabil de parametri</h2>
     <p class="paragraph">Folosind simbolul stea *, putem defini un parametru prin care se pot transmite un număr variabil de valori. Acest lucru poate fi util atunci când dorim ca funcția să primească mai multe valori, dar nu știm exact câte. De exemplu, să definim o funcție de calculare a sumei numerelor:</p>
     <div class="code-inline">
      <pre><code>def&nbsp;suma(*numere):<br>&nbsp;&nbsp;&nbsp;rezultat&nbsp;=&nbsp;0<br>&nbsp;&nbsp;&nbsp;for&nbsp;n&nbsp;în&nbsp;numere:<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;rezultat&nbsp;+=&nbsp;n<br>&nbsp;&nbsp;&nbsp;print(f"suma&nbsp;=&nbsp;{rezultat}")<br><br>suma(1,&nbsp;2,&nbsp;3,&nbsp;4,&nbsp;5)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;#&nbsp;suma&nbsp;=&nbsp;15<br>suma(3,&nbsp;4,&nbsp;5,&nbsp;6)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;#&nbsp;suma&nbsp;=&nbsp;18</code></pre>
     </div>
     <p class="paragraph">În acest caz, funcția suma acceptă un singur parametru - *numere, dar steaua înaintea numelui parametrului indică faptul că, de fapt, putem transmite un număr variabil de valori sau un set de valori în locul acestui parametru. În funcția propriu-zisă, putem parcurge acest set de valori folosind un ciclu for, putem obține fiecare valoare din acest set în variabila n și putem efectua diverse acțiuni cu aceasta. De exemplu, în acest caz, se calculează suma numerelor transmise.</p>
    </div>
   </main>
   <aside class="ad-section">
    <div class="ad-box">
     <p>Google Ad Here</p>
    </div>
    <div class="ad-box">
     <p>Promo: SQL Beginner Guide</p>
    </div>
   </aside>
  </div>
  <div class="lesson-navigation">
   <th:block th:if="${previousLesson != null}">
    <a th:href="@{'/lessons/' +
            ${#strings.toLowerCase(#strings.replace(previousLesson.chapter.topic.name, ' ', '-'))} + '/' +
            ${#strings.toLowerCase(#strings.replace(previousLesson.chapter.title, ' ', '-'))} + '/' +
            ${#strings.toLowerCase(#strings.replace(previousLesson.title, ' ', '-'))} }" class="nav-button">← Lecția anterioară</a>
   </th:block> <th:block th:if="${nextLesson != null}">
    <a th:href="@{'/lessons/' +
            ${#strings.toLowerCase(#strings.replace(nextLesson.chapter.topic.name, ' ', '-'))} + '/' +
            ${#strings.toLowerCase(#strings.replace(nextLesson.chapter.title, ' ', '-'))} + '/' +
            ${#strings.toLowerCase(#strings.replace(nextLesson.title, ' ', '-'))} }" class="nav-button">Lecția următoare →</a>
   </th:block>
  </div>
  <div th:replace="~{fragments/footer :: footer}"></div>
  <script th:src="@{/js/script.js}" defer></script>
 </body>
</html>
