<!doctype html>
<html lang="ro" xmlns:th="http://www.w3.org/1999/xhtml">
 <head>
    <link rel="icon" type="image/png" href="/nume-aplicatie/images/favicon.png">
    <script async src="https://www.googletagmanager.com/gtag/js?id=G-7Q2536ZKL2"></script>
    <script>
      window.dataLayer = window.dataLayer || [];
      window.gtag = function () { dataLayer.push(arguments); };
      gtag('consent', 'default', {
        'wait_for_update': 500,
        'region': ['RO'],
        'ad_storage': 'denied',
        'analytics_storage': 'denied',
        'ad_user_data': 'denied',
        'ad_personalization': 'denied'
      });
      gtag('js', new Date());
      gtag('config', 'G-7Q2536ZKL2');
    </script>


  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title th:text="${lesson.title}">Lesson</title>
  <link rel="stylesheet" th:href="@{/css/styles.css}">
  <style>body { background: #ffffff; }</style>
 </head>
 <body th:with="activeTopic='Python', activeChapter='2.Bazele Python', activeLesson='16.Decoratori'">
  <button class="mobile-sidebar-toggle" onclick="toggleMobileSidebar()">☰</button>
  <div th:replace="~{fragments/nav :: nav}"></div>
  <div class="top-nav">
   <th:block th:each="topic : ${topics}">
    <a th:href="@{'/lectii/topic/' + ${topic.id}}" th:text="${topic.name}" th:classappend="${topic.id} == ${activeTopicId} ? 'active' : ''"> </a>
   </th:block>
  </div>
  <div class="layout">
   <div class="mobile-sidebar" id="mobileSidebar">
    <button class="close-btn" onclick="toggleSidebar()">✖</button>
    <ul class="chapter-list">
     <th:block th:each="chapter : ${chapters}">
      <li class="chapter-item" th:classappend="${chapter.id} == ${activeChapterId} ? 'open' : ''">
       <div class="chapter-title" onclick="toggleChapter(this)">
        <strong th:text="${chapter.title}"></strong> <span class="arrow">▼</span>
       </div>
       <ul class="lesson-list">
        <th:block th:each="lesson : ${chapter.lessons}">
         <li><a th:href="@{'/lessons/' +
    ${#strings.toLowerCase(#strings.replace(chapter.topic.name, ' ', '-'))} + '/' +
    ${#strings.toLowerCase(#strings.replace(chapter.title, ' ', '-'))} + '/' +
    ${#strings.toLowerCase(#strings.replace(lesson.title, ' ', '-'))} }" th:text="${lesson.title}" th:classappend="${lesson.id} == ${activeLessonId} ? 'active' : ''"> </a></li>
        </th:block>
       </ul></li>
     </th:block>
    </ul>
   </div>
   <aside class="sidebar">
    <ul class="sidebar-list">
     <th:block th:each="chapter : ${chapters}">
      <li class="chapter-item" th:classappend="${chapter.id} == ${activeChapterId} ? 'open' : ''">
       <div class="chapter-toggle" onclick="toggleLessons(this)">
        <span th:text="${chapter.title}">Chapter</span>
       </div>
       <ul class="lesson-list hidden">
        <th:block th:each="lesson : ${chapter.lessons}">
         <li><a th:href="@{'/lessons/' +
    ${#strings.toLowerCase(#strings.replace(chapter.topic.name, ' ', '-'))} + '/' +
    ${#strings.toLowerCase(#strings.replace(chapter.title, ' ', '-'))} + '/' +
    ${#strings.toLowerCase(#strings.replace(lesson.title, ' ', '-'))} }" th:text="${lesson.title}" th:classappend="${lesson.id} == ${activeLessonId} ? 'active' : ''"> </a></li>
        </th:block>
       </ul></li>
     </th:block>
    </ul>
   </aside>
   <main class="content">
    <div class="document-container">
     <h1 class="main-title">Decoratori</h1>
     <p class="paragraph">Decoratori în Python reprezintă funcții care primesc ca parametru o altă funcție și returnează, de asemenea, o funcție. Decoratorii permit modificarea unei funcții, a parametrilor săi și a rezultatului său fără a modifica codul sursă al acestei funcții.</p>
     <p class="paragraph">Să analizăm un exemplu simplu:</p>
     <div class="code-inline">
      <pre><code>#&nbsp;definirea&nbsp;funcției&nbsp;decorator<br>def&nbsp;select(input_func):<br>&nbsp;&nbsp;&nbsp;def&nbsp;output_func():&nbsp;&nbsp;#&nbsp;definim&nbsp;funcția&nbsp;care&nbsp;va&nbsp;fi&nbsp;executată&nbsp;în&nbsp;locul&nbsp;celei&nbsp;originale<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;print("*****************")&nbsp;&nbsp;#&nbsp;înainte&nbsp;de&nbsp;a&nbsp;afișa&nbsp;funcția&nbsp;originală,&nbsp;afișăm&nbsp;niște&nbsp;steluțe<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;input_func()&nbsp;&nbsp;#&nbsp;apelăm&nbsp;funcția&nbsp;originală<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;print("*****************")&nbsp;&nbsp;#&nbsp;după&nbsp;ce&nbsp;afișăm&nbsp;funcția&nbsp;originală,&nbsp;afișăm&nbsp;niște&nbsp;steluțe<br>&nbsp;&nbsp;&nbsp;return&nbsp;output_func&nbsp;&nbsp;#&nbsp;returnăm&nbsp;noua&nbsp;funcție<br><br>#&nbsp;definirea&nbsp;funcției&nbsp;originale<br>@select&nbsp;&nbsp;#&nbsp;aplicarea&nbsp;decoratorului&nbsp;select<br>def&nbsp;hello():<br>&nbsp;&nbsp;&nbsp;print("Hello&nbsp;www.fabricadecoduri.com")<br><br>#&nbsp;apelăm&nbsp;funcția&nbsp;originală<br>hello()</code></pre>
     </div>
     <p class="paragraph">La început, este definită funcția decoratorului, care în acest caz se numește select(). Ca parametru, decoratorul primește o funcție (în acest caz, parametrul input_func), la care acest decorator va fi aplicat:</p>
     <div class="code-inline">
      <pre><code>def&nbsp;select(input_func):<br>&nbsp;&nbsp;&nbsp;def&nbsp;output_func():&nbsp;&nbsp;#&nbsp;definim&nbsp;funcția&nbsp;care&nbsp;va&nbsp;fi&nbsp;executată&nbsp;în&nbsp;locul&nbsp;celei&nbsp;originale<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;print("*****************")&nbsp;&nbsp;#&nbsp;înainte&nbsp;de&nbsp;a&nbsp;afișa&nbsp;funcția&nbsp;originală,&nbsp;afișăm&nbsp;niște&nbsp;steluțe<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;input_func()&nbsp;&nbsp;#&nbsp;apelăm&nbsp;funcția&nbsp;originală<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;print("*****************")&nbsp;&nbsp;#&nbsp;după&nbsp;ce&nbsp;afișăm&nbsp;funcția&nbsp;originală,&nbsp;afișăm&nbsp;niște&nbsp;steluțe<br>&nbsp;&nbsp;&nbsp;return&nbsp;output_func&nbsp;&nbsp;#&nbsp;returnăm&nbsp;noua&nbsp;funcție</code></pre>
     </div>
     <p class="paragraph">Rezultatul decoratorului în acest caz este funcția locală output_func, în care este apelată funcția de intrare input_func. Pentru simplitate, aici, înainte și după apelul lui input_func, afișăm un set de caractere "*".</p>
     <p class="paragraph">Apoi este definită funcția standard la care se aplică decoratorul - în acest caz, este funcția hello, care doar afișează pe consolă un mesaj:</p>
     <div class="code-inline">
      <pre><code>@select&nbsp;&nbsp;#&nbsp;aplicarea&nbsp;decoratorului&nbsp;select<br>def&nbsp;hello():<br>&nbsp;&nbsp;&nbsp;print("Hello&nbsp;www.fabricadecoduri.com")</code></pre>
     </div>
     <p class="paragraph">Pentru a aplica decoratorul, înainte de definirea funcției se folosește simbolul @, urmat de numele decoratorului. Deci, în acest caz, funcției hello() i se aplică decoratorul select().</p>
     <p class="paragraph">Apoi apelăm funcția obișnuită:</p>
     <div class="code-inline">
      <pre><code>hello()</code></pre>
     </div>
     <p class="paragraph">Deoarece funcției i se aplică decoratorul select, funcția hello este transmisă în decoratorul select() ca parametru input_func. Și deoarece decoratorul returnează o nouă funcție - output_func, în acest caz, se va executa de fapt funcția output_func().</p>
     <p class="paragraph">Rezultatul afișării pe consolă va fi:</p>
     <div class="code-inline">
      <pre><code>*****************<br>Hello&nbsp;www.fabricadecoduri.com<br>*****************</code></pre>
     </div>
     <h2 class="subtitle">Preluarea parametrilor funcției în decorator</h2>
     <p class="paragraph">Decoratorul poate intercepta argumentele transmise funcției:</p>
     <div class="code-inline">
      <pre><code>#&nbsp;definirea&nbsp;funcției&nbsp;decorator<br>def&nbsp;check(input_func):<br>&nbsp;&nbsp;&nbsp;def&nbsp;output_func(*args):&nbsp;&nbsp;#&nbsp;prin&nbsp;*args&nbsp;preluăm&nbsp;valorile&nbsp;parametrilor&nbsp;funcției&nbsp;originale<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;input_func(*args)&nbsp;&nbsp;#&nbsp;apelăm&nbsp;funcția&nbsp;originală<br>&nbsp;&nbsp;&nbsp;return&nbsp;output_func&nbsp;&nbsp;#&nbsp;returnăm&nbsp;noua&nbsp;funcție<br><br>#&nbsp;definirea&nbsp;funcției&nbsp;originale<br>@check<br>def&nbsp;print_person(name,&nbsp;age):<br>&nbsp;&nbsp;&nbsp;print(f"Name:&nbsp;{name}&nbsp;&nbsp;Age:&nbsp;{age}")<br><br>#&nbsp;apelăm&nbsp;funcția&nbsp;originală<br>print_person("Tom",&nbsp;38)</code></pre>
     </div>
     <p class="paragraph">Aici, funcția print_person() primește doi parametri: name (nume) și age (vârstă). Acestei funcții i se aplică decoratorul check.</p>
     <p class="paragraph">În decoratorul check se returnează funcția locală output_func(), care primește un set de valori sub forma parametrului *args - acestea sunt valorile care sunt transmise funcției originale căreia i se aplică decoratorul. Adică, în acest caz, *args va conține valorile parametrilor name și age.</p>
     <div class="code-inline">
      <pre><code>def&nbsp;check(input_func):<br>&nbsp;&nbsp;&nbsp;def&nbsp;output_func(*args):&nbsp;&nbsp;#&nbsp;prin&nbsp;*args&nbsp;preluăm&nbsp;valorile&nbsp;parametrilor&nbsp;funcției&nbsp;input_func<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;input_func(*args)</code></pre>
     </div>
     <p class="paragraph">Aici pur și simplu transmitem aceste valori funcției originale:</p>
     <div class="code-inline">
      <pre><code>input_func(*args)</code></pre>
     </div>
     <p class="paragraph">Rezultatul pe consolă va fi:</p>
     <div class="code-inline">
      <pre><code>Name:&nbsp;Tom&nbsp;&nbsp;Age:&nbsp;38</code></pre>
     </div>
     <p class="paragraph">Dar ce se întâmplă dacă în funcția print_person va fi transmisă o valoare inacceptabilă, de exemplu, o vârstă negativă? Unul dintre avantajele decoratorilor este că putem verifica și, dacă este necesar, modifica valorile parametrilor. De exemplu:</p>
     <div class="code-inline">
      <pre><code>#&nbsp;definirea&nbsp;funcției&nbsp;decorator<br>def&nbsp;check(input_func):<br>&nbsp;&nbsp;&nbsp;def&nbsp;output_func(*args):<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;name&nbsp;=&nbsp;args[0]<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;age&nbsp;=&nbsp;args[1]&nbsp;&nbsp;#&nbsp;preluăm&nbsp;valoarea&nbsp;celui&nbsp;de-al&nbsp;doilea&nbsp;parametru<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;age&nbsp;&lt;&nbsp;0:&nbsp;age&nbsp;=&nbsp;1&nbsp;&nbsp;#&nbsp;dacă&nbsp;vârsta&nbsp;este&nbsp;negativă,&nbsp;o&nbsp;modificăm&nbsp;la&nbsp;1<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;input_func(name,&nbsp;age)&nbsp;&nbsp;#&nbsp;transmitem&nbsp;funcției&nbsp;valorile&nbsp;parametrilor<br>&nbsp;&nbsp;&nbsp;return&nbsp;output_func<br><br>#&nbsp;definirea&nbsp;funcției&nbsp;originale<br>@check<br>def&nbsp;print_person(name,&nbsp;age):<br>&nbsp;&nbsp;&nbsp;print(f"Name:&nbsp;{name}&nbsp;&nbsp;Age:&nbsp;{age}")<br><br>#&nbsp;apelăm&nbsp;funcția&nbsp;originală<br>print_person("Tom",&nbsp;38)<br>print_person("Bob",&nbsp;-5)</code></pre>
     </div>
     <p class="paragraph">args reprezintă un set de valori, și, folosind indicii, putem prelua valorile parametrilor pe poziții și putem face ceva cu ele. Astfel, aici, dacă valoarea vârstei este mai mică de 0, o setăm la 1. Apoi transmitem aceste valori la apelul funcției. Rezultatul pe consolă va fi:</p>
     <div class="code-inline">
      <pre><code>Name:&nbsp;Tom&nbsp;&nbsp;Age:&nbsp;38<br>Name:&nbsp;Bob&nbsp;&nbsp;Age:&nbsp;1</code></pre>
     </div>
     <h2 class="subtitle">Preluarea rezultatului funcției</h2>
     <p class="paragraph">Similar, putem prelua rezultatul funcției și, dacă este necesar, să-l modificăm:</p>
     <div class="code-inline">
      <pre><code>#&nbsp;definirea&nbsp;funcției&nbsp;decorator<br>def&nbsp;check(input_func):<br>&nbsp;&nbsp;&nbsp;def&nbsp;output_func(*args):<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;result&nbsp;=&nbsp;input_func(*args)&nbsp;&nbsp;#&nbsp;transmitem&nbsp;funcției&nbsp;valorile&nbsp;parametrilor<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;result&nbsp;&lt;&nbsp;0:&nbsp;result&nbsp;=&nbsp;0&nbsp;&nbsp;#&nbsp;dacă&nbsp;rezultatul&nbsp;funcției&nbsp;este&nbsp;mai&nbsp;mic&nbsp;de&nbsp;zero,&nbsp;returnăm&nbsp;0<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;result<br>&nbsp;&nbsp;&nbsp;return&nbsp;output_func<br><br>#&nbsp;definirea&nbsp;funcției&nbsp;originale<br>@check<br>def&nbsp;sum(a,&nbsp;b):<br>&nbsp;&nbsp;&nbsp;return&nbsp;a&nbsp;+&nbsp;b<br><br>#&nbsp;apelăm&nbsp;funcția&nbsp;originală<br>result1&nbsp;=&nbsp;sum(10,&nbsp;20)<br>print(result1)&nbsp;&nbsp;#&nbsp;30<br><br>result2&nbsp;=&nbsp;sum(10,&nbsp;-20)<br>print(result2)&nbsp;&nbsp;#&nbsp;0</code></pre>
     </div>
     <p class="paragraph">Aici este definită funcția sum(), care returnează suma numerelor. În decoratorul check, verificăm rezultatul funcției și, pentru simplitate, dacă acesta este mai mic de zero, returnăm 0.</p>
     <p class="paragraph">Rezultatul afișării pe consolă va fi:</p>
     <div class="code-inline">
      <pre><code>30<br>0</code></pre>
     </div>
    </div>
   </main>
   <aside class="ad-section">
    <div class="ad-box">
     <p>Google Ad Here</p>
    </div>
    <div class="ad-box">
     <p>Promo: SQL Beginner Guide</p>
    </div>
   </aside>
  </div>
  <div class="lesson-navigation">
   <th:block th:if="${previousLesson != null}">
    <a th:href="@{'/lessons/' +
            ${#strings.toLowerCase(#strings.replace(previousLesson.chapter.topic.name, ' ', '-'))} + '/' +
            ${#strings.toLowerCase(#strings.replace(previousLesson.chapter.title, ' ', '-'))} + '/' +
            ${#strings.toLowerCase(#strings.replace(previousLesson.title, ' ', '-'))} }" class="nav-button">← Lecția anterioară</a>
   </th:block> <th:block th:if="${nextLesson != null}">
    <a th:href="@{'/lessons/' +
            ${#strings.toLowerCase(#strings.replace(nextLesson.chapter.topic.name, ' ', '-'))} + '/' +
            ${#strings.toLowerCase(#strings.replace(nextLesson.chapter.title, ' ', '-'))} + '/' +
            ${#strings.toLowerCase(#strings.replace(nextLesson.title, ' ', '-'))} }" class="nav-button">Lecția următoare →</a>
   </th:block>
  </div>
  <div th:replace="~{fragments/footer :: footer}"></div>
  <script th:src="@{/js/script.js}" defer></script>
 </body>
</html>
