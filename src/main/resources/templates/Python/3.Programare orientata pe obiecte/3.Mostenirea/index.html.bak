<!doctype html>
<html lang="ro" xmlns:th="http://www.w3.org/1999/xhtml">
 <head>
    <script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-4253419731329045"
            crossorigin="anonymous"></script>


  <link rel="canonical" th:href="${canonicalUrl}" />

    <link rel="icon" type="image/png" href="/nume-aplicatie/images/favicon.png">
    <script async src="https://www.googletagmanager.com/gtag/js?id=G-7Q2536ZKL2"></script>
    <script>
      window.dataLayer = window.dataLayer || [];
      window.gtag = function () { dataLayer.push(arguments); };
      gtag('consent', 'default', {
        'wait_for_update': 500,
        'region': ['RO'],
        'ad_storage': 'denied',
        'analytics_storage': 'denied',
        'ad_user_data': 'denied',
        'ad_personalization': 'denied'
      });
      gtag('js', new Date());
      gtag('config', 'G-7Q2536ZKL2');
    </script>


  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title th:text="${lesson.title}">Lesson</title>
  <link rel="stylesheet" th:href="@{/css/styles.css}">
  <style>body { background: #ffffff; }</style>
 </head>
 <body th:with="activeTopic='Python', activeChapter='3.Programare orientata pe obiecte', activeLesson='3.Mostenirea'">
  <button class="mobile-sidebar-toggle" onclick="toggleMobileSidebar()">☰</button>
  <div th:replace="~{fragments/nav :: nav}"></div>
  <div class="top-nav">
   <th:block th:each="topic : ${topics}">
    <a th:href="@{'/lectii/topic/' + ${topic.id}}" th:text="${topic.name}" th:classappend="${topic.id} == ${activeTopicId} ? 'active' : ''"> </a>
   </th:block>
  </div>
  <div class="layout">
   <div class="mobile-sidebar" id="mobileSidebar">
    <button class="close-btn" onclick="toggleSidebar()">✖</button>
    <ul class="chapter-list">
     <th:block th:each="chapter : ${chapters}">
      <li class="chapter-item" th:classappend="${chapter.id} == ${activeChapterId} ? 'open' : ''">
       <div class="chapter-title" onclick="toggleChapter(this)">
        <strong th:text="${chapter.title}"></strong> <span class="arrow">▼</span>
       </div>
       <ul class="lesson-list">
        <th:block th:each="lesson : ${chapter.lessons}">
         <li><a th:href="@{'/lectii/' +
    ${#strings.toLowerCase(#strings.replace(chapter.topic.name, ' ', '-'))} + '/' +
    ${#strings.toLowerCase(#strings.replace(chapter.title, ' ', '-'))} + '/' +
    ${#strings.toLowerCase(#strings.replace(lesson.title, ' ', '-'))} }" th:text="${lesson.title}" th:classappend="${lesson.id} == ${activeLessonId} ? 'active' : ''"> </a></li>
        </th:block>
       </ul></li>
     </th:block>
    </ul>
   </div>
   <aside class="sidebar">
    <ul class="sidebar-list">
     <th:block th:each="chapter : ${chapters}">
      <li class="chapter-item" th:classappend="${chapter.id} == ${activeChapterId} ? 'open' : ''">
       <div class="chapter-toggle" onclick="toggleLessons(this)">
        <span th:text="${chapter.title}">Chapter</span>
       </div>
       <ul class="lesson-list hidden">
        <th:block th:each="lesson : ${chapter.lessons}">
         <li><a th:href="@{'/lectii/' +
    ${#strings.toLowerCase(#strings.replace(chapter.topic.name, ' ', '-'))} + '/' +
    ${#strings.toLowerCase(#strings.replace(chapter.title, ' ', '-'))} + '/' +
    ${#strings.toLowerCase(#strings.replace(lesson.title, ' ', '-'))} }" th:text="${lesson.title}" th:classappend="${lesson.id} == ${activeLessonId} ? 'active' : ''"> </a></li>
        </th:block>
       </ul></li>
     </th:block>
    </ul>
   </aside>
   <main class="content">
    <div class="document-container">
     <h1 class="main-title">Moștenirea</h1>
     <p class="paragraph">Moștenirea permite crearea unei noi clase pe baza unei clase deja existente. Alături de încapsulare, moștenirea este unul dintre pilonii principali ai programării orientate pe obiecte.</p>
     <p class="paragraph">Conceptele cheie ale moștenirii sunt subclasa și superclasa. Subclasa moștenește toate atributele și metodele publice ale superclasei. Superclasa mai este numită și clasă de bază (base class) sau clasă părinte (parent class), iar subclasa este denumită clasă derivată (derived class) sau clasă copil (child class).</p>
     <p class="paragraph">Sintaxa pentru moștenirea claselor arată astfel:</p>
     <div class="code-inline">
      <pre><code>class&nbsp;Subclasa(Superclasa):<br>&nbsp;&nbsp;&nbsp;metode_subclasa</code></pre>
     </div>
     <p class="paragraph">De exemplu, avem o clasă Person, care reprezintă o persoană:</p>
     <div class="code-inline">
      <pre><code>class&nbsp;Person:<br>&nbsp;&nbsp;&nbsp;def&nbsp;__init__(self,&nbsp;name):<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;self.__name&nbsp;=&nbsp;name&nbsp;&nbsp;&nbsp;#&nbsp;numele&nbsp;persoanei<br><br>&nbsp;&nbsp;&nbsp;&nbsp;@property<br>&nbsp;&nbsp;&nbsp;def&nbsp;name(self):<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;self.__name<br><br>&nbsp;&nbsp;&nbsp;def&nbsp;display_info(self):<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;print(f"Nume:&nbsp;{self.__name}")</code></pre>
     </div>
     <p class="paragraph">Să presupunem că avem nevoie de o clasă pentru un angajat, care lucrează la o anumită firmă. Am putea crea de la zero o nouă clasă, de exemplu, clasa Employee:</p>
     <div class="code-inline">
      <pre><code>class&nbsp;Employee:<br>&nbsp;&nbsp;&nbsp;def&nbsp;__init__(self,&nbsp;name):<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;self.__name&nbsp;=&nbsp;name&nbsp;&nbsp;#&nbsp;numele&nbsp;angajatului<br><br>&nbsp;&nbsp;&nbsp;&nbsp;@property<br>&nbsp;&nbsp;&nbsp;def&nbsp;name(self):<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;self.__name<br><br>&nbsp;&nbsp;&nbsp;def&nbsp;display_info(self):<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;print(f"Nume:&nbsp;{self.__name}")<br><br>&nbsp;&nbsp;&nbsp;def&nbsp;work(self):<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;print(f"{self.name}&nbsp;lucrează")</code></pre>
     </div>
     <p class="paragraph">Cu toate acestea, clasa Employee poate avea aceleași atribute și metode ca și clasa Person, deoarece un angajat este o persoană. Astfel, în clasa Employee de mai sus doar adăugăm metoda work, restul codului repetând funcționalitatea clasei Person. Pentru a evita duplicarea funcționalității, în acest caz este mai bine să folosim moștenirea.</p>
     <p class="paragraph">Așadar, vom moșteni clasa Employee din clasa Person:</p>
     <div class="code-inline">
      <pre><code>class&nbsp;Person:<br>&nbsp;&nbsp;&nbsp;def&nbsp;__init__(self,&nbsp;name):<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;self.__name&nbsp;=&nbsp;name&nbsp;&nbsp;&nbsp;#&nbsp;numele&nbsp;persoanei<br><br>&nbsp;&nbsp;&nbsp;&nbsp;@property<br>&nbsp;&nbsp;&nbsp;def&nbsp;name(self):<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;self.__name<br><br>&nbsp;&nbsp;&nbsp;def&nbsp;display_info(self):<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;print(f"Nume:&nbsp;{self.__name}")<br><br>class&nbsp;Employee(Person):<br>&nbsp;&nbsp;&nbsp;def&nbsp;work(self):<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;print(f"{self.name}&nbsp;lucrează")<br><br>tom&nbsp;=&nbsp;Employee("Tom")<br>print(tom.name)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;#&nbsp;Tom<br>tom.display_info()&nbsp;&nbsp;#&nbsp;Nume:&nbsp;Tom<br>tom.work()&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;#&nbsp;Tom&nbsp;lucrează</code></pre>
     </div>
     <p class="paragraph">Clasa Employee preia complet funcționalitatea clasei Person, adăugând doar metoda work(). Prin urmare, la crearea unui obiect Employee putem folosi constructorul moștenit de la Person:</p>
     <div class="code-inline">
      <pre><code>tom&nbsp;=&nbsp;Employee("Tom")</code></pre>
     </div>
     <p class="paragraph">Și putem accesa atributele/proprietățile și metodele moștenite:</p>
     <div class="code-inline">
      <pre><code>print(tom.name)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;#&nbsp;Tom<br>tom.display_info()&nbsp;&nbsp;#&nbsp;Nume:&nbsp;Tom</code></pre>
     </div>
     <p class="paragraph">Totuși, trebuie remarcat că pentru Employee nu sunt accesibile atributele private de tipul __name. De exemplu, nu putem în metoda work să accesăm atributul privat self.__name:</p>
     <div class="code-inline">
      <pre><code>def&nbsp;work(self):<br>&nbsp;&nbsp;&nbsp;print(f"{self.__name}&nbsp;lucrează")&nbsp;&nbsp;&nbsp;#&nbsp;!&nbsp;Eroare</code></pre>
     </div>
     <h2 class="subtitle">Moștenire multiplă</h2>
     <p class="paragraph">O caracteristică distinctivă a limbajului Python este suportul pentru moștenirea multiplă, adică o clasă poate fi moștenită de la mai multe clase:</p>
     <div class="code-inline">
      <pre><code>#&nbsp;clasa&nbsp;angajatului<br>class&nbsp;Employee:<br>&nbsp;&nbsp;&nbsp;def&nbsp;work(self):<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;print("Angajatul&nbsp;lucrează")<br><br>#&nbsp;clasa&nbsp;studentului<br>class&nbsp;Student:<br>&nbsp;&nbsp;&nbsp;def&nbsp;study(self):<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;print("Studentul&nbsp;studiază")<br><br>class&nbsp;WorkingStudent(Employee,&nbsp;Student):&nbsp;&nbsp;#&nbsp;Moștenire&nbsp;de&nbsp;la&nbsp;clasele&nbsp;Employee&nbsp;și&nbsp;Student<br>&nbsp;&nbsp;&nbsp;pass<br><br>#&nbsp;clasa&nbsp;studentului&nbsp;care&nbsp;lucrează<br>tom&nbsp;=&nbsp;WorkingStudent()<br>tom.work()&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;#&nbsp;Angajatul&nbsp;lucrează<br>tom.study()&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;#&nbsp;Studentul&nbsp;studiază</code></pre>
     </div>
     <p class="paragraph">Aici este definită clasa Employee, care reprezintă un angajat, și clasa Student, care reprezintă un student. Clasa WorkingStudent, care reprezintă un student care lucrează, nu definește nicio funcționalitate, de aceea are operatorul pass. Clasa WorkingStudent doar moștenește funcționalitatea de la cele două clase Employee și Student. Prin urmare, putem apela metodele ambelor clase pentru un obiect al acestei clase.</p>
     <p class="paragraph">În același timp, clasele moștenite pot fi mai complexe funcțional, de exemplu:</p>
     <div class="code-inline">
      <pre><code>class&nbsp;Employee:<br>&nbsp;&nbsp;&nbsp;def&nbsp;__init__(self,&nbsp;name):<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;self.__name&nbsp;=&nbsp;name<br><br>&nbsp;&nbsp;&nbsp;&nbsp;@property<br>&nbsp;&nbsp;&nbsp;def&nbsp;name(self):<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;self.__name<br><br>&nbsp;&nbsp;&nbsp;def&nbsp;work(self):<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;print(f"{self.name}&nbsp;lucrează")<br><br>class&nbsp;Student:<br>&nbsp;&nbsp;&nbsp;def&nbsp;__init__(self,&nbsp;name):<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;self.__name&nbsp;=&nbsp;name<br><br>&nbsp;&nbsp;&nbsp;&nbsp;@property<br>&nbsp;&nbsp;&nbsp;def&nbsp;name(self):<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;self.__name<br><br>&nbsp;&nbsp;&nbsp;def&nbsp;study(self):<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;print(f"{self.name}&nbsp;studiază")<br><br>class&nbsp;WorkingStudent(Employee,&nbsp;Student):<br>&nbsp;&nbsp;&nbsp;pass<br><br>tom&nbsp;=&nbsp;WorkingStudent("Tom")<br>tom.work()&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;#&nbsp;Tom&nbsp;lucrează<br>tom.study()&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;#&nbsp;Tom&nbsp;studiază</code></pre>
     </div>
     <p class="paragraph">Moștenirea multiplă poate părea convenabilă, totuși poate duce la confuzie dacă ambele clase moștenite conțin metode/atribute cu aceleași nume. De exemplu:</p>
     <div class="code-inline">
      <pre><code>class&nbsp;Employee:<br>&nbsp;&nbsp;&nbsp;def&nbsp;do(self):<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;print("Angajatul&nbsp;lucrează")<br>&nbsp;<br>class&nbsp;Student:<br>&nbsp;&nbsp;&nbsp;def&nbsp;do(self):<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;print("Studentul&nbsp;studiază")<br>&nbsp;<br>class&nbsp;WorkingStudent(Employee,&nbsp;Student):<br>&nbsp;&nbsp;&nbsp;pass<br><br>tom&nbsp;=&nbsp;WorkingStudent()<br>tom.do()&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;#&nbsp;?</code></pre>
     </div>
     <p class="paragraph">Ambele clase de bază - Employee și Student - definesc metoda do, care afișează șiruri diferite pe consolă. Ce implementare va folosi clasa moștenitoare WorkingStudent? La definirea clasei, primul în lista claselor de bază este clasa Employee:</p>
     <div class="code-inline">
      <pre><code>class&nbsp;WorkingStudent(Employee,&nbsp;Student)</code></pre>
     </div>
     <p class="paragraph">Prin urmare, implementarea metodei do va fi luată din clasa Employee.</p>
     <p class="paragraph">Dacă am schimba ordinea claselor: atunci ar fi folosită implementarea din clasa Student.</p>
     <div class="code-inline">
      <pre><code>class&nbsp;WorkingStudent(Student,&nbsp;Employee)</code></pre>
     </div>
     <p class="paragraph">Dacă este necesar, putem programa ordinea aplicării funcționalității claselor de bază. Pentru aceasta se folosește atributul __mro__ sau metoda mro():</p>
     <div class="code-inline">
      <pre><code>print(WorkingStudent.__mro__)<br>print(WorkingStudent.mro())</code></pre>
     </div>
    </div>
   </main>
   <aside class="ad-section">
    <div class="ad-box">
     <p>Google Ad Here</p>
    </div>
    <div class="ad-box">
     <p>Promo: SQL Beginner Guide</p>
    </div>
   </aside>
  </div>
  <div class="lesson-navigation">
   <th:block th:if="${previousLesson != null}">
    <a th:href="@{'/lectii/' +
            ${#strings.toLowerCase(#strings.replace(previousLesson.chapter.topic.name, ' ', '-'))} + '/' +
            ${#strings.toLowerCase(#strings.replace(previousLesson.chapter.title, ' ', '-'))} + '/' +
            ${#strings.toLowerCase(#strings.replace(previousLesson.title, ' ', '-'))} }" class="nav-button">← Lecția anterioară</a>
   </th:block> <th:block th:if="${nextLesson != null}">
    <a th:href="@{'/lectii/' +
            ${#strings.toLowerCase(#strings.replace(nextLesson.chapter.topic.name, ' ', '-'))} + '/' +
            ${#strings.toLowerCase(#strings.replace(nextLesson.chapter.title, ' ', '-'))} + '/' +
            ${#strings.toLowerCase(#strings.replace(nextLesson.title, ' ', '-'))} }" class="nav-button">Lecția următoare →</a>
   </th:block>
  </div>
  <div th:replace="~{fragments/footer :: footer}"></div>
  <script th:src="@{/js/script.js}" defer></script>
 </body>
</html>
