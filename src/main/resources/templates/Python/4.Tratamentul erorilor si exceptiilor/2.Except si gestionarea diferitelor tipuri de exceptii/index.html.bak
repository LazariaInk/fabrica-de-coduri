<!doctype html>
<html lang="ro" xmlns:th="http://www.w3.org/1999/xhtml">
 <head>
    <link rel="icon" type="image/png" href="/nume-aplicatie/images/favicon.png">
    <script async src="https://www.googletagmanager.com/gtag/js?id=G-7Q2536ZKL2"></script>
    <script>
      window.dataLayer = window.dataLayer || [];
      window.gtag = function () { dataLayer.push(arguments); };
      gtag('consent', 'default', {
        'wait_for_update': 500,
        'region': ['RO'],
        'ad_storage': 'denied',
        'analytics_storage': 'denied',
        'ad_user_data': 'denied',
        'ad_personalization': 'denied'
      });
      gtag('js', new Date());
      gtag('config', 'G-7Q2536ZKL2');
    </script>


  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title th:text="${lesson.title}">Lesson</title>
  <link rel="stylesheet" th:href="@{/css/styles.css}">
  <style>body { background: #ffffff; }</style>
 </head>
 <body th:with="activeTopic='Python', activeChapter='4.Tratamentul erorilor si exceptiilor', activeLesson='2.Except si gestionarea diferitelor tipuri de exceptii'">
  <button class="mobile-sidebar-toggle" onclick="toggleMobileSidebar()">☰</button>
  <div th:replace="~{fragments/nav :: nav}"></div>
  <div class="top-nav">
   <th:block th:each="topic : ${topics}">
    <a th:href="@{'/lectii/topic/' + ${topic.id}}" th:text="${topic.name}" th:classappend="${topic.id} == ${activeTopicId} ? 'active' : ''"> </a>
   </th:block>
  </div>
  <div class="layout">
   <div class="mobile-sidebar" id="mobileSidebar">
    <button class="close-btn" onclick="toggleSidebar()">✖</button>
    <ul class="chapter-list">
     <th:block th:each="chapter : ${chapters}">
      <li class="chapter-item" th:classappend="${chapter.id} == ${activeChapterId} ? 'open' : ''">
       <div class="chapter-title" onclick="toggleChapter(this)">
        <strong th:text="${chapter.title}"></strong> <span class="arrow">▼</span>
       </div>
       <ul class="lesson-list">
        <th:block th:each="lesson : ${chapter.lessons}">
         <li><a th:href="@{'/lessons/' +
    ${#strings.toLowerCase(#strings.replace(chapter.topic.name, ' ', '-'))} + '/' +
    ${#strings.toLowerCase(#strings.replace(chapter.title, ' ', '-'))} + '/' +
    ${#strings.toLowerCase(#strings.replace(lesson.title, ' ', '-'))} }" th:text="${lesson.title}" th:classappend="${lesson.id} == ${activeLessonId} ? 'active' : ''"> </a></li>
        </th:block>
       </ul></li>
     </th:block>
    </ul>
   </div>
   <aside class="sidebar">
    <ul class="sidebar-list">
     <th:block th:each="chapter : ${chapters}">
      <li class="chapter-item" th:classappend="${chapter.id} == ${activeChapterId} ? 'open' : ''">
       <div class="chapter-toggle" onclick="toggleLessons(this)">
        <span th:text="${chapter.title}">Chapter</span>
       </div>
       <ul class="lesson-list hidden">
        <th:block th:each="lesson : ${chapter.lessons}">
         <li><a th:href="@{'/lessons/' +
    ${#strings.toLowerCase(#strings.replace(chapter.topic.name, ' ', '-'))} + '/' +
    ${#strings.toLowerCase(#strings.replace(chapter.title, ' ', '-'))} + '/' +
    ${#strings.toLowerCase(#strings.replace(lesson.title, ' ', '-'))} }" th:text="${lesson.title}" th:classappend="${lesson.id} == ${activeLessonId} ? 'active' : ''"> </a></li>
        </th:block>
       </ul></li>
     </th:block>
    </ul>
   </aside>
   <main class="content">
    <div class="document-container">
     <h1 class="main-title">Except și gestionarea diferitelor tipuri de excepții</h1>
     <h2 class="subtitle">Tipuri de excepții încorporate</h2>
     <p class="paragraph">În exemplul de mai sus, toate excepțiile care ar putea apărea în cod au fost gestionate simultan. Cu toate acestea, putem specifica tipul de excepție pe care dorim să-l gestionăm, indicându-l după cuvântul except:</p>
     <div class="code-inline">
      <pre><code>try:<br>&nbsp;&nbsp;&nbsp;number&nbsp;=&nbsp;int(input("Introduceți&nbsp;un&nbsp;număr:&nbsp;"))<br>&nbsp;&nbsp;&nbsp;print("Numărul&nbsp;introdus:",&nbsp;number)<br>except&nbsp;ValueError:<br>&nbsp;&nbsp;&nbsp;print("Conversia&nbsp;a&nbsp;eșuat")<br>print("Finalizarea&nbsp;programului")</code></pre>
     </div>
     <p class="paragraph">În acest caz, blocul except gestionează doar excepțiile de tip ValueError, care pot apărea în urma unei conversii nereușite a șirului într-un număr.</p>
     <p class="paragraph">Tipuri de excepții de bază în Python:</p>
     <ul class="enumeration">
      <li>BaseException: tip de bază pentru toate excepțiile încorporate.</li>
      <li>Exception: tip de bază, utilizat de obicei pentru crearea propriilor tipuri de excepții.</li>
      <li>ArithmeticError: tip de bază pentru excepțiile legate de operațiile aritmetice (de exemplu, OverflowError, ZeroDivisionError, FloatingPointError).</li>
      <li>BufferError: excepție care apare atunci când nu se poate efectua o operațiune cu bufferul.</li>
      <li>LookupError: tip de bază pentru excepțiile care apar atunci când se face referire la un element dintr-o colecție folosind o cheie sau un index incorect (de exemplu, IndexError, KeyError).</li>
     </ul>
     <p class="paragraph">Toate tipurile specifice de excepții sunt derivate din aceste clase de bază.</p>
     <p class="paragraph">Python are o listă extinsă de excepții încorporate. Iată câteva dintre cele mai frecvent întâlnite:</p>
     <ul class="enumeration">
      <li>IndexError: apare atunci când indexul folosit pentru accesarea unui element dintr-o colecție este în afara intervalului permis.</li>
      <li>KeyError: apare atunci când o cheie nu este prezentă în dicționar.</li>
      <li>OverflowError: apare atunci când rezultatul unei operații aritmetice nu poate fi reprezentat de tipul numeric curent (de obicei tipul float).</li>
      <li>RecursionError: apare atunci când se depășește adâncimea permisă a recursiei.</li>
      <li>TypeError: apare atunci când o operație sau o funcție este aplicată unei valori de tip incorect.</li>
      <li>ValueError: apare atunci când o operație sau o funcție primește un obiect de tip corect, dar cu o valoare incorectă.</li>
      <li>ZeroDivisionError: apare la împărțirea la zero.</li>
      <li>NotImplementedError: indică faptul că anumite metode ale unei clase nu sunt implementate.</li>
      <li>ModuleNotFoundError: apare atunci când nu se găsește un modul la importul său.</li>
      <li>OSError: tip de excepție generată de erori de sistem (de exemplu, când nu se poate găsi un fișier, memoria discului este plină etc.).</li>
     </ul>
     <p class="paragraph">Dacă programul poate genera mai multe tipuri de excepții, le putem gestiona separat, folosind expresii except suplimentare. Când apare o excepție, Python va căuta blocul except corespunzător care gestionează tipul respectiv de excepție:</p>
     <div class="code-inline">
      <pre><code>try:<br>&nbsp;&nbsp;&nbsp;number1&nbsp;=&nbsp;int(input("Introduceți&nbsp;primul&nbsp;număr:&nbsp;"))<br>&nbsp;&nbsp;&nbsp;number2&nbsp;=&nbsp;int(input("Introduceți&nbsp;al&nbsp;doilea&nbsp;număr:&nbsp;"))<br>&nbsp;&nbsp;&nbsp;print("Rezultatul&nbsp;împărțirii:",&nbsp;number1&nbsp;/&nbsp;number2)<br>except&nbsp;ValueError:<br>&nbsp;&nbsp;&nbsp;print("Conversia&nbsp;a&nbsp;eșuat")<br>except&nbsp;ZeroDivisionError:<br>&nbsp;&nbsp;&nbsp;print("Împărțire&nbsp;la&nbsp;zero")<br>except&nbsp;BaseException:<br>&nbsp;&nbsp;&nbsp;print("Excepție&nbsp;generală")<br>print("Finalizarea&nbsp;programului")</code></pre>
     </div>
     <p class="paragraph">Dacă apare o excepție în urma conversiei șirului într-un număr, aceasta va fi gestionată de blocul except ValueError. Dacă al doilea număr este zero, adică dacă se încearcă împărțirea la zero, va apărea o excepție ZeroDivisionError, care va fi gestionată de blocul except ZeroDivisionError.</p>
     <p class="paragraph">Tipul BaseException reprezintă o excepție generală, sub care intră toate situațiile excepționale. Astfel, în exemplul de mai sus, orice excepție care nu este de tip ValueError sau ZeroDivisionError va fi gestionată de blocul except BaseException.</p>
     <p class="paragraph">Totuși, dacă în program apare o excepție pentru care nu există un bloc except corespunzător, programul nu va găsi un bloc except adecvat și va genera o excepție. De exemplu:</p>
     <div class="code-inline">
      <pre><code>try:<br>&nbsp;&nbsp;&nbsp;number1&nbsp;=&nbsp;int(input("Introduceți&nbsp;primul&nbsp;număr:&nbsp;"))<br>&nbsp;&nbsp;&nbsp;number2&nbsp;=&nbsp;int(input("Introduceți&nbsp;al&nbsp;doilea&nbsp;număr:&nbsp;"))<br>&nbsp;&nbsp;&nbsp;print("Rezultatul&nbsp;împărțirii:",&nbsp;number1&nbsp;/&nbsp;number2)<br>except&nbsp;ZeroDivisionError:<br>&nbsp;&nbsp;&nbsp;print("Împărțire&nbsp;la&nbsp;zero")<br>print("Finalizarea&nbsp;programului")</code></pre>
     </div>
     <p class="paragraph">Aici este prevăzută gestionarea împărțirii la zero cu ajutorul blocului except ZeroDivisionError. Totuși, dacă utilizatorul introduce în loc de număr un șir care nu poate fi convertit într-un număr, va apărea o excepție de tip ValueError, pentru care nu există un bloc except corespunzător. Prin urmare, programul se va încheia brusc.</p>
     <p class="paragraph">Python permite gestionarea mai multor tipuri de excepții într-un singur bloc except. În acest caz, toate tipurile de excepții sunt indicate între paranteze:</p>
     <div class="code-inline">
      <pre><code>try:<br>&nbsp;&nbsp;&nbsp;number1&nbsp;=&nbsp;int(input("Introduceți&nbsp;primul&nbsp;număr:&nbsp;"))<br>&nbsp;&nbsp;&nbsp;number2&nbsp;=&nbsp;int(input("Introduceți&nbsp;al&nbsp;doilea&nbsp;număr:&nbsp;"))<br>&nbsp;&nbsp;&nbsp;print("Rezultatul&nbsp;împărțirii:",&nbsp;number1&nbsp;/&nbsp;number2)<br>except&nbsp;(ZeroDivisionError,&nbsp;ValueError):&nbsp;&nbsp;#&nbsp;gestionarea&nbsp;a&nbsp;două&nbsp;tipuri&nbsp;de&nbsp;excepții&nbsp;-&nbsp;ZeroDivisionError&nbsp;și&nbsp;ValueError<br>&nbsp;&nbsp;&nbsp;print("Împărțire&nbsp;la&nbsp;zero&nbsp;sau&nbsp;introducere&nbsp;incorectă")<br><br>print("Finalizarea&nbsp;programului")</code></pre>
     </div>
     <h2 class="subtitle">Obținerea informațiilor despre excepții.</h2>
     <p class="paragraph">Cu ajutorul operatorului as, putem transmite toate informațiile despre excepție într-o variabilă, pe care apoi o putem folosi în blocul except:</p>
     <div class="code-inline">
      <pre><code>try:<br>&nbsp;&nbsp;&nbsp;number&nbsp;=&nbsp;int(input("Introduceți&nbsp;un&nbsp;număr:&nbsp;"))<br>&nbsp;&nbsp;&nbsp;print("Numărul&nbsp;introdus:",&nbsp;number)<br>except&nbsp;ValueError&nbsp;as&nbsp;e:<br>&nbsp;&nbsp;&nbsp;print("Informații&nbsp;despre&nbsp;excepție:",&nbsp;e)<br>print("Finalizarea&nbsp;programului")</code></pre>
     </div>
     <p class="paragraph">Exemplu de introducere incorectă:</p>
     <div class="code-inline">
      <pre><code>Introduceți&nbsp;un&nbsp;număr:&nbsp;fdsf<br>Informații&nbsp;despre&nbsp;excepție:&nbsp;invalid&nbsp;literal&nbsp;for&nbsp;int()&nbsp;with&nbsp;base&nbsp;10:&nbsp;'fdsf'<br>Finalizarea&nbsp;programului</code></pre>
     </div>
    </div>
   </main>
   <aside class="ad-section">
    <div class="ad-box">
     <p>Google Ad Here</p>
    </div>
    <div class="ad-box">
     <p>Promo: SQL Beginner Guide</p>
    </div>
   </aside>
  </div>
  <div class="lesson-navigation">
   <th:block th:if="${previousLesson != null}">
    <a th:href="@{'/lessons/' +
            ${#strings.toLowerCase(#strings.replace(previousLesson.chapter.topic.name, ' ', '-'))} + '/' +
            ${#strings.toLowerCase(#strings.replace(previousLesson.chapter.title, ' ', '-'))} + '/' +
            ${#strings.toLowerCase(#strings.replace(previousLesson.title, ' ', '-'))} }" class="nav-button">← Lecția anterioară</a>
   </th:block> <th:block th:if="${nextLesson != null}">
    <a th:href="@{'/lessons/' +
            ${#strings.toLowerCase(#strings.replace(nextLesson.chapter.topic.name, ' ', '-'))} + '/' +
            ${#strings.toLowerCase(#strings.replace(nextLesson.chapter.title, ' ', '-'))} + '/' +
            ${#strings.toLowerCase(#strings.replace(nextLesson.title, ' ', '-'))} }" class="nav-button">Lecția următoare →</a>
   </th:block>
  </div>
  <div th:replace="~{fragments/footer :: footer}"></div>
  <script th:src="@{/js/script.js}" defer></script>
 </body>
</html>
