<!doctype html>
<html lang="ro" xmlns:th="http://www.w3.org/1999/xhtml">
 <head>
    <script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-4253419731329045"
            crossorigin="anonymous"></script>


  <link rel="canonical" th:href="${canonicalUrl}" />

    <link rel="icon" type="image/png" href="/nume-aplicatie/images/favicon.png">
    <script async src="https://www.googletagmanager.com/gtag/js?id=G-7Q2536ZKL2"></script>
    <script>
      window.dataLayer = window.dataLayer || [];
      window.gtag = function () { dataLayer.push(arguments); };
      gtag('consent', 'default', {
        'wait_for_update': 500,
        'region': ['RO'],
        'ad_storage': 'denied',
        'analytics_storage': 'denied',
        'ad_user_data': 'denied',
        'ad_personalization': 'denied'
      });
      gtag('js', new Date());
      gtag('config', 'G-7Q2536ZKL2');
    </script>


  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title th:text="${lesson.title}">Lesson</title>
  <link rel="stylesheet" th:href="@{/css/styles.css}">
  <style>body { background: #ffffff; }</style>
 </head>
 <body th:with="activeTopic='Python', activeChapter='5.Liste, tupluri si dictionare', activeLesson='5.Multimi'">
  <button class="mobile-sidebar-toggle" onclick="toggleMobileSidebar()">☰</button>
  <div th:replace="~{fragments/nav :: nav}"></div>
  <div class="top-nav">
   <th:block th:each="topic : ${topics}">
    <a th:href="@{'/lectii/topic/' + ${topic.id}}" th:text="${topic.name}" th:classappend="${topic.id} == ${activeTopicId} ? 'active' : ''"> </a>
   </th:block>
  </div>
  <div class="layout">
   <div class="mobile-sidebar" id="mobileSidebar">
    <button class="close-btn" onclick="toggleSidebar()">✖</button>
    <ul class="chapter-list">
     <th:block th:each="chapter : ${chapters}">
      <li class="chapter-item" th:classappend="${chapter.id} == ${activeChapterId} ? 'open' : ''">
       <div class="chapter-title" onclick="toggleChapter(this)">
        <strong th:text="${chapter.title}"></strong> <span class="arrow">▼</span>
       </div>
       <ul class="lesson-list">
        <th:block th:each="lesson : ${chapter.lessons}">
         <li><a th:href="@{'/lectii/' +
    ${#strings.toLowerCase(#strings.replace(chapter.topic.name, ' ', '-'))} + '/' +
    ${#strings.toLowerCase(#strings.replace(chapter.title, ' ', '-'))} + '/' +
    ${#strings.toLowerCase(#strings.replace(lesson.title, ' ', '-'))} }" th:text="${lesson.title}" th:classappend="${lesson.id} == ${activeLessonId} ? 'active' : ''"> </a></li>
        </th:block>
       </ul></li>
     </th:block>
    </ul>
   </div>
   <aside class="sidebar">
    <ul class="sidebar-list">
     <th:block th:each="chapter : ${chapters}">
      <li class="chapter-item" th:classappend="${chapter.id} == ${activeChapterId} ? 'open' : ''">
       <div class="chapter-toggle" onclick="toggleLessons(this)">
        <span th:text="${chapter.title}">Chapter</span>
       </div>
       <ul class="lesson-list hidden">
        <th:block th:each="lesson : ${chapter.lessons}">
         <li><a th:href="@{'/lectii/' +
    ${#strings.toLowerCase(#strings.replace(chapter.topic.name, ' ', '-'))} + '/' +
    ${#strings.toLowerCase(#strings.replace(chapter.title, ' ', '-'))} + '/' +
    ${#strings.toLowerCase(#strings.replace(lesson.title, ' ', '-'))} }" th:text="${lesson.title}" th:classappend="${lesson.id} == ${activeLessonId} ? 'active' : ''"> </a></li>
        </th:block>
       </ul></li>
     </th:block>
    </ul>
   </aside>
   <main class="content">
    <div class="document-container">
     <h1 class="main-title">Mulțimi</h1>
     <p class="paragraph">Mulțimea (set) reprezintă un alt tip de colecție care stochează doar elemente unice. Pentru a defini o mulțime, se folosesc acolade în care sunt enumerate elementele:</p>
     <div class="code-inline">
      <pre><code>users&nbsp;=&nbsp;{"Tom",&nbsp;"Bob",&nbsp;"Alice",&nbsp;"Tom"}<br>print(users)&nbsp;&nbsp;&nbsp;&nbsp;#&nbsp;{"Alice",&nbsp;"Bob",&nbsp;"Tom"}</code></pre>
     </div>
     <p class="paragraph">Observați că, deși funcția print a afișat elementul "Tom" o singură dată, deși acesta este prezent de două ori în definiția mulțimii. Acest lucru se datorează faptului că mulțimea conține doar valori unice.</p>
     <p class="paragraph">De asemenea, pentru a defini o mulțime poate fi utilizată funcția set(), în care se transmite o listă sau un tuplu de elemente:</p>
     <div class="code-inline">
      <pre><code>people&nbsp;=&nbsp;["Mike",&nbsp;"Bill",&nbsp;"Ted"]<br>users&nbsp;=&nbsp;set(people)<br>print(users)&nbsp;&nbsp;&nbsp;&nbsp;#&nbsp;{"Mike",&nbsp;"Bill",&nbsp;"Ted"}</code></pre>
     </div>
     <p class="paragraph">Funcția set este convenabilă pentru crearea unei mulțimi goale:</p>
     <div class="code-inline">
      <pre><code>users&nbsp;=&nbsp;set()</code></pre>
     </div>
     <p class="paragraph">Pentru a obține lungimea mulțimii se folosește funcția integrată len():</p>
     <div class="code-inline">
      <pre><code>users&nbsp;=&nbsp;{"Tom",&nbsp;"Bob",&nbsp;"Alice"}<br>print(len(users))&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;#&nbsp;3</code></pre>
     </div>
     <h2 class="subtitle">Adăugarea elementelor</h2>
     <p class="paragraph">Pentru adăugarea unui singur element se folosește metoda add():</p>
     <div class="code-inline">
      <pre><code>users&nbsp;=&nbsp;set()<br>users.add("Sam")<br>print(users)</code></pre>
     </div>
     <h2 class="subtitle">Ștergerea elementelor</h2>
     <p class="paragraph">Pentru ștergerea unui element se folosește metoda remove(), căreia i se transmite elementul de șters. Dar trebuie să ținem cont că, dacă un astfel de element nu se află în mulțime, va fi generată o eroare. De aceea, înainte de ștergere, este recomandat să verificăm existența elementului folosind operatorul in:</p>
     <div class="code-inline">
      <pre><code>users&nbsp;=&nbsp;{"Tom",&nbsp;"Bob",&nbsp;"Alice"}<br><br>user&nbsp;=&nbsp;"Tom"<br>if&nbsp;user&nbsp;in&nbsp;users:<br>&nbsp;&nbsp;&nbsp;users.remove(user)<br>print(users)&nbsp;&nbsp;&nbsp;&nbsp;#&nbsp;{"Bob",&nbsp;"Alice"}</code></pre>
     </div>
     <p class="paragraph">De asemenea, pentru ștergere poate fi utilizată metoda discard(), care nu va genera excepții în cazul absenței elementului:</p>
     <div class="code-inline">
      <pre><code>users&nbsp;=&nbsp;{"Tom",&nbsp;"Bob",&nbsp;"Alice"}<br><br>users.discard("Tim")&nbsp;&nbsp;&nbsp;&nbsp;#&nbsp;elementul&nbsp;"Tim"&nbsp;lipsește,&nbsp;iar&nbsp;metoda&nbsp;nu&nbsp;face&nbsp;nimic<br>print(users)&nbsp;&nbsp;&nbsp;&nbsp;#&nbsp;&nbsp;{"Tom",&nbsp;"Bob",&nbsp;"Alice"}<br><br>users.discard("Tom")&nbsp;&nbsp;&nbsp;&nbsp;#&nbsp;elementul&nbsp;"Tom"&nbsp;este&nbsp;prezent,&nbsp;iar&nbsp;metoda&nbsp;îl&nbsp;șterge<br>print(users)&nbsp;&nbsp;&nbsp;&nbsp;#&nbsp;&nbsp;{"Bob",&nbsp;"Alice"}</code></pre>
     </div>
     <p class="paragraph">Pentru a șterge toate elementele se folosește metoda clear():</p>
     <div class="code-inline">
      <pre><code>users.clear()</code></pre>
     </div>
     <h2 class="subtitle">Parcurgerea mulțimii</h2>
     <p class="paragraph">Pentru a parcurge elementele se poate folosi ciclul for:</p>
     <div class="code-inline">
      <pre><code>users&nbsp;=&nbsp;{"Tom",&nbsp;"Bob",&nbsp;"Alice"}<br><br>for&nbsp;user&nbsp;in&nbsp;users:<br>&nbsp;&nbsp;&nbsp;print(user)</code></pre>
     </div>
     <p class="paragraph">La parcurgere, fiecare element este plasat în variabila user.</p>
     <h2 class="subtitle">Operații cu mulțimi</h2>
     <p class="paragraph">Cu ajutorul metodei copy() putem copia conținutul unei mulțimi într-o altă variabilă:</p>
     <div class="code-inline">
      <pre><code>users&nbsp;=&nbsp;{"Tom",&nbsp;"Bob",&nbsp;"Alice"}<br>students&nbsp;=&nbsp;users.copy()<br>print(students)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;#&nbsp;{"Tom",&nbsp;"Bob",&nbsp;"Alice"}</code></pre>
     </div>
     <h2 class="subtitle">Unirea mulțimilor</h2>
     <p class="paragraph">Metoda union() unește două mulțimi și returnează o nouă mulțime:</p>
     <div class="code-inline">
      <pre><code>users&nbsp;=&nbsp;{"Tom",&nbsp;"Bob",&nbsp;"Alice"}<br>users2&nbsp;=&nbsp;{"Sam",&nbsp;"Kate",&nbsp;"Bob"}<br><br>users3&nbsp;=&nbsp;users.union(users2)<br>print(users3)&nbsp;&nbsp;&nbsp;#&nbsp;{"Bob",&nbsp;"Alice",&nbsp;"Sam",&nbsp;"Kate",&nbsp;"Tom"}</code></pre>
     </div>
     <p class="paragraph">În locul metodei union() am putea folosi operația de adunare logică - |:</p>
     <div class="code-inline">
      <pre><code>users&nbsp;=&nbsp;{"Tom",&nbsp;"Bob",&nbsp;"Alice"}<br>users2&nbsp;=&nbsp;{"Sam",&nbsp;"Kate",&nbsp;"Bob"}<br><br>print(users&nbsp;|&nbsp;users2)&nbsp;&nbsp;&nbsp;#&nbsp;{"Bob",&nbsp;"Alice",&nbsp;"Sam",&nbsp;"Kate",&nbsp;"Tom"}</code></pre>
     </div>
     <h2 class="subtitle">Intersecția mulțimilor</h2>
     <p class="paragraph">Intersecția mulțimilor permite obținerea doar a acelor elemente care sunt simultan în ambele mulțimi. Metoda intersection() realizează operația de intersecție a mulțimilor și returnează o nouă mulțime:</p>
     <div class="code-inline">
      <pre><code>users&nbsp;=&nbsp;{"Tom",&nbsp;"Bob",&nbsp;"Alice"}<br>users2&nbsp;=&nbsp;{"Sam",&nbsp;"Kate",&nbsp;"Bob"}<br><br>users3&nbsp;=&nbsp;users.intersection(users2)<br>print(users3)&nbsp;&nbsp;&nbsp;#&nbsp;{"Bob"}</code></pre>
     </div>
     <p class="paragraph">În locul metodei intersection am putea folosi operația de înmulțire logică:</p>
     <div class="code-inline">
      <pre><code>users&nbsp;=&nbsp;{"Tom",&nbsp;"Bob",&nbsp;"Alice"}<br>users2&nbsp;=&nbsp;{"Sam",&nbsp;"Kate",&nbsp;"Bob"}<br><br>print(users&nbsp;&amp;&nbsp;users2)&nbsp;&nbsp;&nbsp;#&nbsp;{"Bob"}</code></pre>
     </div>
     <p class="paragraph">În acest caz am obține același rezultat.</p>
     <p class="paragraph">Modificarea metodei - intersection_update() înlocuiește elementele intersecției în prima mulțime:</p>
     <div class="code-inline">
      <pre><code>users&nbsp;=&nbsp;{"Tom",&nbsp;"Bob",&nbsp;"Alice"}<br>users2&nbsp;=&nbsp;{"Sam",&nbsp;"Kate",&nbsp;"Bob"}<br>users.intersection_update(users2)<br>print(users)&nbsp;&nbsp;&nbsp;#&nbsp;{"Bob"}</code></pre>
     </div>
     <h2 class="subtitle">Diferența dintre mulțimi</h2>
     <p class="paragraph">O altă operație - diferența dintre mulțimi returnează acele elemente care sunt în prima mulțime, dar lipsesc în a doua. Pentru a obține diferența dintre mulțimi putem folosi metoda difference sau operația de scădere:</p>
     <div class="code-inline">
      <pre><code>users&nbsp;=&nbsp;{"Tom",&nbsp;"Bob",&nbsp;"Alice"}<br>users2&nbsp;=&nbsp;{"Sam",&nbsp;"Kate",&nbsp;"Bob"}<br><br>users3&nbsp;=&nbsp;users.difference(users2)<br>print(users3)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;#&nbsp;{"Tom",&nbsp;"Alice"}<br>print(users&nbsp;-&nbsp;users2)&nbsp;&nbsp;&nbsp;#&nbsp;{"Tom",&nbsp;"Alice"}</code></pre>
     </div>
     <p class="paragraph">O varietate specială a diferenței dintre mulțimi - diferența simetrică se realizează cu ajutorul metodei symmetric_difference() sau cu ajutorul operației ^. Aceasta returnează toate elementele ambelor mulțimi, cu excepția celor comune:</p>
     <div class="code-inline">
      <pre><code>users&nbsp;=&nbsp;{"Tom",&nbsp;"Bob",&nbsp;"Alice"}<br>users2&nbsp;=&nbsp;{"Sam",&nbsp;"Kate",&nbsp;"Bob"}<br><br>users3&nbsp;=&nbsp;users.symmetric_difference(users2)<br>print(users3)&nbsp;&nbsp;&nbsp;#&nbsp;{"Tom",&nbsp;"Alice",&nbsp;"Sam",&nbsp;"Kate"}<br><br>users4&nbsp;=&nbsp;users&nbsp;^&nbsp;users2<br>print(users4)&nbsp;&nbsp;&nbsp;#&nbsp;{"Tom",&nbsp;"Alice",&nbsp;"Sam",&nbsp;"Kate"}</code></pre>
     </div>
     <h2 class="subtitle">Relațiile dintre mulțimi</h2>
     <p class="paragraph">Metoda issubset permite verificarea dacă mulțimea curentă este un submulțimă (adică o parte) a unei alte mulțimi:</p>
     <div class="code-inline">
      <pre><code>users&nbsp;=&nbsp;{"Tom",&nbsp;"Bob",&nbsp;"Alice"}<br>superusers&nbsp;=&nbsp;{"Sam",&nbsp;"Tom",&nbsp;"Bob",&nbsp;"Alice",&nbsp;"Greg"}<br><br>print(users.issubset(superusers))&nbsp;&nbsp;&nbsp;#&nbsp;True<br>print(superusers.issubset(users))&nbsp;&nbsp;&nbsp;#&nbsp;False</code></pre>
     </div>
     <p class="paragraph">Metoda issuperset, dimpotrivă, returnează True dacă mulțimea curentă este un supermulțime (adică conține) pentru o altă mulțime:</p>
     <div class="code-inline">
      <pre><code>users&nbsp;=&nbsp;{"Tom",&nbsp;"Bob",&nbsp;"Alice"}<br>superusers&nbsp;=&nbsp;{"Sam",&nbsp;"Tom",&nbsp;"Bob",&nbsp;"Alice",&nbsp;"Greg"}<br><br>print(users.issuperset(superusers))&nbsp;&nbsp;&nbsp;#&nbsp;False<br>print(superusers.issuperset(users))&nbsp;&nbsp;&nbsp;#&nbsp;True</code></pre>
     </div>
     <h2 class="subtitle">frozen set</h2>
     <p class="paragraph">Tipul frozen set reprezintă un tip de mulțimi care nu poate fi modificat. Pentru a-l crea se folosește funcția frozenset:</p>
     <div class="code-inline">
      <pre><code>users&nbsp;=&nbsp;frozenset({"Tom",&nbsp;"Bob",&nbsp;"Alice"})</code></pre>
     </div>
     <p class="paragraph">În funcția frozenset se transmite un set de elemente - listă, tuplu, altă mulțime.</p>
     <p class="paragraph">Într-o astfel de mulțime nu putem adăuga elemente noi și nici nu putem șterge elementele existente. Din acest motiv, frozen set acceptă un set limitat de operații:</p>
     <ul class="enumeration">
      <li>len(s): returnează lungimea mulțimii</li>
      <li>x in s: returnează True dacă elementul x este prezent în mulțimea s</li>
      <li>x not in s: returnează True dacă elementul x lipsește în mulțimea s</li>
      <li>s.issubset(t): returnează True dacă t conține mulțimea s</li>
      <li>s.issuperset(t): returnează True dacă t este conținută în mulțimea s</li>
      <li>s.union(t): returnează unirea mulțimilor s și t</li>
      <li>s.intersection(t): returnează intersecția mulțimilor s și t</li>
      <li>s.difference(t): returnează diferența dintre mulțimile s și t</li>
      <li>s.copy(): returnează o copie a mulțimii s</li>
     </ul>
    </div>
   </main>
   <aside class="ad-section">
    <div class="ad-box">
     <p>Google Ad Here</p>
    </div>
    <div class="ad-box">
     <p>Promo: SQL Beginner Guide</p>
    </div>
   </aside>
  </div>
  <div class="lesson-navigation">
   <th:block th:if="${previousLesson != null}">
    <a th:href="@{'/lectii/' +
            ${#strings.toLowerCase(#strings.replace(previousLesson.chapter.topic.name, ' ', '-'))} + '/' +
            ${#strings.toLowerCase(#strings.replace(previousLesson.chapter.title, ' ', '-'))} + '/' +
            ${#strings.toLowerCase(#strings.replace(previousLesson.title, ' ', '-'))} }" class="nav-button">← Lecția anterioară</a>
   </th:block> <th:block th:if="${nextLesson != null}">
    <a th:href="@{'/lectii/' +
            ${#strings.toLowerCase(#strings.replace(nextLesson.chapter.topic.name, ' ', '-'))} + '/' +
            ${#strings.toLowerCase(#strings.replace(nextLesson.chapter.title, ' ', '-'))} + '/' +
            ${#strings.toLowerCase(#strings.replace(nextLesson.title, ' ', '-'))} }" class="nav-button">Lecția următoare →</a>
   </th:block>
  </div>
  <div th:replace="~{fragments/footer :: footer}"></div>
  <script th:src="@{/js/script.js}" defer></script>
 </body>
</html>
