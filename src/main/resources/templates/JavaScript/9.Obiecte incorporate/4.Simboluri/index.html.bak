<!doctype html>
<html lang="ro" xmlns:th="http://www.w3.org/1999/xhtml">
 <head>
    <script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-4253419731329045"
            crossorigin="anonymous"></script>


  <link rel="canonical" th:href="${canonicalUrl}" />

    <link rel="icon" type="image/png" href="/nume-aplicatie/images/favicon.png">
    <script async src="https://www.googletagmanager.com/gtag/js?id=G-7Q2536ZKL2"></script>
    <script>
      window.dataLayer = window.dataLayer || [];
      window.gtag = function () { dataLayer.push(arguments); };
      gtag('consent', 'default', {
        'wait_for_update': 500,
        'region': ['RO'],
        'ad_storage': 'denied',
        'analytics_storage': 'denied',
        'ad_user_data': 'denied',
        'ad_personalization': 'denied'
      });
      gtag('js', new Date());
      gtag('config', 'G-7Q2536ZKL2');
    </script>


  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title th:text="${lesson.title}">Lesson</title>
  <link rel="stylesheet" th:href="@{/css/styles.css}">
  <style>body { background: #ffffff; }</style>
 </head>
 <body th:with="activeTopic='JavaScript', activeChapter='9.Obiecte incorporate', activeLesson='4.Simboluri'">
  <button class="mobile-sidebar-toggle" onclick="toggleMobileSidebar()">☰</button>
  <div th:replace="~{fragments/nav :: nav}"></div>
  <div class="top-nav">
   <th:block th:each="topic : ${topics}">
    <a th:href="@{'/lectii/topic/' + ${topic.id}}" th:text="${topic.name}" th:classappend="${topic.id} == ${activeTopicId} ? 'active' : ''"> </a>
   </th:block>
  </div>
  <div class="layout">
   <div class="mobile-sidebar" id="mobileSidebar">
    <button class="close-btn" onclick="toggleSidebar()">✖</button>
    <ul class="chapter-list">
     <th:block th:each="chapter : ${chapters}">
      <li class="chapter-item" th:classappend="${chapter.id} == ${activeChapterId} ? 'open' : ''">
       <div class="chapter-title" onclick="toggleChapter(this)">
        <strong th:text="${chapter.title}"></strong> <span class="arrow">▼</span>
       </div>
       <ul class="lesson-list">
        <th:block th:each="lesson : ${chapter.lessons}">
         <li><a th:href="@{'/lectii/' +
    ${#strings.toLowerCase(#strings.replace(chapter.topic.name, ' ', '-'))} + '/' +
    ${#strings.toLowerCase(#strings.replace(chapter.title, ' ', '-'))} + '/' +
    ${#strings.toLowerCase(#strings.replace(lesson.title, ' ', '-'))} }" th:text="${lesson.title}" th:classappend="${lesson.id} == ${activeLessonId} ? 'active' : ''"> </a></li>
        </th:block>
       </ul></li>
     </th:block>
    </ul>
   </div>
   <aside class="sidebar">
    <ul class="sidebar-list">
     <th:block th:each="chapter : ${chapters}">
      <li class="chapter-item" th:classappend="${chapter.id} == ${activeChapterId} ? 'open' : ''">
       <div class="chapter-toggle" onclick="toggleLessons(this)">
        <span th:text="${chapter.title}">Chapter</span>
       </div>
       <ul class="lesson-list hidden">
        <th:block th:each="lesson : ${chapter.lessons}">
         <li><a th:href="@{'/lectii/' +
    ${#strings.toLowerCase(#strings.replace(chapter.topic.name, ' ', '-'))} + '/' +
    ${#strings.toLowerCase(#strings.replace(chapter.title, ' ', '-'))} + '/' +
    ${#strings.toLowerCase(#strings.replace(lesson.title, ' ', '-'))} }" th:text="${lesson.title}" th:classappend="${lesson.id} == ${activeLessonId} ? 'active' : ''"> </a></li>
        </th:block>
       </ul></li>
     </th:block>
    </ul>
   </aside>
   <main class="content">
    <div class="document-container">
     <h1 class="main-title">Simboluri</h1>
     <p class="paragraph">Simbolul sau tipul Symbol reprezintă o valoare unică.</p>
     <p class="paragraph">Pentru a defini un simbol, se folosește constructorul de tip Symbol. De exemplu, să creăm un simbol simplu:</p>
     <div class="code-inline">
      <pre><code>const&nbsp;tom&nbsp;=&nbsp;Symbol("Tom");<br>console.log(tom);&nbsp;&nbsp;&nbsp;//&nbsp;Symbol(Tom)</code></pre>
     </div>
     <p class="paragraph">Fiecare simbol este unic. Haideți să încercăm să creăm două simboluri identice:</p>
     <div class="code-inline">
      <pre><code>const&nbsp;tom&nbsp;=&nbsp;Symbol("Tom");<br>console.log(tom);&nbsp;&nbsp;&nbsp;//&nbsp;Symbol(Tom)<br><br>const&nbsp;tomas&nbsp;=&nbsp;Symbol("Tom");<br>console.log(tomas);&nbsp;//&nbsp;Symbol(Tom)<br><br>console.log(tom&nbsp;==&nbsp;tomas);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;false<br>console.log(tom&nbsp;===&nbsp;tomas);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;false</code></pre>
     </div>
     <h2 class="subtitle">Simbolurile ca identificatori pentru proprietățile obiectelor</h2>
     <p class="paragraph">Domeniul principal de aplicare al simbolurilor constă în definirea identificatorilor pentru proprietățile obiectelor. Cu alte cuvinte, simbolurile permit evitarea situațiilor în care mai multe proprietăți ale unui obiect au același nume.</p>
     <p class="paragraph">Această situație poate părea artificială, dar atunci când proprietățile sunt adăugate dinamic într-un program destul de mare sau într-un cod extern pe care nu-l putem controla, sarcina de a gestiona identificatorii pentru proprietăți devine mai complicată.</p>
     <p class="paragraph">Pentru exemplificare, să luăm următoarea situație: într-o companie lucrează trei programatori, dintre care unul este dezvoltator senior, iar ceilalți doi sunt dezvoltatori juniori. Cu toate acestea, cei doi dezvoltatori juniori au nume identice.</p>
     <p class="paragraph">De exemplu, unul dintre ei, Tom, este dezvoltatorul senior, în timp ce Sam și celălalt Tom sunt dezvoltatori juniori. Am putea reprezenta această companie astfel:</p>
     <div class="code-inline">
      <pre><code>const&nbsp;company&nbsp;=&nbsp;{<br>&nbsp;&nbsp;&nbsp;"Tom":&nbsp;"senior",<br>&nbsp;&nbsp;&nbsp;"Sam":&nbsp;"junior",<br>&nbsp;&nbsp;&nbsp;"Tom":&nbsp;"junior"<br>}<br>for(developer&nbsp;in&nbsp;company)&nbsp;{<br>&nbsp;&nbsp;&nbsp;console.log(`${developer}&nbsp;-&nbsp;${company[developer]}`);<br>}</code></pre>
     </div>
     <p class="paragraph">Cu toate acestea, ieșirea în consolă va arăta că în compania noastră există doar doi dezvoltatori, deoarece numele a doi dintre ei coincid:</p>
     <div class="code-inline">
      <pre><code>Tom&nbsp;-&nbsp;junior<br>Sam&nbsp;-&nbsp;junior</code></pre>
     </div>
     <p class="paragraph">Acum să aplicăm simboluri:</p>
     <div class="code-inline">
      <pre><code>const&nbsp;company&nbsp;=&nbsp;{<br>&nbsp;&nbsp;&nbsp;[Symbol("Tom")]:&nbsp;"senior",<br>&nbsp;&nbsp;&nbsp;[Symbol("Sam")]:&nbsp;"junior",<br>&nbsp;&nbsp;&nbsp;[Symbol("Tom")]:&nbsp;"junior"<br>}<br>const&nbsp;developers&nbsp;=&nbsp;Object.getOwnPropertySymbols(company);<br>for(developer&nbsp;of&nbsp;developers)&nbsp;{<br>&nbsp;&nbsp;&nbsp;console.log(`${developer.toString()}&nbsp;-&nbsp;${company[developer]}`);<br>}</code></pre>
     </div>
     <p class="paragraph">Pentru a obține toate simbolurile dintr-un obiect, se aplică funcția Object.getOwnPropertySymbols(), căreia i se furnizează obiectul. Această funcție returnează un set de simboluri pe care le putem itera într-un ciclu. Pentru a obține reprezentarea textului a simbolurilor, putem aplica metoda toString() a simbolului.</p>
     <p class="paragraph">Pentru a obține valoarea, așa cum se întâmplă în general, se aplică sintaxa de acces la elementele unui array: company[developer] .În final, vom obține următoarea ieșire în consolă:</p>
     <div class="code-inline">
      <pre><code>Symbol(Tom)&nbsp;-&nbsp;senior<br>Symbol(Sam)&nbsp;-&nbsp;junior<br>Symbol(Tom)&nbsp;-&nbsp;junior</code></pre>
     </div>
     <p class="paragraph">De asemenea, puteți adăuga dinamic proprietăți cu identificatori simbolici în obiect:</p>
     <div class="code-inline">
      <pre><code>const&nbsp;company&nbsp;=&nbsp;{&nbsp;};<br>company[Symbol("Tom")]=&nbsp;"senior";<br>company[Symbol("Sam")]=&nbsp;"junior";<br>company[Symbol("Tom")]=&nbsp;"junior";</code></pre>
     </div>
    </div>
   </main>
   <aside class="ad-section">
    <div class="ad-box">
     <p>Google Ad Here</p>
    </div>
    <div class="ad-box">
     <p>Promo: SQL Beginner Guide</p>
    </div>
   </aside>
  </div>
  <div class="lesson-navigation">
   <th:block th:if="${previousLesson != null}">
    <a th:href="@{'/lectii/' +
            ${#strings.toLowerCase(#strings.replace(previousLesson.chapter.topic.name, ' ', '-'))} + '/' +
            ${#strings.toLowerCase(#strings.replace(previousLesson.chapter.title, ' ', '-'))} + '/' +
            ${#strings.toLowerCase(#strings.replace(previousLesson.title, ' ', '-'))} }" class="nav-button">← Lecția anterioară</a>
   </th:block> <th:block th:if="${nextLesson != null}">
    <a th:href="@{'/lectii/' +
            ${#strings.toLowerCase(#strings.replace(nextLesson.chapter.topic.name, ' ', '-'))} + '/' +
            ${#strings.toLowerCase(#strings.replace(nextLesson.chapter.title, ' ', '-'))} + '/' +
            ${#strings.toLowerCase(#strings.replace(nextLesson.title, ' ', '-'))} }" class="nav-button">Lecția următoare →</a>
   </th:block>
  </div>
  <div th:replace="~{fragments/footer :: footer}"></div>
  <script th:src="@{/js/script.js}" defer></script>
 </body>
</html>
