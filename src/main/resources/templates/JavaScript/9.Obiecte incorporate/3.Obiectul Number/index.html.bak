<!doctype html>
<html lang="ro" xmlns:th="http://www.w3.org/1999/xhtml">
 <head>
    <script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-4253419731329045"
            crossorigin="anonymous"></script>


  <link rel="canonical" th:href="${canonicalUrl}" />

    <link rel="icon" type="image/png" href="/nume-aplicatie/images/favicon.png">
    <script async src="https://www.googletagmanager.com/gtag/js?id=G-7Q2536ZKL2"></script>
    <script>
      window.dataLayer = window.dataLayer || [];
      window.gtag = function () { dataLayer.push(arguments); };
      gtag('consent', 'default', {
        'wait_for_update': 500,
        'region': ['RO'],
        'ad_storage': 'denied',
        'analytics_storage': 'denied',
        'ad_user_data': 'denied',
        'ad_personalization': 'denied'
      });
      gtag('js', new Date());
      gtag('config', 'G-7Q2536ZKL2');
    </script>


  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title th:text="${lesson.title}">Lesson</title>
  <link rel="stylesheet" th:href="@{/css/styles.css}">
  <style>body { background: #ffffff; }</style>
 </head>
 <body th:with="activeTopic='JavaScript', activeChapter='9.Obiecte incorporate', activeLesson='3.Obiectul Number'">
  <button class="mobile-sidebar-toggle" onclick="toggleMobileSidebar()">☰</button>
  <div th:replace="~{fragments/nav :: nav}"></div>
  <div class="top-nav">
   <th:block th:each="topic : ${topics}">
    <a th:href="@{'/lectii/topic/' + ${topic.id}}" th:text="${topic.name}" th:classappend="${topic.id} == ${activeTopicId} ? 'active' : ''"> </a>
   </th:block>
  </div>
  <div class="layout">
   <div class="mobile-sidebar" id="mobileSidebar">
    <button class="close-btn" onclick="toggleSidebar()">✖</button>
    <ul class="chapter-list">
     <th:block th:each="chapter : ${chapters}">
      <li class="chapter-item" th:classappend="${chapter.id} == ${activeChapterId} ? 'open' : ''">
       <div class="chapter-title" onclick="toggleChapter(this)">
        <strong th:text="${chapter.title}"></strong> <span class="arrow">▼</span>
       </div>
       <ul class="lesson-list">
        <th:block th:each="lesson : ${chapter.lessons}">
         <li><a th:href="@{'/lectii/' +
    ${#strings.toLowerCase(#strings.replace(chapter.topic.name, ' ', '-'))} + '/' +
    ${#strings.toLowerCase(#strings.replace(chapter.title, ' ', '-'))} + '/' +
    ${#strings.toLowerCase(#strings.replace(lesson.title, ' ', '-'))} }" th:text="${lesson.title}" th:classappend="${lesson.id} == ${activeLessonId} ? 'active' : ''"> </a></li>
        </th:block>
       </ul></li>
     </th:block>
    </ul>
   </div>
   <aside class="sidebar">
    <ul class="sidebar-list">
     <th:block th:each="chapter : ${chapters}">
      <li class="chapter-item" th:classappend="${chapter.id} == ${activeChapterId} ? 'open' : ''">
       <div class="chapter-toggle" onclick="toggleLessons(this)">
        <span th:text="${chapter.title}">Chapter</span>
       </div>
       <ul class="lesson-list hidden">
        <th:block th:each="lesson : ${chapter.lessons}">
         <li><a th:href="@{'/lectii/' +
    ${#strings.toLowerCase(#strings.replace(chapter.topic.name, ' ', '-'))} + '/' +
    ${#strings.toLowerCase(#strings.replace(chapter.title, ' ', '-'))} + '/' +
    ${#strings.toLowerCase(#strings.replace(lesson.title, ' ', '-'))} }" th:text="${lesson.title}" th:classappend="${lesson.id} == ${activeLessonId} ? 'active' : ''"> </a></li>
        </th:block>
       </ul></li>
     </th:block>
    </ul>
   </aside>
   <main class="content">
    <div class="document-container">
     <h1 class="main-title">Obiectul Number</h1>
     <p class="paragraph">Obiectul Number reprezintă numerele. Pentru a crea un număr, trebuie să furnizezi în constructorul Number un număr sau un șir de caractere care reprezintă un număr:</p>
     <div class="code-inline">
      <pre><code>const&nbsp;x&nbsp;=&nbsp;new&nbsp;Number(34);<br>const&nbsp;y&nbsp;=&nbsp;new&nbsp;Number('34');<br>console.log(x+y);&nbsp;//&nbsp;68</code></pre>
     </div>
     <p class="paragraph">Definițiile lui x și y în acest caz vor fi practic similare.</p>
     <p class="paragraph">Cu toate acestea, un obiect Number poate fi creat și prin simpla atribuire a unei variabile cu o valoare numerică:</p>
     <div class="code-inline">
      <pre><code>const&nbsp;z&nbsp;=&nbsp;34;</code></pre>
     </div>
     <p class="paragraph">Obiectul Number furnizează o serie de proprietăți. Iată câteva dintre ele:</p>
     <ul class="enumeration">
      <li>Number.MAX_VALUE: cel mai mare număr întreg posibil. Aproximativ egal cu 1.79E+308. Numerele mai mari decât această valoare sunt considerate Infinity</li>
      <li>Number.MIN_VALUE: cel mai mic număr întreg pozitiv posibil. Aproximativ egal cu 5e-324 (aproape de zero)</li>
      <li>Number.NaN: o valoare specială care indică faptul că obiectul nu este un număr</li>
      <li>Number.NEGATIVE_INFINITY: valoare care reprezintă infinitatea negativă și apare în caz de depășire. De exemplu, dacă adunăm două numere negative cu o valoare absolută egală cu Number.MAX_VALUE. De exemplu</li>
     </ul>
     <div class="code-inline">
      <pre><code>const&nbsp;x&nbsp;=&nbsp;-1&nbsp;*&nbsp;Number.MAX_VALUE;<br>const&nbsp;y&nbsp;=&nbsp;-1&nbsp;*&nbsp;Number.MAX_VALUE;<br>const&nbsp;z&nbsp;=&nbsp;x&nbsp;+&nbsp;y;<br>if&nbsp;(z&nbsp;===&nbsp;Number.NEGATIVE_INFINITY)<br>&nbsp;&nbsp;&nbsp;console.log("Infinitate&nbsp;negativă");<br>else<br>&nbsp;&nbsp;&nbsp;console.log(z);</code></pre>
     </div>
     <ul class="enumeration">
      <li>Number.POSITIVE_INFINITY: infinitate pozitivă. La fel ca și infinitatea negativă, apare în caz de depășire, dar acum în direcția pozitivă:</li>
     </ul>
     <div class="code-inline">
      <pre><code>const&nbsp;x&nbsp;=&nbsp;Number.MAX_VALUE;<br>const&nbsp;y&nbsp;=&nbsp;Number.MAX_VALUE;<br>const&nbsp;z&nbsp;=&nbsp;x&nbsp;*&nbsp;y;<br>if&nbsp;(z&nbsp;===&nbsp;Number.POSITIVE_INFINITY)<br>&nbsp;&nbsp;&nbsp;console.log("Infinitate&nbsp;pozitivă");<br>else<br>&nbsp;&nbsp;&nbsp;console.log(z);</code></pre>
     </div>
     <p class="paragraph">Iată câteva metode de bază:</p>
     <ul class="enumeration">
      <li>isNaN(): determină dacă obiectul este un număr. Dacă obiectul nu este un număr, atunci se returnează valoarea true</li>
     </ul>
     <div class="code-inline">
      <pre><code>const&nbsp;a&nbsp;=&nbsp;Number.isNaN(Number.NaN);&nbsp;//&nbsp;true<br>const&nbsp;b&nbsp;=&nbsp;Number.isNaN(true);&nbsp;//&nbsp;false&nbsp;-&nbsp;new&nbsp;Number(true)&nbsp;=&nbsp;1<br>const&nbsp;c&nbsp;=&nbsp;Number.isNaN(null);&nbsp;&nbsp;//&nbsp;false&nbsp;-&nbsp;new&nbsp;Number(null)&nbsp;=&nbsp;0<br>const&nbsp;d&nbsp;=&nbsp;Number.isNaN(25);&nbsp;&nbsp;//&nbsp;false<br>const&nbsp;e&nbsp;=&nbsp;Number.isNaN("54");&nbsp;//&nbsp;false</code></pre>
     </div>
     <p class="paragraph">Dar următoarea expresie va returna fals, chiar dacă valoarea nu este un număr:</p>
     <div class="code-inline">
      <pre><code>const&nbsp;f&nbsp;=&nbsp;Number.isNaN("hello");&nbsp;//&nbsp;false</code></pre>
     </div>
     <p class="paragraph">Pentru a evita astfel de situații, este mai bine să folosiți funcția globală isNaN:</p>
     <div class="code-inline">
      <pre><code>const&nbsp;f&nbsp;=&nbsp;isNaN("hello");&nbsp;//&nbsp;true</code></pre>
     </div>
     <ul class="enumeration">
      <li>parseFloat(): convertește un șir de caractere într-un număr cu virgulă mobilă. De exemplu:</li>
     </ul>
     <div class="code-inline">
      <pre><code>const&nbsp;a&nbsp;=&nbsp;Number.parseFloat("34.90");&nbsp;//&nbsp;34.9<br>console.log(a);<br>const&nbsp;b&nbsp;=&nbsp;Number.parseFloat("hello");&nbsp;//&nbsp;NaN<br>console.log(b);<br>const&nbsp;c&nbsp;=&nbsp;Number.parseFloat("34hello");&nbsp;//&nbsp;34<br>console.log(c);</code></pre>
     </div>
     <ul class="enumeration">
      <li>parseInt(): convertește un șir de caractere într-un număr întreg. De exemplu:</li>
     </ul>
     <div class="code-inline">
      <pre><code>const&nbsp;a&nbsp;=&nbsp;Number.parseInt("34.90");&nbsp;//&nbsp;34<br>console.log(a);<br>const&nbsp;b&nbsp;=&nbsp;Number.parseInt("hello");&nbsp;//&nbsp;NaN<br>console.log(b);<br>const&nbsp;c&nbsp;=&nbsp;Number.parseInt("25hello");&nbsp;//&nbsp;25<br>console.log(c);</code></pre>
     </div>
     <ul class="enumeration">
      <li>toFixed(): păstrează într-un număr cu virgulă mobilă un anumit număr de zecimale în partea fracționară. De exemplu:</li>
     </ul>
     <div class="code-inline">
      <pre><code>const&nbsp;a&nbsp;=&nbsp;10&nbsp;/&nbsp;1.44;<br>console.log("Înainte&nbsp;de&nbsp;metoda&nbsp;toFixed():&nbsp;",&nbsp;a,&nbsp;"&lt;br/&gt;");<br>a&nbsp;=&nbsp;a.toFixed(2);&nbsp;//&nbsp;păstrăm&nbsp;două&nbsp;zecimale&nbsp;după&nbsp;virgulă<br>console.log("După&nbsp;metoda&nbsp;toFixed():&nbsp;",&nbsp;a,&nbsp;"&lt;br/&gt;");</code></pre>
     </div>
     <p class="paragraph">Output-ul din browser:</p>
     <div class="code-inline">
      <pre><code>Înainte&nbsp;de&nbsp;metoda&nbsp;toFixed():&nbsp;6.944444444444445<br>După&nbsp;metoda&nbsp;toFixed():&nbsp;6.94</code></pre>
     </div>
     <h2 class="subtitle">Conversie în alt sistem numeric</h2>
     <p class="paragraph">Mai sus am discutat despre conversia șirurilor în numere în sistemul zecimal. Dar putem specifica explicit cu ajutorul celui de-al doilea parametru că dorim să convertim un șir într-un număr într-un anumit sistem numeric. De exemplu, conversia într-un număr în sistem binar:</p>
     <div class="code-inline">
      <pre><code>const&nbsp;num1&nbsp;=&nbsp;"110";<br>const&nbsp;num2&nbsp;=&nbsp;parseInt(num1,&nbsp;2);<br>console.log(num2);&nbsp;//&nbsp;6</code></pre>
     </div>
     <p class="paragraph">Aici, în funcția parseInt, se furnizează numărul 2 ca al doilea parametru, indicând că primul parametru va fi tratat ca un număr în sistemul binar. Rezultatul va fi 6, deoarece 110 în sistem binar reprezintă numărul 6 în sistemul zecimal.</p>
     <p class="paragraph">Pentru a converti un număr în șir de caractere, puteți apela metoda toString():</p>
     <div class="code-inline">
      <pre><code>const&nbsp;num&nbsp;=&nbsp;10;<br>console.log(num.toString());&nbsp;//&nbsp;10</code></pre>
     </div>
     <h2 class="subtitle">Din număr în șir de caractere, metoda toString</h2>
     <p class="paragraph">Cu toate acestea, în acest caz, nu are sens să apelați metoda toString() pe număr, deoarece numărul poate fi afișat pe consolă fără nicio conversie. Cu toate acestea, metoda toString() poate fi utilă - ia ca parametru baza sistemului numeric al numărului și poate fi folosită pentru a afișa numărul într-un anumit sistem numeric:</p>
     <div class="code-inline">
      <pre><code>const&nbsp;num1&nbsp;=&nbsp;0b0110;<br>//&nbsp;afișăm&nbsp;numărul&nbsp;în&nbsp;sistemul&nbsp;binar<br>console.log(num1.toString(2));&nbsp;//&nbsp;110<br><br>const&nbsp;num2&nbsp;=&nbsp;0xFF;<br>//&nbsp;afișăm&nbsp;numărul&nbsp;în&nbsp;sistemul&nbsp;hexazecimal<br>console.log(num2.toString(16));&nbsp;//&nbsp;ff</code></pre>
     </div>
    </div>
   </main>
   <aside class="ad-section">
    <div class="ad-box">
     <p>Google Ad Here</p>
    </div>
    <div class="ad-box">
     <p>Promo: SQL Beginner Guide</p>
    </div>
   </aside>
  </div>
  <div class="lesson-navigation">
   <th:block th:if="${previousLesson != null}">
    <a th:href="@{'/lectii/' +
            ${#strings.toLowerCase(#strings.replace(previousLesson.chapter.topic.name, ' ', '-'))} + '/' +
            ${#strings.toLowerCase(#strings.replace(previousLesson.chapter.title, ' ', '-'))} + '/' +
            ${#strings.toLowerCase(#strings.replace(previousLesson.title, ' ', '-'))} }" class="nav-button">← Lecția anterioară</a>
   </th:block> <th:block th:if="${nextLesson != null}">
    <a th:href="@{'/lectii/' +
            ${#strings.toLowerCase(#strings.replace(nextLesson.chapter.topic.name, ' ', '-'))} + '/' +
            ${#strings.toLowerCase(#strings.replace(nextLesson.chapter.title, ' ', '-'))} + '/' +
            ${#strings.toLowerCase(#strings.replace(nextLesson.title, ' ', '-'))} }" class="nav-button">Lecția următoare →</a>
   </th:block>
  </div>
  <div th:replace="~{fragments/footer :: footer}"></div>
  <script th:src="@{/js/script.js}" defer></script>
 </body>
</html>
