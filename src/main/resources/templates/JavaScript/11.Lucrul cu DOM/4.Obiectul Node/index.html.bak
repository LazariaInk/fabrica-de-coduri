<!doctype html>
<html lang="ro" xmlns:th="http://www.w3.org/1999/xhtml">
 <head>
    <script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-4253419731329045"
            crossorigin="anonymous"></script>


  <link rel="canonical" th:href="${canonicalUrl}" />

    <link rel="icon" type="image/png" href="/nume-aplicatie/images/favicon.png">
    <script async src="https://www.googletagmanager.com/gtag/js?id=G-7Q2536ZKL2"></script>
    <script>
      window.dataLayer = window.dataLayer || [];
      window.gtag = function () { dataLayer.push(arguments); };
      gtag('consent', 'default', {
        'wait_for_update': 500,
        'region': ['RO'],
        'ad_storage': 'denied',
        'analytics_storage': 'denied',
        'ad_user_data': 'denied',
        'ad_personalization': 'denied'
      });
      gtag('js', new Date());
      gtag('config', 'G-7Q2536ZKL2');
    </script>


  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title th:text="${lesson.title}">Lesson</title>
  <link rel="stylesheet" th:href="@{/css/styles.css}">
  <style>body { background: #ffffff; }</style>
 </head>
 <body th:with="activeTopic='JavaScript', activeChapter='11.Lucrul cu DOM', activeLesson='4.Obiectul Node'">
  <button class="mobile-sidebar-toggle" onclick="toggleMobileSidebar()">☰</button>
  <div th:replace="~{fragments/nav :: nav}"></div>
  <div class="top-nav">
   <th:block th:each="topic : ${topics}">
    <a th:href="@{'/lectii/topic/' + ${topic.id}}" th:text="${topic.name}" th:classappend="${topic.id} == ${activeTopicId} ? 'active' : ''"> </a>
   </th:block>
  </div>
  <div class="layout">
   <div class="mobile-sidebar" id="mobileSidebar">
    <button class="close-btn" onclick="toggleSidebar()">✖</button>
    <ul class="chapter-list">
     <th:block th:each="chapter : ${chapters}">
      <li class="chapter-item" th:classappend="${chapter.id} == ${activeChapterId} ? 'open' : ''">
       <div class="chapter-title" onclick="toggleChapter(this)">
        <strong th:text="${chapter.title}"></strong> <span class="arrow">▼</span>
       </div>
       <ul class="lesson-list">
        <th:block th:each="lesson : ${chapter.lessons}">
         <li><a th:href="@{'/lectii/' +
    ${#strings.toLowerCase(#strings.replace(chapter.topic.name, ' ', '-'))} + '/' +
    ${#strings.toLowerCase(#strings.replace(chapter.title, ' ', '-'))} + '/' +
    ${#strings.toLowerCase(#strings.replace(lesson.title, ' ', '-'))} }" th:text="${lesson.title}" th:classappend="${lesson.id} == ${activeLessonId} ? 'active' : ''"> </a></li>
        </th:block>
       </ul></li>
     </th:block>
    </ul>
   </div>
   <aside class="sidebar">
    <ul class="sidebar-list">
     <th:block th:each="chapter : ${chapters}">
      <li class="chapter-item" th:classappend="${chapter.id} == ${activeChapterId} ? 'open' : ''">
       <div class="chapter-toggle" onclick="toggleLessons(this)">
        <span th:text="${chapter.title}">Chapter</span>
       </div>
       <ul class="lesson-list hidden">
        <th:block th:each="lesson : ${chapter.lessons}">
         <li><a th:href="@{'/lectii/' +
    ${#strings.toLowerCase(#strings.replace(chapter.topic.name, ' ', '-'))} + '/' +
    ${#strings.toLowerCase(#strings.replace(chapter.title, ' ', '-'))} + '/' +
    ${#strings.toLowerCase(#strings.replace(lesson.title, ' ', '-'))} }" th:text="${lesson.title}" th:classappend="${lesson.id} == ${activeLessonId} ? 'active' : ''"> </a></li>
        </th:block>
       </ul></li>
     </th:block>
    </ul>
   </aside>
   <main class="content">
    <div class="document-container">
     <h1 class="main-title">Obiectul Node - Navigarea în DOM</h1>
     <p class="paragraph">Fiecare nod individual, fie că este un element HTML, atributul acestuia sau text, în structura DOM este reprezentat de obiectul Node. Poate apărea întrebarea: cum sunt legate elementele unei pagini web de nodurile acelei pagini web? Și aici trebuie să subliniem că orice element al unei pagini web este un nod, dar nu orice nod este un element (de exemplu, atributele și textul elementelor sunt, de asemenea, noduri separate).</p>
     <p class="paragraph">Obiectul Node oferă o serie de proprietăți, cu ajutorul cărora putem obține informații despre nodul respectiv:</p>
     <ul class="enumeration">
      <li>childNodes: conține colecția de noduri copil</li>
      <li>children: conține colecția de noduri copil, care sunt elemente</li>
      <li>firstChild: returnează primul nod copil al nodului curent</li>
      <li>firstElementChild: returnează primul nod copil, care este un element</li>
      <li>lastChild: returnează ultimul nod copil al nodului curent</li>
      <li>lastElementChild: returnează ultimul nod copil, care este un element</li>
      <li>previousSibling: returnează nodul anterior, care se află la același nivel cu nodul curent</li>
      <li>nextSibling: returnează următorul nod, care se află la același nivel cu nodul curent</li>
      <li>previousElementSibling: returnează nodul anterior, care este un element și care se află la același nivel cu nodul curent</li>
      <li>nextElementSibling: returnează nodul următor, care este un element și care se află la același nivel cu nodul curent</li>
      <li>ownerDocument: returnează nodul rădăcină al documentului</li>
      <li>parentNode: returnează nodul părinte al nodului curent</li>
      <li>parentElement: returnează nodul părinte, care este un element</li>
      <li>nodeName: returnează numele nodului</li>
      <li>nodeType: returnează tipul nodului sub formă numerică</li>
      <li>nodeValue: returnează textul unui nod text</li>
     </ul>
     <p class="paragraph">În primul rând, putem folosi proprietățile nodeName și nodeType pentru a afla tipul nodului.</p>
     <div class="code-inline">
      <pre><code>&lt;!DOCTYPE&nbsp;html&gt;<br>&lt;html&gt;<br>&lt;head&gt;<br>&nbsp;&nbsp;&nbsp;&lt;meta&nbsp;charset="utf-8"&nbsp;/&gt;<br>&nbsp;&nbsp;&nbsp;&lt;title&gt;FDC.COM&lt;/title&gt;<br>&lt;/head&gt;<br>&lt;body&gt;<br>&nbsp;&nbsp;&nbsp;&lt;div&nbsp;id="article"&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;h1&nbsp;id="header"&gt;Home&nbsp;Page&lt;/h1&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;p&gt;Page&nbsp;Text&lt;/p&gt;<br>&nbsp;&nbsp;&nbsp;&lt;/div&gt;<br>&lt;script&gt;<br>const&nbsp;article&nbsp;=&nbsp;document.getElementById("article");<br>console.log(article.nodeName);&nbsp;&nbsp;//&nbsp;DIV<br>console.log(article.nodeType);&nbsp;&nbsp;//&nbsp;1<br>&lt;/script&gt;<br>&lt;/body&gt;<br>&lt;/html&gt;</code></pre>
     </div>
     <p class="paragraph">Aici obținem informații despre elementul cu id="header". În special, proprietatea nodeName va returna numele tag-ului elementului - div, iar proprietatea nodeType va returna numărul 1. Fiecarui tip de nod îi corespunde un anumit număr:</p>
     <div class="image-container">
      <img th:src="@{/images/JavaScript/11.Lucrul%20cu%20DOM/4.Obiectul%20Node/images/image1.png}" alt="" class="responsive-image">
     </div>
     <h2 class="subtitle">Obținerea elementului părinte</h2>
     <p class="paragraph">Pentru a obține elementul părinte, se utilizează proprietățile parentNode și parentElement. De exemplu:</p>
     <div class="code-inline">
      <pre><code>&lt;!DOCTYPE&nbsp;html&gt;<br>&lt;html&gt;<br>&lt;head&gt;<br>&nbsp;&nbsp;&nbsp;&lt;meta&nbsp;charset="utf-8"&nbsp;/&gt;<br>&nbsp;&nbsp;&nbsp;&lt;title&gt;FDC.COM&lt;/title&gt;<br>&lt;/head&gt;<br>&lt;body&gt;<br>&nbsp;&nbsp;&nbsp;&lt;div&nbsp;id="article"&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;h1&nbsp;id="header"&gt;Home&nbsp;Page&lt;/h1&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;p&gt;Page&nbsp;Text&lt;/p&gt;<br>&nbsp;&nbsp;&nbsp;&lt;/div&gt;<br>&nbsp;&nbsp;&nbsp;&lt;script&gt;<br>&nbsp;&nbsp;&nbsp;//&nbsp;selectăm&nbsp;toate&nbsp;elementele&nbsp;cu&nbsp;id="header"<br>&nbsp;&nbsp;&nbsp;const&nbsp;header&nbsp;=&nbsp;document.getElementById("header");<br>&nbsp;&nbsp;&nbsp;//&nbsp;obținem&nbsp;elementul&nbsp;părinte<br>&nbsp;&nbsp;&nbsp;const&nbsp;headerParent&nbsp;=&nbsp;header?.parentElement;<br>&nbsp;&nbsp;&nbsp;//&nbsp;se&nbsp;poate&nbsp;și&nbsp;așa<br>&nbsp;&nbsp;&nbsp;//&nbsp;const&nbsp;headerParent&nbsp;=&nbsp;header?.parentNode;<br>&nbsp;&nbsp;&nbsp;console.log(headerParent);&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;afișăm&nbsp;elementul&nbsp;părinte&nbsp;în&nbsp;consolă<br>&nbsp;&nbsp;&nbsp;&lt;/script&gt;<br>&lt;/body&gt;<br>&lt;/html&gt;</code></pre>
     </div>
     <p class="paragraph">Aici afișăm în consolă elementul în care este plasat elementul cu id="header".</p>
     <p class="paragraph">Este important de menționat că, deși ambele metode returnează în principiu același element, există o excepție - elementul &lt;html&gt;. Pentru acesta, nodul părinte va fi obiectul document, iar elementul părinte nu va exista (va fi null):</p>
     <div class="code-inline">
      <pre><code>const&nbsp;htmlEl&nbsp;=&nbsp;document.getElementsByTagName("html")[0];<br>const&nbsp;parentElem&nbsp;=&nbsp;htmlEl.parentElement;<br>const&nbsp;parentNode&nbsp;=&nbsp;htmlEl.parentNode;<br>console.log(parentElem);&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;null<br>console.log(parentNode);&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;obiectul&nbsp;document</code></pre>
     </div>
     <h2 class="subtitle">Obținerea elementelor copil</h2>
     <p class="paragraph">Metoda hasChildNodes() returnează true dacă elementul conține noduri înglobate:</p>
     <div class="code-inline">
      <pre><code>const&nbsp;article&nbsp;=&nbsp;document.querySelector("div");<br>if&nbsp;(article.hasChildNodes())&nbsp;{<br>&nbsp;&nbsp;&nbsp;console.log("Există&nbsp;noduri&nbsp;copil");<br>}&nbsp;else&nbsp;{<br>&nbsp;&nbsp;&nbsp;console.log("Niciun&nbsp;nod&nbsp;copil");<br>}</code></pre>
     </div>
     <p class="paragraph">Pentru a obține elementele copil, se poate utiliza proprietatea children:</p>
     <div class="code-inline">
      <pre><code>&lt;!DOCTYPE&nbsp;html&gt;<br>&lt;html&gt;<br>&lt;head&gt;<br>&nbsp;&nbsp;&nbsp;&lt;meta&nbsp;charset="utf-8"&nbsp;/&gt;<br>&nbsp;&nbsp;&nbsp;&lt;title&gt;FDC.COM&lt;/title&gt;<br>&lt;/head&gt;<br>&lt;body&gt;<br>&nbsp;&nbsp;&nbsp;&lt;div&nbsp;id="article"&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;h1&nbsp;id="header"&gt;Home&nbsp;Page&lt;/h1&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;p&gt;Page&nbsp;Text&lt;/p&gt;<br>&nbsp;&nbsp;&nbsp;&lt;/div&gt;<br>&lt;script&gt;<br>//&nbsp;selectăm&nbsp;elementul&nbsp;cu&nbsp;id-ul&nbsp;"article"<br>const&nbsp;article&nbsp;=&nbsp;document.getElementById("article");<br><br>for&nbsp;(elem&nbsp;of&nbsp;article.children)&nbsp;{<br>&nbsp;&nbsp;&nbsp;console.log(elem);<br>}<br>&lt;/script&gt;<br>&lt;/body&gt;<br>&lt;/html&gt;</code></pre>
     </div>
     <p class="paragraph">Aici, se obține elementul cu id-ul "article" și se parcurg într-un ciclu toate elementele sale copil. Acestea sunt două elemente:</p>
     <div class="code-inline">
      <pre><code>&lt;h1&nbsp;id="header"&gt;Home&nbsp;Page&lt;/h1&gt;<br>&lt;p&gt;Page&nbsp;Text&lt;/p&gt;</code></pre>
     </div>
     <p class="paragraph">Dacă dorim să selectăm absolut toate nodurile copil (nu doar elementele, ci și atributele și textul), se folosește metoda childNodes:</p>
     <div class="code-inline">
      <pre><code>&lt;!DOCTYPE&nbsp;html&gt;<br>&lt;html&gt;<br>&lt;head&gt;<br>&nbsp;&nbsp;&nbsp;&lt;meta&nbsp;charset="utf-8"&nbsp;/&gt;<br>&nbsp;&nbsp;&nbsp;&lt;title&gt;FDC.COM&lt;/title&gt;<br>&lt;/head&gt;<br>&lt;body&gt;<br>&nbsp;&nbsp;&nbsp;&lt;div&nbsp;id="article"&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;h1&nbsp;id="header"&gt;Home&nbsp;Page&lt;/h1&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;p&gt;Page&nbsp;Text&lt;/p&gt;<br>&nbsp;&nbsp;&nbsp;&lt;/div&gt;<br>&lt;script&gt;<br>//&nbsp;selectăm&nbsp;elementul&nbsp;cu&nbsp;id-ul&nbsp;"article"<br>const&nbsp;article&nbsp;=&nbsp;document.getElementById("article");<br><br>for&nbsp;(node&nbsp;of&nbsp;article.childNodes)&nbsp;{<br>&nbsp;&nbsp;&nbsp;let&nbsp;type&nbsp;=&nbsp;"";<br>&nbsp;&nbsp;&nbsp;if&nbsp;(node.nodeType&nbsp;===&nbsp;1)&nbsp;type&nbsp;=&nbsp;"element";<br>&nbsp;&nbsp;&nbsp;else&nbsp;if&nbsp;(node.nodeType&nbsp;===&nbsp;2)&nbsp;type&nbsp;=&nbsp;"atribut";<br>&nbsp;&nbsp;&nbsp;else&nbsp;if&nbsp;(node.nodeType&nbsp;===&nbsp;3)&nbsp;type&nbsp;=&nbsp;"text";<br>&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;console.log(node.nodeName,&nbsp;":&nbsp;",&nbsp;type);<br>}<br>&lt;/script&gt;<br>&lt;/body&gt;<br>&lt;/html&gt;</code></pre>
     </div>
     <p class="paragraph">Aici selectăm același element, dar acum parcurgem nodurile sale. Alegem elementul div cu clasa article și trecem prin nodurile sale copil într-un ciclu. În cadrul ciclului, afișăm numele nodului și tipul său folosind proprietățile nodeName și nodeType.</p>
     <p class="paragraph">Și, chiar dacă în blocul div#article există doar două elemente: un titlu h1 și un paragraf, consola ne va afișa cinci noduri.</p>
     <div class="code-inline">
      <pre><code>#text&nbsp;:&nbsp;&nbsp;text<br>H1&nbsp;:&nbsp;&nbsp;element<br>#text&nbsp;:&nbsp;&nbsp;text<br>P&nbsp;:&nbsp;&nbsp;element<br>#text&nbsp;:&nbsp;&nbsp;text</code></pre>
     </div>
     <p class="paragraph">Acest lucru se datorează faptului că spațiile între noduri sunt, de asemenea, considerate ca fiind noduri de text separate. Dacă nu ar fi fost spații, rezultatul ar fi fost diferit.</p>
     <div class="code-inline">
      <pre><code>&lt;div&nbsp;id="article"&gt;&lt;h1&nbsp;id="header"&gt;Home&nbsp;Page&lt;/h1&gt;&lt;p&gt;Page&nbsp;Text&lt;/p&gt;&lt;/div&gt;</code></pre>
     </div>
     <p class="paragraph">Deci, dacă am parcurge nodurile, am descoperi doar două noduri copil, așa cum era de așteptat.</p>
     <p class="paragraph">În plus, pentru a obține primul și ultimul nod/element, se utilizează proprietățile firstChild/firstElementChild și lastChild/lastElementChild, respectiv.</p>
     <div class="code-inline">
      <pre><code>&lt;!DOCTYPE&nbsp;html&gt;<br>&lt;html&gt;<br>&lt;head&gt;<br>&nbsp;&nbsp;&nbsp;&lt;meta&nbsp;charset="utf-8"&nbsp;/&gt;<br>&nbsp;&nbsp;&nbsp;&lt;title&gt;FDC.COM&lt;/title&gt;<br>&lt;/head&gt;<br>&lt;body&gt;<br>&nbsp;&nbsp;&nbsp;&lt;div&nbsp;id="article"&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;h1&nbsp;id="header"&gt;Home&nbsp;Page&lt;/h1&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;p&gt;Page&nbsp;Text&lt;/p&gt;<br>&nbsp;&nbsp;&nbsp;&lt;/div&gt;<br>&lt;script&gt;<br>const&nbsp;article&nbsp;=&nbsp;document.getElementById("article");<br>console.log("First&nbsp;Child:",&nbsp;article.firstElementChild);<br>console.log("Last&nbsp;Child:",&nbsp;article.lastElementChild);<br>&lt;/script&gt;<br>&lt;/body&gt;<br>&lt;/html&gt;</code></pre>
     </div>
     <p class="paragraph">Afișarea în consolă:</p>
     <div class="code-inline">
      <pre><code>Primul&nbsp;Copil:&nbsp;`&lt;h1&nbsp;id="header"&gt;Home&nbsp;Page&lt;/h1&gt;`<br>Ultimul&nbsp;Copil:&nbsp;`&lt;p&gt;Textul&nbsp;Paginii&lt;/p&gt;`</code></pre>
     </div>
     <h2 class="subtitle">Numărul de elemente</h2>
     <p class="paragraph">Pentru a obține numărul de elemente copil, se poate folosi proprietatea childElementCount. Această valoare va fi echivalentă cu valoarea children.length:</p>
     <div class="code-inline">
      <pre><code>const&nbsp;article&nbsp;=&nbsp;document.getElementById("article");<br>console.log(article.childElementCount);&nbsp;//&nbsp;2<br>console.log(article.children.length);&nbsp;//&nbsp;2</code></pre>
     </div>
     <h2 class="subtitle">Obținerea elementelor de același nivel</h2>
     <p class="paragraph">Proprietățile previousSibling/previousElementSibling și nextSibling/nextElementSibling permit obținerea elementelor anterioare și ulterioare, care se află la același nivel cu elementul curent. De exemplu:</p>
     <div class="code-inline">
      <pre><code>&lt;!DOCTYPE&nbsp;html&gt;<br>&lt;html&gt;<br>&lt;head&gt;<br>&nbsp;&nbsp;&nbsp;&lt;meta&nbsp;charset="utf-8"&nbsp;/&gt;<br>&nbsp;&nbsp;&nbsp;&lt;title&gt;FDC.COM&lt;/title&gt;<br>&lt;/head&gt;<br>&lt;body&gt;<br>&nbsp;&nbsp;&nbsp;&lt;div&nbsp;id="article"&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;h1&nbsp;id="header"&gt;Home&nbsp;Page&lt;/h1&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;p&gt;Page&nbsp;Text&nbsp;1&lt;/p&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;p&gt;Page&nbsp;Text&nbsp;2&lt;/p&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;p&gt;Page&nbsp;Text&nbsp;3&lt;/p&gt;<br>&nbsp;&nbsp;&nbsp;&lt;/div&gt;<br>&nbsp;&nbsp;&nbsp;&lt;script&gt;<br>&nbsp;&nbsp;&nbsp;const&nbsp;article&nbsp;=&nbsp;document.getElementById("article");<br>&nbsp;&nbsp;&nbsp;let&nbsp;tempNode&nbsp;=&nbsp;article.firstElementChild;<br>&nbsp;&nbsp;&nbsp;while(tempNode&nbsp;!=&nbsp;null){<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;console.log(tempNode);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tempNode&nbsp;=&nbsp;tempNode.nextElementSibling<br>&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&lt;/script&gt;<br>&lt;/body&gt;<br>&lt;/html&gt;</code></pre>
     </div>
     <p class="paragraph">Aici, obținem din nou elementul cu id="article". Apoi, capturăm primul său element în variabila tempNode și, într-un ciclu, atât timp cât tempNode nu este egal cu null, afișăm valoarea sa în consolă și apoi atribuim acestei variabile următorul element de același nivel (elementul adiacent):</p>
     <div class="code-inline">
      <pre><code>tempNode&nbsp;=&nbsp;tempNode.nextElementSibling;</code></pre>
     </div>
     <p class="paragraph">Astfel, parcurgem toate elementele de același nivel. Afișarea în consolă:</p>
     <div class="code-inline">
      <pre><code>&lt;h1&nbsp;id="header"&gt;Home&nbsp;Page&lt;/h1&gt;<br>&lt;p&gt;Page&nbsp;Text&nbsp;1&lt;/p&gt;<br>&lt;p&gt;Page&nbsp;Text&nbsp;2&lt;/p&gt;<br>&lt;p&gt;Page&nbsp;Text&nbsp;3&lt;/p&gt;</code></pre>
     </div>
     <p class="paragraph">De asemenea, este posibil să parcurgem nodurile în ordine inversă: mai întâi obținem ultimul nod, apoi ne referim la nodul anterior de același nivel (sora anterioară a nodului):</p>
     <div class="code-inline">
      <pre><code>const&nbsp;article&nbsp;=&nbsp;document.getElementById("article");<br>let&nbsp;tempNode&nbsp;=&nbsp;article.lastElementChild;<br>while(tempNode&nbsp;!=&nbsp;null){<br>&nbsp;&nbsp;&nbsp;console.log(tempNode);<br>&nbsp;&nbsp;&nbsp;tempNode&nbsp;=&nbsp;tempNode.previousElementSibling;<br>}</code></pre>
     </div>
     <h2 class="subtitle">nodeValue și obținerea conținutului text</h2>
     <p class="paragraph">Proprietatea nodeValue permite obținerea conținutului unui nod text, adică textul său. De exemplu:</p>
     <div class="code-inline">
      <pre><code>&lt;!DOCTYPE&nbsp;html&gt;<br>&lt;html&gt;<br>&lt;head&gt;<br>&nbsp;&nbsp;&nbsp;&lt;meta&nbsp;charset="utf-8"&nbsp;/&gt;<br>&nbsp;&nbsp;&nbsp;&lt;title&gt;FDC.COM&lt;/title&gt;<br>&lt;/head&gt;<br>&lt;body&gt;<br>&nbsp;&nbsp;&nbsp;&lt;div&nbsp;id="article"&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;h1&nbsp;id="header"&gt;Home&nbsp;Page&lt;/h1&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;p&nbsp;id="text"&gt;Textul&nbsp;Paginii&lt;/p&gt;<br>&nbsp;&nbsp;&nbsp;&lt;/div&gt;<br>&nbsp;&nbsp;&nbsp;&lt;script&gt;<br>&nbsp;&nbsp;&nbsp;//&nbsp;obținem&nbsp;elementul&nbsp;cu&nbsp;id="text"<br>&nbsp;&nbsp;&nbsp;const&nbsp;pageText&nbsp;=&nbsp;document.getElementById("text");<br>&nbsp;&nbsp;&nbsp;console.log(pageText.nodeValue);&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;null<br>&nbsp;&nbsp;&nbsp;for(textNode&nbsp;of&nbsp;pageText.childNodes){<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;console.log(textNode.nodeValue);<br>&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&lt;/script&gt;<br>&lt;/body&gt;<br>&lt;/html&gt;</code></pre>
     </div>
     <p class="paragraph">În acest caz, încercăm să obținem textul elementului cu id="text". Mai întâi obținem acest element în constanta pageText. Cu toate acestea, nu putem apela direct proprietatea nodeValue pe acest element. Dacă o facem, vom obține null:</p>
     <div class="code-inline">
      <pre><code>console.log(pageText.nodeValue);&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;null</code></pre>
     </div>
     <p class="paragraph">Acest lucru se datorează faptului că elementul obținut de noi nu este un nod text. Nodul text este situat în interiorul elementului pageText. Pentru a obține textul, trebuie să ne adresăm acestui nod text prin colecția childNodes:</p>
     <div class="code-inline">
      <pre><code>for(textNode&nbsp;of&nbsp;pageText.childNodes){<br>&nbsp;&nbsp;&nbsp;console.log(textNode.nodeValue);<br>}</code></pre>
     </div>
     <p class="paragraph">Deși putem obține astfel conținutul text al elementelor, nu este cea mai optimă metodă, iar mai departe vom examina alte moduri.</p>
    </div>
   </main>
   <aside class="ad-section">
    <div class="ad-box">
     <p>Google Ad Here</p>
    </div>
    <div class="ad-box">
     <p>Promo: SQL Beginner Guide</p>
    </div>
   </aside>
  </div>
  <div class="lesson-navigation">
   <th:block th:if="${previousLesson != null}">
    <a th:href="@{'/lectii/' +
            ${#strings.toLowerCase(#strings.replace(previousLesson.chapter.topic.name, ' ', '-'))} + '/' +
            ${#strings.toLowerCase(#strings.replace(previousLesson.chapter.title, ' ', '-'))} + '/' +
            ${#strings.toLowerCase(#strings.replace(previousLesson.title, ' ', '-'))} }" class="nav-button">← Lecția anterioară</a>
   </th:block> <th:block th:if="${nextLesson != null}">
    <a th:href="@{'/lectii/' +
            ${#strings.toLowerCase(#strings.replace(nextLesson.chapter.topic.name, ' ', '-'))} + '/' +
            ${#strings.toLowerCase(#strings.replace(nextLesson.chapter.title, ' ', '-'))} + '/' +
            ${#strings.toLowerCase(#strings.replace(nextLesson.title, ' ', '-'))} }" class="nav-button">Lecția următoare →</a>
   </th:block>
  </div>
  <div th:replace="~{fragments/footer :: footer}"></div>
  <script th:src="@{/js/script.js}" defer></script>
 </body>
</html>
