<!doctype html>
<html lang="ro" xmlns:th="http://www.w3.org/1999/xhtml">
 <head>
    <link rel="icon" type="image/png" href="/nume-aplicatie/images/favicon.png">
    <script async src="https://www.googletagmanager.com/gtag/js?id=G-7Q2536ZKL2"></script>
    <script>
      window.dataLayer = window.dataLayer || [];
      window.gtag = function () { dataLayer.push(arguments); };
      gtag('consent', 'default', {
        'wait_for_update': 500,
        'region': ['RO'],
        'ad_storage': 'denied',
        'analytics_storage': 'denied',
        'ad_user_data': 'denied',
        'ad_personalization': 'denied'
      });
      gtag('js', new Date());
      gtag('config', 'G-7Q2536ZKL2');
    </script>


  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title th:text="${lesson.title}">Lesson</title>
  <link rel="stylesheet" th:href="@{/css/styles.css}">
  <style>body { background: #ffffff; }</style>
 </head>
 <body th:with="activeTopic='JavaScript', activeChapter='4.Programarea orientata pe obiect (OOP)', activeLesson='5.Verificarea Existentei si Iterarea Prin Metode si Proprietati'">
  <button class="mobile-sidebar-toggle" onclick="toggleMobileSidebar()">☰</button>
  <div th:replace="~{fragments/nav :: nav}"></div>
  <div class="top-nav">
   <th:block th:each="topic : ${topics}">
    <a th:href="@{'/lectii/topic/' + ${topic.id}}" th:text="${topic.name}" th:classappend="${topic.id} == ${activeTopicId} ? 'active' : ''"> </a>
   </th:block>
  </div>
  <div class="layout">
   <div class="mobile-sidebar" id="mobileSidebar">
    <button class="close-btn" onclick="toggleSidebar()">✖</button>
    <ul class="chapter-list">
     <th:block th:each="chapter : ${chapters}">
      <li class="chapter-item" th:classappend="${chapter.id} == ${activeChapterId} ? 'open' : ''">
       <div class="chapter-title" onclick="toggleChapter(this)">
        <strong th:text="${chapter.title}"></strong> <span class="arrow">▼</span>
       </div>
       <ul class="lesson-list">
        <th:block th:each="lesson : ${chapter.lessons}">
         <li><a th:href="@{'/lessons/' +
    ${#strings.toLowerCase(#strings.replace(chapter.topic.name, ' ', '-'))} + '/' +
    ${#strings.toLowerCase(#strings.replace(chapter.title, ' ', '-'))} + '/' +
    ${#strings.toLowerCase(#strings.replace(lesson.title, ' ', '-'))} }" th:text="${lesson.title}" th:classappend="${lesson.id} == ${activeLessonId} ? 'active' : ''"> </a></li>
        </th:block>
       </ul></li>
     </th:block>
    </ul>
   </div>
   <aside class="sidebar">
    <ul class="sidebar-list">
     <th:block th:each="chapter : ${chapters}">
      <li class="chapter-item" th:classappend="${chapter.id} == ${activeChapterId} ? 'open' : ''">
       <div class="chapter-toggle" onclick="toggleLessons(this)">
        <span th:text="${chapter.title}">Chapter</span>
       </div>
       <ul class="lesson-list hidden">
        <th:block th:each="lesson : ${chapter.lessons}">
         <li><a th:href="@{'/lessons/' +
    ${#strings.toLowerCase(#strings.replace(chapter.topic.name, ' ', '-'))} + '/' +
    ${#strings.toLowerCase(#strings.replace(chapter.title, ' ', '-'))} + '/' +
    ${#strings.toLowerCase(#strings.replace(lesson.title, ' ', '-'))} }" th:text="${lesson.title}" th:classappend="${lesson.id} == ${activeLessonId} ? 'active' : ''"> </a></li>
        </th:block>
       </ul></li>
     </th:block>
    </ul>
   </aside>
   <main class="content">
    <div class="document-container">
     <h1 class="main-title">Verificarea Existentei si Iterarea Prin Metode si Proprietati</h1>
     <p class="paragraph">La verificarea și definirea dinamică a unor noi proprietăți și metode într-un obiect, poate fi important să verificăm în prealabil dacă acestea există. În JavaScript, se poate utiliza operatorul in. Acesta are sintaxa următoare:</p>
     <div class="code-inline">
      <pre><code>"proprietate|metoda"&nbsp;in&nbsp;obiect</code></pre>
     </div>
     <p class="paragraph">În ghilimele se specifică numele proprietății sau metodei, iar după in se specifică numele obiectului. Dacă o proprietate sau metodă cu un astfel de nume există, operatorul returnează true. În caz contrar, returnează false.</p>
     <p class="paragraph">De exemplu, să verificăm dacă într-un obiect există anumite proprietăți:</p>
     <div class="code-inline">
      <pre><code>const&nbsp;user&nbsp;=&nbsp;{};<br>user.name&nbsp;=&nbsp;"Tom";<br>user.age&nbsp;=&nbsp;26;<br>user.print&nbsp;=&nbsp;function()&nbsp;{<br>&nbsp;&nbsp;&nbsp;console.log(this.name);<br>&nbsp;&nbsp;&nbsp;console.log(this.age);<br>};<br><br>const&nbsp;hasNameProp&nbsp;=&nbsp;"name"&nbsp;in&nbsp;user;<br>console.log(hasNameProp);&nbsp;//&nbsp;true&nbsp;-&nbsp;proprietatea&nbsp;"name"&nbsp;există&nbsp;în&nbsp;user<br><br>const&nbsp;hasWeightProp&nbsp;=&nbsp;"weight"&nbsp;in&nbsp;user;<br>console.log(hasWeightProp);&nbsp;//&nbsp;false&nbsp;-&nbsp;în&nbsp;user&nbsp;nu&nbsp;există&nbsp;proprietatea&nbsp;sau&nbsp;metoda&nbsp;cu&nbsp;numele&nbsp;"weight"</code></pre>
     </div>
     <p class="paragraph">Prin expresia "name" in user verificăm dacă obiectul user are proprietatea "name", iar rezultatul verificării este atribuit constantei hasNameProp. Ulterior, verificăm similar existența proprietății "weight".</p>
     <p class="paragraph">Similar, putem verifica și existența metodelor:</p>
     <div class="code-inline">
      <pre><code>const&nbsp;hasPrintMethod&nbsp;=&nbsp;"print"&nbsp;in&nbsp;user;<br>console.log(hasPrintMethod);&nbsp;//&nbsp;true&nbsp;-&nbsp;în&nbsp;user&nbsp;există&nbsp;metoda&nbsp;"print"</code></pre>
     </div>
     <p class="paragraph">O metodă alternativă constă în verificarea valorii undefined. Dacă o proprietate sau metodă este undefined, atunci aceasta nu este definită:</p>
     <div class="code-inline">
      <pre><code>const&nbsp;hasNameProp&nbsp;=&nbsp;user.name!==undefined;<br>console.log(hasNameProp);&nbsp;//&nbsp;true<br>const&nbsp;hasWeightProp&nbsp;=&nbsp;user.weight!==undefined;<br>console.log(hasWeightProp);&nbsp;//&nbsp;false</code></pre>
     </div>
     <p class="paragraph">Și deoarece obiectele sunt de tipul Object, având toate metodele și proprietățile acestuia, obiectele pot utiliza și metoda hasOwnProperty(), care este definită în tipul Object:</p>
     <div class="code-inline">
      <pre><code>const&nbsp;hasNameProp&nbsp;=&nbsp;user.hasOwnProperty("name");<br>console.log(hasNameProp);&nbsp;//&nbsp;true<br>const&nbsp;hasPrintMethod&nbsp;=&nbsp;user.hasOwnProperty("print");<br>console.log(hasPrintMethod);&nbsp;//&nbsp;true<br>const&nbsp;hasWeightProp&nbsp;=&nbsp;user.hasOwnProperty("weight");<br>console.log(hasWeightProp);&nbsp;//&nbsp;false</code></pre>
     </div>
     <h2 class="subtitle">Iterarea prin Proprietăți și Metode</h2>
     <p class="paragraph">Cu ajutorul unui ciclu for putem parcurge un obiect asemenea unui array și putea obține toate proprietățile și metodele sale, împreună cu valorile acestora:</p>
     <div class="code-inline">
      <pre><code>const&nbsp;tom&nbsp;=&nbsp;{<br>&nbsp;&nbsp;&nbsp;name:&nbsp;"Tom",<br>&nbsp;&nbsp;&nbsp;age:&nbsp;26,<br>&nbsp;&nbsp;&nbsp;print(){<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;console.log(``Name:&nbsp;${this.name}&nbsp;&nbsp;Age:&nbsp;${this.age}``);<br>&nbsp;&nbsp;&nbsp;}<br>};<br><br>for(const&nbsp;prop&nbsp;in&nbsp;tom)&nbsp;{<br>&nbsp;&nbsp;&nbsp;console.log(prop,&nbsp;"&nbsp;:&nbsp;",&nbsp;tom[prop]);<br>}</code></pre>
     </div>
     <p class="paragraph">Și, la rularea consolei în browser, se va afișa următorul rezultat:</p>
     <div class="code-inline">
      <pre><code>name&nbsp;:&nbsp;Tom<br>age&nbsp;:&nbsp;26<br>print&nbsp;:&nbsp;print(){<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;console.log(`Name:&nbsp;${this.name}&nbsp;&nbsp;Age:&nbsp;${this.age}`);<br>}</code></pre>
     </div>
     <h2 class="subtitle">Funcții Object.entries, Object.keys, Object,values</h2>
     <p class="paragraph">Cu ajutorul funcțiilor suplimentare Object.entries, Object.keys și Object,values, poți obține toate proprietățile (inclusiv metodele) unui obiect și valorile acestora.</p>
     <h2 class="subtitle">Object.entries()</h2>
     <p class="paragraph">Funcția Object.entries() primește un obiect ca parametru și returnează un array de perechi "nume_proprietate - valoare", unde fiecare pereche proprietate-valoare este reprezentată ca un array. De exemplu:</p>
     <div class="code-inline">
      <pre><code>const&nbsp;tom&nbsp;=&nbsp;{<br>&nbsp;&nbsp;&nbsp;name:&nbsp;"Tom",<br>&nbsp;&nbsp;&nbsp;age:&nbsp;26,<br>&nbsp;&nbsp;&nbsp;print(){<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;console.log(`Name:&nbsp;${this.name}&nbsp;&nbsp;Age:&nbsp;${this.age}`);<br>&nbsp;&nbsp;&nbsp;}<br>};<br>&nbsp;<br>for(const&nbsp;prop&nbsp;of&nbsp;Object.entries(tom))&nbsp;{<br>&nbsp;&nbsp;&nbsp;console.log(prop);<br>}</code></pre>
     </div>
     <p class="paragraph">const tom = { name: "Tom", age: 26, print(){ console.log(`Name: ${this.name} Age: ${this.age}`); } }; for(const prop of Object.entries(tom)) { console.log(prop); }</p>
     <p class="paragraph">Rezultatul în consolă:</p>
     <div class="code-inline">
      <pre><code>["name",&nbsp;"Tom"]<br>["age",&nbsp;26]<br>["print",&nbsp;ƒ]</code></pre>
     </div>
     <h2 class="subtitle">Object.keys()</h2>
     <p class="paragraph">Funcția Object.keys() permite obținerea unui array cu numele tuturor proprietăților unui obiect. De exemplu, luăm obiectul tom definit mai sus:</p>
     <div class="code-inline">
      <pre><code>const&nbsp;tom&nbsp;=&nbsp;{<br>&nbsp;&nbsp;&nbsp;name:&nbsp;"Tom",<br>&nbsp;&nbsp;&nbsp;age:&nbsp;26,<br>&nbsp;&nbsp;&nbsp;print(){<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;console.log(`Name:&nbsp;${this.name}&nbsp;&nbsp;Age:&nbsp;${this.age}`);<br>&nbsp;&nbsp;&nbsp;}<br>};<br>console.log(Object.keys(tom));&nbsp;//&nbsp;["name",&nbsp;"age",&nbsp;"print"]</code></pre>
     </div>
     <p class="paragraph">Prin urmare, poți parcurge această serie și obține valorile proprietăților:</p>
     <div class="code-inline">
      <pre><code>for&nbsp;(const&nbsp;prop&nbsp;of&nbsp;Object.keys(tom))&nbsp;{<br>&nbsp;&nbsp;&nbsp;const&nbsp;value&nbsp;=&nbsp;tom[prop];&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;obținem&nbsp;valoarea&nbsp;proprietății&nbsp;pe&nbsp;baza&nbsp;numelui<br>&nbsp;&nbsp;&nbsp;console.log(prop,&nbsp;value);<br>}</code></pre>
     </div>
     <p class="paragraph">Rezultatul în consolă:</p>
     <div class="code-inline">
      <pre><code>name&nbsp;Tom<br>age&nbsp;26<br>print&nbsp;ƒ&nbsp;print(){<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;console.log(`Name:&nbsp;${this.name}&nbsp;&nbsp;Age:&nbsp;${this.age}`);<br>&nbsp;&nbsp;&nbsp;}</code></pre>
     </div>
     <h2 class="subtitle">Object.values()</h2>
     <p class="paragraph">Funcția Object.values() returnează un array care conține toate valorile proprietăților obiectului.</p>
     <div class="code-inline">
      <pre><code>const&nbsp;tom&nbsp;=&nbsp;{<br>&nbsp;&nbsp;&nbsp;name:&nbsp;"Tom",<br>&nbsp;&nbsp;&nbsp;age:&nbsp;26,<br>&nbsp;&nbsp;&nbsp;print(){<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;console.log(`Name:&nbsp;${this.name}&nbsp;&nbsp;Age:&nbsp;${this.age}`);<br>&nbsp;&nbsp;&nbsp;}<br>};<br>console.log(Object.values(tom));&nbsp;//&nbsp;["Tom",&nbsp;26,&nbsp;print()]</code></pre>
     </div>
    </div>
   </main>
   <aside class="ad-section">
    <div class="ad-box">
     <p>Google Ad Here</p>
    </div>
    <div class="ad-box">
     <p>Promo: SQL Beginner Guide</p>
    </div>
   </aside>
  </div>
  <div class="lesson-navigation">
   <th:block th:if="${previousLesson != null}">
    <a th:href="@{'/lessons/' +
            ${#strings.toLowerCase(#strings.replace(previousLesson.chapter.topic.name, ' ', '-'))} + '/' +
            ${#strings.toLowerCase(#strings.replace(previousLesson.chapter.title, ' ', '-'))} + '/' +
            ${#strings.toLowerCase(#strings.replace(previousLesson.title, ' ', '-'))} }" class="nav-button">← Lecția anterioară</a>
   </th:block> <th:block th:if="${nextLesson != null}">
    <a th:href="@{'/lessons/' +
            ${#strings.toLowerCase(#strings.replace(nextLesson.chapter.topic.name, ' ', '-'))} + '/' +
            ${#strings.toLowerCase(#strings.replace(nextLesson.chapter.title, ' ', '-'))} + '/' +
            ${#strings.toLowerCase(#strings.replace(nextLesson.title, ' ', '-'))} }" class="nav-button">Lecția următoare →</a>
   </th:block>
  </div>
  <div th:replace="~{fragments/footer :: footer}"></div>
  <script th:src="@{/js/script.js}" defer></script>
 </body>
</html>
