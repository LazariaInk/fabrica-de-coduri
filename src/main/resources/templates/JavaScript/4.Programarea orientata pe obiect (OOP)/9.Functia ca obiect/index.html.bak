<!doctype html>
<html lang="ro" xmlns:th="http://www.w3.org/1999/xhtml">
 <head>
    <link rel="icon" type="image/png" href="/nume-aplicatie/images/favicon.png">
    <script async src="https://www.googletagmanager.com/gtag/js?id=G-7Q2536ZKL2"></script>
    <script>
      window.dataLayer = window.dataLayer || [];
      window.gtag = function () { dataLayer.push(arguments); };
      gtag('consent', 'default', {
        'wait_for_update': 500,
        'region': ['RO'],
        'ad_storage': 'denied',
        'analytics_storage': 'denied',
        'ad_user_data': 'denied',
        'ad_personalization': 'denied'
      });
      gtag('js', new Date());
      gtag('config', 'G-7Q2536ZKL2');
    </script>


  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title th:text="${lesson.title}">Lesson</title>
  <link rel="stylesheet" th:href="@{/css/styles.css}">
  <style>body { background: #ffffff; }</style>
 </head>
 <body th:with="activeTopic='JavaScript', activeChapter='4.Programarea orientata pe obiect (OOP)', activeLesson='9.Functia ca obiect'">
  <button class="mobile-sidebar-toggle" onclick="toggleMobileSidebar()">☰</button>
  <div th:replace="~{fragments/nav :: nav}"></div>
  <div class="top-nav">
   <th:block th:each="topic : ${topics}">
    <a th:href="@{'/lectii/topic/' + ${topic.id}}" th:text="${topic.name}" th:classappend="${topic.id} == ${activeTopicId} ? 'active' : ''"> </a>
   </th:block>
  </div>
  <div class="layout">
   <div class="mobile-sidebar" id="mobileSidebar">
    <button class="close-btn" onclick="toggleSidebar()">✖</button>
    <ul class="chapter-list">
     <th:block th:each="chapter : ${chapters}">
      <li class="chapter-item" th:classappend="${chapter.id} == ${activeChapterId} ? 'open' : ''">
       <div class="chapter-title" onclick="toggleChapter(this)">
        <strong th:text="${chapter.title}"></strong> <span class="arrow">▼</span>
       </div>
       <ul class="lesson-list">
        <th:block th:each="lesson : ${chapter.lessons}">
         <li><a th:href="@{'/lessons/' +
    ${#strings.toLowerCase(#strings.replace(chapter.topic.name, ' ', '-'))} + '/' +
    ${#strings.toLowerCase(#strings.replace(chapter.title, ' ', '-'))} + '/' +
    ${#strings.toLowerCase(#strings.replace(lesson.title, ' ', '-'))} }" th:text="${lesson.title}" th:classappend="${lesson.id} == ${activeLessonId} ? 'active' : ''"> </a></li>
        </th:block>
       </ul></li>
     </th:block>
    </ul>
   </div>
   <aside class="sidebar">
    <ul class="sidebar-list">
     <th:block th:each="chapter : ${chapters}">
      <li class="chapter-item" th:classappend="${chapter.id} == ${activeChapterId} ? 'open' : ''">
       <div class="chapter-toggle" onclick="toggleLessons(this)">
        <span th:text="${chapter.title}">Chapter</span>
       </div>
       <ul class="lesson-list hidden">
        <th:block th:each="lesson : ${chapter.lessons}">
         <li><a th:href="@{'/lessons/' +
    ${#strings.toLowerCase(#strings.replace(chapter.topic.name, ' ', '-'))} + '/' +
    ${#strings.toLowerCase(#strings.replace(chapter.title, ' ', '-'))} + '/' +
    ${#strings.toLowerCase(#strings.replace(lesson.title, ' ', '-'))} }" th:text="${lesson.title}" th:classappend="${lesson.id} == ${activeLessonId} ? 'active' : ''"> </a></li>
        </th:block>
       </ul></li>
     </th:block>
    </ul>
   </aside>
   <main class="content">
    <div class="document-container">
     <h1 class="main-title">Funcția ca obiect - Metodele call și apply</h1>
     <p class="paragraph">În JavaScript, funcția este, de asemenea, un obiect - un obiect de tipul Function și are, de asemenea, un prototip, proprietăți și metode. Toate funcțiile utilizate în program sunt obiecte de tip Function și au toate proprietățile și metodele sale.</p>
     <p class="paragraph">De exemplu, putem crea o funcție folosind constructorul Function:</p>
     <div class="code-inline">
      <pre><code>const&nbsp;square&nbsp;=&nbsp;new&nbsp;Function("n",&nbsp;"return&nbsp;n&nbsp;*&nbsp;n;");<br>console.log(square(5));&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;25</code></pre>
     </div>
     <p class="paragraph">În constructorul Function pot fi transmiși mai mulți parametri. Ultimul parametru reprezintă corpul funcției în sine sub formă de șir de caractere. Practic, șirul conține cod JavaScript. Parametrii anteriori conțin numele parametrilor. În acest caz, este definită o funcție care ridică un număr la pătrat, având un singur parametru n.</p>
     <p class="paragraph">Dintre proprietățile obiectului Function, pot fi evidențiate următoarele:</p>
     <ul class="enumeration">
      <li>arguments: o matrice de argumente transmise la funcție</li>
      <li>length: determină numărul de argumente pe care funcția le așteaptă</li>
      <li>caller: determină funcția care a apelat funcția curentă în execuție</li>
      <li>name: numele funcției</li>
      <li>prototype: prototipul funcției</li>
     </ul>
     <p class="paragraph">Cu ajutorul prototipului, putem defini proprietăți suplimentare:</p>
     <div class="code-inline">
      <pre><code>function&nbsp;sayHello(){<br>&nbsp;&nbsp;&nbsp;console.log("Hello");<br>}<br><br>//&nbsp;modificăm&nbsp;prototipul&nbsp;pentru&nbsp;toate&nbsp;funcțiile<br>Function.prototype.program&nbsp;="Hello&nbsp;World";<br><br>console.log(sayHello.program);&nbsp;//&nbsp;Hello&nbsp;World</code></pre>
     </div>
     <p class="paragraph">Dintre metode trebuie menționate metodele call() și apply().</p>
     <p class="paragraph">Metoda call() apelează funcția cu o valoare specificată pentru this și cu argumente specificate:</p>
     <div class="code-inline">
      <pre><code>function&nbsp;sum(x,&nbsp;y){<br>&nbsp;<br>&nbsp;&nbsp;&nbsp;return&nbsp;x&nbsp;+&nbsp;y;<br>}<br>const&nbsp;result&nbsp;=&nbsp;sum.call(this,&nbsp;3,&nbsp;8);<br><br>console.log(result);&nbsp;//&nbsp;11<br><br></code></pre>
     </div>
     <p class="paragraph">this indică obiectul pentru care este apelată funcția - în acest caz, este obiectul global window. După this, sunt transmise valorile pentru parametri.</p>
     <p class="paragraph">Prin transmiterea unui obiect ca prim parametru, putem face referire la el folosind cuvântul cheie this:</p>
     <div class="code-inline">
      <pre><code>function&nbsp;User&nbsp;(name,&nbsp;age)&nbsp;{<br>&nbsp;&nbsp;&nbsp;this.name&nbsp;=&nbsp;name;<br>&nbsp;&nbsp;&nbsp;this.age&nbsp;=&nbsp;age;<br>}<br>const&nbsp;tom&nbsp;=&nbsp;new&nbsp;User("Tom",&nbsp;39);<br>function&nbsp;print(){<br>&nbsp;&nbsp;&nbsp;console.log("Name:",&nbsp;this.name);<br>}<br>print.call(tom);&nbsp;//&nbsp;Name:&nbsp;Tom</code></pre>
     </div>
     <p class="paragraph">În acest caz, este transmisă doar o singură valoare, deoarece funcția print nu primește parametri. Cu alte cuvinte, funcția va fi apelată pentru obiectul tom.</p>
     <p class="paragraph">Dacă nu ne pasă despre obiectul pentru care este apelată funcția, putem transmite valoarea null:</p>
     <div class="code-inline">
      <pre><code>function&nbsp;sum(x,&nbsp;y){<br>&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;return&nbsp;x&nbsp;+&nbsp;y;<br>}<br>const&nbsp;result&nbsp;=&nbsp;sum.call(null,&nbsp;3,&nbsp;8);<br><br>console.log(result);&nbsp;//&nbsp;11</code></pre>
     </div>
     <p class="paragraph">Metoda call() are o variantă similară numită apply(), care de asemenea apelează o funcție și primește un obiect ca primul parametru. Însă, în acest caz, al doilea parametru este un array de argumente:</p>
     <div class="code-inline">
      <pre><code>function&nbsp;sum(x,&nbsp;y){<br>&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;return&nbsp;x&nbsp;+&nbsp;y;<br>}<br>const&nbsp;result&nbsp;=&nbsp;sum.apply(null,&nbsp;[3,&nbsp;8]);<br><br>console.log(result);&nbsp;//&nbsp;11</code></pre>
     </div>
    </div>
   </main>
   <aside class="ad-section">
    <div class="ad-box">
     <p>Google Ad Here</p>
    </div>
    <div class="ad-box">
     <p>Promo: SQL Beginner Guide</p>
    </div>
   </aside>
  </div>
  <div class="lesson-navigation">
   <th:block th:if="${previousLesson != null}">
    <a th:href="@{'/lessons/' +
            ${#strings.toLowerCase(#strings.replace(previousLesson.chapter.topic.name, ' ', '-'))} + '/' +
            ${#strings.toLowerCase(#strings.replace(previousLesson.chapter.title, ' ', '-'))} + '/' +
            ${#strings.toLowerCase(#strings.replace(previousLesson.title, ' ', '-'))} }" class="nav-button">← Lecția anterioară</a>
   </th:block> <th:block th:if="${nextLesson != null}">
    <a th:href="@{'/lessons/' +
            ${#strings.toLowerCase(#strings.replace(nextLesson.chapter.topic.name, ' ', '-'))} + '/' +
            ${#strings.toLowerCase(#strings.replace(nextLesson.chapter.title, ' ', '-'))} + '/' +
            ${#strings.toLowerCase(#strings.replace(nextLesson.title, ' ', '-'))} }" class="nav-button">Lecția următoare →</a>
   </th:block>
  </div>
  <div th:replace="~{fragments/footer :: footer}"></div>
  <script th:src="@{/js/script.js}" defer></script>
 </body>
</html>
