<!doctype html>
<html lang="ro" xmlns:th="http://www.w3.org/1999/xhtml">
 <head>
    <link rel="icon" type="image/png" href="/nume-aplicatie/images/favicon.png">
    <script async src="https://www.googletagmanager.com/gtag/js?id=G-7Q2536ZKL2"></script>
    <script>
      window.dataLayer = window.dataLayer || [];
      window.gtag = function () { dataLayer.push(arguments); };
      gtag('consent', 'default', {
        'wait_for_update': 500,
        'region': ['RO'],
        'ad_storage': 'denied',
        'analytics_storage': 'denied',
        'ad_user_data': 'denied',
        'ad_personalization': 'denied'
      });
      gtag('js', new Date());
      gtag('config', 'G-7Q2536ZKL2');
    </script>


  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title th:text="${lesson.title}">Lesson</title>
  <link rel="stylesheet" th:href="@{/css/styles.css}">
  <style>body { background: #ffffff; }</style>
 </head>
 <body th:with="activeTopic='JavaScript', activeChapter='4.Programarea orientata pe obiect (OOP)', activeLesson='6.Obiecte in functii'">
  <button class="mobile-sidebar-toggle" onclick="toggleMobileSidebar()">☰</button>
  <div th:replace="~{fragments/nav :: nav}"></div>
  <div class="top-nav">
   <th:block th:each="topic : ${topics}">
    <a th:href="@{'/lectii/topic/' + ${topic.id}}" th:text="${topic.name}" th:classappend="${topic.id} == ${activeTopicId} ? 'active' : ''"> </a>
   </th:block>
  </div>
  <div class="layout">
   <div class="mobile-sidebar" id="mobileSidebar">
    <button class="close-btn" onclick="toggleSidebar()">✖</button>
    <ul class="chapter-list">
     <th:block th:each="chapter : ${chapters}">
      <li class="chapter-item" th:classappend="${chapter.id} == ${activeChapterId} ? 'open' : ''">
       <div class="chapter-title" onclick="toggleChapter(this)">
        <strong th:text="${chapter.title}"></strong> <span class="arrow">▼</span>
       </div>
       <ul class="lesson-list">
        <th:block th:each="lesson : ${chapter.lessons}">
         <li><a th:href="@{'/lessons/' +
    ${#strings.toLowerCase(#strings.replace(chapter.topic.name, ' ', '-'))} + '/' +
    ${#strings.toLowerCase(#strings.replace(chapter.title, ' ', '-'))} + '/' +
    ${#strings.toLowerCase(#strings.replace(lesson.title, ' ', '-'))} }" th:text="${lesson.title}" th:classappend="${lesson.id} == ${activeLessonId} ? 'active' : ''"> </a></li>
        </th:block>
       </ul></li>
     </th:block>
    </ul>
   </div>
   <aside class="sidebar">
    <ul class="sidebar-list">
     <th:block th:each="chapter : ${chapters}">
      <li class="chapter-item" th:classappend="${chapter.id} == ${activeChapterId} ? 'open' : ''">
       <div class="chapter-toggle" onclick="toggleLessons(this)">
        <span th:text="${chapter.title}">Chapter</span>
       </div>
       <ul class="lesson-list hidden">
        <th:block th:each="lesson : ${chapter.lessons}">
         <li><a th:href="@{'/lessons/' +
    ${#strings.toLowerCase(#strings.replace(chapter.topic.name, ' ', '-'))} + '/' +
    ${#strings.toLowerCase(#strings.replace(chapter.title, ' ', '-'))} + '/' +
    ${#strings.toLowerCase(#strings.replace(lesson.title, ' ', '-'))} }" th:text="${lesson.title}" th:classappend="${lesson.id} == ${activeLessonId} ? 'active' : ''"> </a></li>
        </th:block>
       </ul></li>
     </th:block>
    </ul>
   </aside>
   <main class="content">
    <div class="document-container">
     <h1 class="main-title">Obiecte în funcții</h1>
     <h2 class="subtitle">Obiect ca rezultat al unei funcții</h2>
     <p class="paragraph">Funcțiile pot returna obiecte. Acest lucru poate fi util în diverse situații. Să luăm, de exemplu, crearea unui obiect și să o plasăm într-o funcție separată:</p>
     <div class="code-inline">
      <pre><code>function&nbsp;createUser(pName,&nbsp;pAge)&nbsp;{<br>&nbsp;&nbsp;&nbsp;return&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;name:&nbsp;pName,<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;age:&nbsp;pAge,<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;print:&nbsp;function()&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;console.log(`Nume:&nbsp;${this.name}&nbsp;&nbsp;Vârstă:&nbsp;${this.age}`);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;};<br>};<br>const&nbsp;tom&nbsp;=&nbsp;createUser("Tom",&nbsp;26);<br>tom.print();<br>const&nbsp;alice&nbsp;=&nbsp;createUser("Alice",&nbsp;24);<br>alice.print();</code></pre>
     </div>
     <p class="paragraph">În acest caz, funcția createUser() primește valorile pName și pAge și creează un nou obiect pe baza acestora, care este rezultatul returnat. Rezultatul programului este:</p>
     <div class="code-inline">
      <pre><code>Nume:&nbsp;Tom&nbsp;&nbsp;Vârstă:&nbsp;26<br>Nume:&nbsp;Alice&nbsp;&nbsp;Vârstă:&nbsp;24</code></pre>
     </div>
     <p class="paragraph">Avantajul externalizării creării obiectului într-o funcție constă în faptul că ulterior putem crea mai multe obiecte similare cu valori diferite, adică să funcționăm ca o fabrică sau un constructor. În plus, într-o astfel de funcție putem verifica valorile furnizate pentru corectitudine și, în cazul în care sunt incorecte, putem reacționa în consecință.</p>
     <div class="code-inline">
      <pre><code>function&nbsp;createUser(pName,&nbsp;pAge)&nbsp;{<br>&nbsp;if&nbsp;(pAge&nbsp;&lt;&nbsp;1&nbsp;||&nbsp;pAge&nbsp;&gt;&nbsp;110)&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;dacă&nbsp;vârsta&nbsp;este&nbsp;mai&nbsp;mică&nbsp;de&nbsp;1&nbsp;sau&nbsp;mai&nbsp;mare&nbsp;de&nbsp;110<br>&nbsp;&nbsp;&nbsp;console.log("Vârsta&nbsp;nu&nbsp;este&nbsp;validă");<br>&nbsp;&nbsp;&nbsp;pAge&nbsp;=&nbsp;1;<br>&nbsp;}<br>&nbsp;return&nbsp;{<br>&nbsp;&nbsp;&nbsp;name:&nbsp;pName,<br>&nbsp;&nbsp;&nbsp;age:&nbsp;pAge,<br>&nbsp;&nbsp;&nbsp;print:&nbsp;function&nbsp;()&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;console.log(`Nume:&nbsp;${this.name}&nbsp;&nbsp;Vârstă:&nbsp;${this.age}`);<br>&nbsp;&nbsp;&nbsp;},<br>&nbsp;};<br>}<br><br>const&nbsp;tom&nbsp;=&nbsp;createUser("Tom",&nbsp;26);<br>tom.print();<br>const&nbsp;alice&nbsp;=&nbsp;createUser("Alice",&nbsp;12345);<br>alice.print();</code></pre>
     </div>
     <p class="paragraph">Aici se verifică parametrul pAge, care reprezintă vârsta utilizatorului. În mod teoretic, acesta poate fi orice număr, inclusiv unul care depășește limitele rezonabile, de exemplu, să fie negativ. În acest caz, verificăm dacă pAge corespunde acestor limite. Dacă valoarea pAge nu corespunde limitei, îi atribuim o valoare implicită - în acest caz, 1, și afișăm un mesaj diagnostic în consolă. Output-ul programului:</p>
     <div class="code-inline">
      <pre><code>Nume:&nbsp;Tom&nbsp;&nbsp;Vârstă:&nbsp;26<br>Vârsta&nbsp;nu&nbsp;este&nbsp;validă<br>Nume:&nbsp;Alice&nbsp;&nbsp;Vârstă:&nbsp;1</code></pre>
     </div>
     <p class="paragraph">Returnarea unui obiect poate fi utilă atunci când trebuie să întoarcem dintr-o funcție mai mult de un rezultat - în acest caz, le putem uni într-un singur obiect. De exemplu, o funcție primește un șir și găsește valorile minime și maxime în el:</p>
     <div class="code-inline">
      <pre><code>function&nbsp;getMinMax(numbers){<br><br>&nbsp;//&nbsp;dacă&nbsp;șirul&nbsp;este&nbsp;gol,&nbsp;valorile&nbsp;minime&nbsp;și&nbsp;maxime&nbsp;nu&nbsp;sunt&nbsp;definite<br>&nbsp;if(numbers.length&nbsp;===&nbsp;0)&nbsp;return&nbsp;{min:&nbsp;undefined,&nbsp;max:&nbsp;undefined};<br><br>&nbsp;let&nbsp;minNumber&nbsp;=&nbsp;numbers[0];<br>&nbsp;let&nbsp;maxNumber&nbsp;=&nbsp;numbers[0];<br>&nbsp;for(let&nbsp;i=1;&nbsp;i&lt;&nbsp;numbers.length;&nbsp;i++){<br>&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;if(minNumber&nbsp;&gt;&nbsp;numbers[i])&nbsp;minNumber&nbsp;=&nbsp;numbers[i];<br>&nbsp;&nbsp;&nbsp;if(maxNumber&nbsp;&lt;&nbsp;numbers[i])&nbsp;maxNumber&nbsp;=&nbsp;numbers[i];<br>&nbsp;}<br>&nbsp;return&nbsp;{min:&nbsp;minNumber,&nbsp;max:&nbsp;maxNumber};<br>}<br><br>const&nbsp;nums&nbsp;=&nbsp;[1,&nbsp;2,&nbsp;3,&nbsp;4,&nbsp;5];<br>const&nbsp;result&nbsp;=&nbsp;getMinMax(nums);<br>console.log("Min:",&nbsp;result.min);&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;Min:&nbsp;1<br>console.log("Max:",&nbsp;result.max);&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;Max:&nbsp;5</code></pre>
     </div>
     <p class="paragraph">Aici, în funcția getMinMax, primim un șir. Dacă șirul nu conține numere, returnăm un obiect în care câmpurile min și max au valori nedefinite. În caz contrar, parcurgem întregul șir și calculăm valorile maxime și minime, întorcându-le sub forma unui singur obiect.</p>
     <h2 class="subtitle">Obiectul ca parametru</h2>
     <p class="paragraph">La fel ca și celelalte valori, un obiect poate fi transmis ca parametru către o funcție.</p>
     <div class="code-inline">
      <pre><code>function&nbsp;printPerson(person){<br><br>&nbsp;console.log("Name:",&nbsp;person.name);<br>&nbsp;console.log("Age:",&nbsp;person.age);<br>}<br><br>const&nbsp;tom&nbsp;=&nbsp;{name:&nbsp;"Tom",&nbsp;age:&nbsp;39};<br>const&nbsp;alice&nbsp;=&nbsp;{name:&nbsp;"Alice",&nbsp;age:&nbsp;35};<br><br>printPerson(tom);<br>printPerson(alice);</code></pre>
     </div>
     <p class="paragraph">În acest exemplu, funcția printPerson primește un obiect, presupunând că acesta are două proprietăți: name și age.</p>
     <p class="paragraph">Trebuie să reținem că obiectele sunt tipuri de date referențiale, iar variabila/constantă/parametrul care reprezintă obiectul stochează de fapt o referință către obiect în memorie, nu obiectul în sine. Prin urmare, atunci când un obiect este transmis ca argument către o funcție, se transmite o copie a referinței către acel obiect. Și prin intermediul acestei referințe, funcția poate modifica diverse proprietăți ale obiectului.</p>
     <div class="code-inline">
      <pre><code>function&nbsp;setAge(person,&nbsp;pAge){<br><br>&nbsp;person.age&nbsp;=&nbsp;pAge;<br>}<br><br>const&nbsp;sam&nbsp;=&nbsp;{name:&nbsp;"Sam",&nbsp;age:&nbsp;29};<br>console.log("Before&nbsp;setAge:",&nbsp;sam.age);<br>setAge(sam,&nbsp;30);<br>console.log("After&nbsp;setAge:",&nbsp;sam.age);</code></pre>
     </div>
     <p class="paragraph">Aici, mai întâi definim constanta sam, care reprezintă un obiect cu proprietățile name și age:</p>
     <div class="code-inline">
      <pre><code>const&nbsp;sam&nbsp;=&nbsp;{name:&nbsp;"Sam",&nbsp;age:&nbsp;29};</code></pre>
     </div>
     <p class="paragraph">De fapt, constanta sam stochează o referință la zona de memorie în care este plasat obiectul.</p>
     <p class="paragraph">Apelăm apoi funcția setAge, care primește obiectul person și îi schimbă proprietatea age.</p>
     <div class="code-inline">
      <pre><code>setAge(sam,&nbsp;30);</code></pre>
     </div>
     <p class="paragraph">Deoarece obiectele sunt transmise prin referință, funcția setAge primește o copie a referinței stocate în constanta sam. Prin urmare, după aceasta, constanta sam și primul parametru al funcției setAge vor reprezenta două referințe diferite, dar vor indica către același obiect în memorie.</p>
     <p class="paragraph"></p>
     <p class="paragraph">Prin urmare, dacă modificăm proprietatea acestui obiect în interiorul funcției setAge, atunci accesând proprietatea obiectului sam aceasta se va schimba și ea, deoarece, în realitate, este același obiect. În final, browserul va afișa:</p>
     <p class="paragraph">Before setAge: 29 After setAge: 30</p>
     <p class="paragraph">Dar dacă alt obiect este atribuit parametrului în interiorul funcției, atunci referința schimbă efectiv valoarea sa și începe să indice către o altă zonă de memorie:</p>
     <div class="code-inline">
      <pre><code>function&nbsp;setDefault(person){<br><br>&nbsp;person&nbsp;=&nbsp;{name:&nbsp;"Undefined",&nbsp;age:&nbsp;0};<br>}<br><br>let&nbsp;sam&nbsp;=&nbsp;{name:&nbsp;"Sam",&nbsp;age:&nbsp;29};<br>console.log("Before&nbsp;setDefault:",&nbsp;sam.name);<br>setDefault(sam);<br>console.log("After&nbsp;setDefault:",&nbsp;sam.name);</code></pre>
     </div>
     <p class="paragraph">La transmiterea variabilei sam în funcția setDefault, parametrul acestei funcții și variabila sam vor reprezenta două link-uri diferite, dar vor indica către același obiect în memorie:</p>
     <div class="code-inline">
      <pre><code>setDefault(sam);	</code></pre>
     </div>
     <p class="paragraph">Dar apoi, în interiorul funcției, schimbăm valoarea parametrului:</p>
     <div class="code-inline">
      <pre><code>person&nbsp;=&nbsp;{name:&nbsp;"Undefined",&nbsp;age:&nbsp;0};</code></pre>
     </div>
     <p class="paragraph">În final, referinței stocate în parametrul person i se atribuie un nou obiect. Dar deoarece variabila sam și parametrul person reprezintă două link-uri diferite, această atribuire nu va afecta în niciun fel obiectul sam.</p>
    </div>
   </main>
   <aside class="ad-section">
    <div class="ad-box">
     <p>Google Ad Here</p>
    </div>
    <div class="ad-box">
     <p>Promo: SQL Beginner Guide</p>
    </div>
   </aside>
  </div>
  <div class="lesson-navigation">
   <th:block th:if="${previousLesson != null}">
    <a th:href="@{'/lessons/' +
            ${#strings.toLowerCase(#strings.replace(previousLesson.chapter.topic.name, ' ', '-'))} + '/' +
            ${#strings.toLowerCase(#strings.replace(previousLesson.chapter.title, ' ', '-'))} + '/' +
            ${#strings.toLowerCase(#strings.replace(previousLesson.title, ' ', '-'))} }" class="nav-button">← Lecția anterioară</a>
   </th:block> <th:block th:if="${nextLesson != null}">
    <a th:href="@{'/lessons/' +
            ${#strings.toLowerCase(#strings.replace(nextLesson.chapter.topic.name, ' ', '-'))} + '/' +
            ${#strings.toLowerCase(#strings.replace(nextLesson.chapter.title, ' ', '-'))} + '/' +
            ${#strings.toLowerCase(#strings.replace(nextLesson.title, ' ', '-'))} }" class="nav-button">Lecția următoare →</a>
   </th:block>
  </div>
  <div th:replace="~{fragments/footer :: footer}"></div>
  <script th:src="@{/js/script.js}" defer></script>
 </body>
</html>
