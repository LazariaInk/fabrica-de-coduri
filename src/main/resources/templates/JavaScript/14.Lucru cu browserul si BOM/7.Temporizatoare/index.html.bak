<!doctype html>
<html lang="ro" xmlns:th="http://www.w3.org/1999/xhtml">
 <head>
    <script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-4253419731329045"
            crossorigin="anonymous"></script>


  <link rel="canonical" th:href="${canonicalUrl}" />

    <link rel="icon" type="image/png" href="/nume-aplicatie/images/favicon.png">
    <script async src="https://www.googletagmanager.com/gtag/js?id=G-7Q2536ZKL2"></script>
    <script>
      window.dataLayer = window.dataLayer || [];
      window.gtag = function () { dataLayer.push(arguments); };
      gtag('consent', 'default', {
        'wait_for_update': 500,
        'region': ['RO'],
        'ad_storage': 'denied',
        'analytics_storage': 'denied',
        'ad_user_data': 'denied',
        'ad_personalization': 'denied'
      });
      gtag('js', new Date());
      gtag('config', 'G-7Q2536ZKL2');
    </script>


  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title th:text="${lesson.title}">Lesson</title>
  <link rel="stylesheet" th:href="@{/css/styles.css}">
  <style>body { background: #ffffff; }</style>
 </head>
 <body th:with="activeTopic='JavaScript', activeChapter='14.Lucru cu browserul si BOM', activeLesson='7.Temporizatoare'">
  <button class="mobile-sidebar-toggle" onclick="toggleMobileSidebar()">☰</button>
  <div th:replace="~{fragments/nav :: nav}"></div>
  <div class="top-nav">
   <th:block th:each="topic : ${topics}">
    <a th:href="@{'/lectii/topic/' + ${topic.id}}" th:text="${topic.name}" th:classappend="${topic.id} == ${activeTopicId} ? 'active' : ''"> </a>
   </th:block>
  </div>
  <div class="layout">
   <div class="mobile-sidebar" id="mobileSidebar">
    <button class="close-btn" onclick="toggleSidebar()">✖</button>
    <ul class="chapter-list">
     <th:block th:each="chapter : ${chapters}">
      <li class="chapter-item" th:classappend="${chapter.id} == ${activeChapterId} ? 'open' : ''">
       <div class="chapter-title" onclick="toggleChapter(this)">
        <strong th:text="${chapter.title}"></strong> <span class="arrow">▼</span>
       </div>
       <ul class="lesson-list">
        <th:block th:each="lesson : ${chapter.lessons}">
         <li><a th:href="@{'/lectii/' +
    ${#strings.toLowerCase(#strings.replace(chapter.topic.name, ' ', '-'))} + '/' +
    ${#strings.toLowerCase(#strings.replace(chapter.title, ' ', '-'))} + '/' +
    ${#strings.toLowerCase(#strings.replace(lesson.title, ' ', '-'))} }" th:text="${lesson.title}" th:classappend="${lesson.id} == ${activeLessonId} ? 'active' : ''"> </a></li>
        </th:block>
       </ul></li>
     </th:block>
    </ul>
   </div>
   <aside class="sidebar">
    <ul class="sidebar-list">
     <th:block th:each="chapter : ${chapters}">
      <li class="chapter-item" th:classappend="${chapter.id} == ${activeChapterId} ? 'open' : ''">
       <div class="chapter-toggle" onclick="toggleLessons(this)">
        <span th:text="${chapter.title}">Chapter</span>
       </div>
       <ul class="lesson-list hidden">
        <th:block th:each="lesson : ${chapter.lessons}">
         <li><a th:href="@{'/lectii/' +
    ${#strings.toLowerCase(#strings.replace(chapter.topic.name, ' ', '-'))} + '/' +
    ${#strings.toLowerCase(#strings.replace(chapter.title, ' ', '-'))} + '/' +
    ${#strings.toLowerCase(#strings.replace(lesson.title, ' ', '-'))} }" th:text="${lesson.title}" th:classappend="${lesson.id} == ${activeLessonId} ? 'active' : ''"> </a></li>
        </th:block>
       </ul></li>
     </th:block>
    </ul>
   </aside>
   <main class="content">
    <div class="document-container">
     <h1 class="main-title">Temporizatoare</h1>
     <p class="paragraph">Pentru efectuarea acțiunilor la intervale de timp stabilite, obiectul window oferă funcții de temporizare. Există două tipuri de temporizatoare: unele se execută doar o singură dată, iar altele continuu, la intervale de timp.</p>
     <h2 class="subtitle">Funcția setTimeout</h2>
     <p class="paragraph">Pentru executarea unică a acțiunilor după un interval de timp, este destinată funcția setTimeout(). Aceasta poate accepta doi parametri:</p>
     <div class="code-inline">
      <pre><code>const&nbsp;timerId&nbsp;=&nbsp;setTimeout(someFunction,&nbsp;period)</code></pre>
     </div>
     <p class="paragraph">Parametrul period indică perioada în milisecunde, după care va fi executată funcția din parametrul someFunction. Ca rezultat, funcția returnează id-ul temporizatorului.</p>
     <div class="code-inline">
      <pre><code>function&nbsp;printMessage()&nbsp;{&nbsp;console.log("Hello&nbsp;FDC.COM");}<br>setTimeout(printMessage,&nbsp;5000);</code></pre>
     </div>
     <p class="paragraph">În acest caz, după 5 secunde de la încărcarea paginii, va fi activată funcția printMessage.</p>
     <p class="paragraph">Pentru oprirea temporizatorului se utilizează funcția clearTimeout(), în care se transmite id-ul temporizatorului:</p>
     <div class="code-inline">
      <pre><code>function&nbsp;printMessage()&nbsp;{&nbsp;console.log("Hello&nbsp;FDC.COM");}<br>const&nbsp;timerId&nbsp;=&nbsp;setTimeout(printMessage,&nbsp;5000);<br>clearTimeout(timerId);</code></pre>
     </div>
     <h2 class="subtitle">Funcția setInterval</h2>
     <p class="paragraph">Funcțiile setInterval() și clearInterval() funcționează similar cu funcțiile setTimeout() și clearTimeout(), cu diferența că setInterval() execută continuu o anumită funcție la intervale de timp.</p>
     <p class="paragraph">De exemplu, scriem un mic program pentru afișarea orei curente:</p>
     <div class="code-inline">
      <pre><code>&lt;!DOCTYPE&nbsp;html&gt;<br>&lt;html&gt;<br>&lt;head&gt;<br>&nbsp;&nbsp;&nbsp;&lt;meta&nbsp;charset="utf-8"&nbsp;/&gt;<br>&nbsp;&nbsp;&nbsp;&lt;title&gt;FDC.COM&lt;/title&gt;<br>&lt;/head&gt;<br>&lt;body&gt;<br>&lt;div&nbsp;id="timer"&gt;&lt;/div&gt;<br>&lt;script&gt;<br>const&nbsp;timer&nbsp;=&nbsp;document.getElementById("timer");<br>function&nbsp;updateTime()&nbsp;{<br>&nbsp;&nbsp;&nbsp;const&nbsp;now&nbsp;=&nbsp;new&nbsp;Date();<br>&nbsp;&nbsp;&nbsp;timer.textContent&nbsp;=&nbsp;`${now.getHours()}:${now.getMinutes()}:${now.getSeconds()}`;<br>}<br>setInterval(updateTime,&nbsp;1000);<br>&lt;/script&gt;<br>&lt;/body&gt;<br>&lt;/html&gt;</code></pre>
     </div>
     <p class="paragraph">Aici, la fiecare secundă (1000 milisecunde), este apelată funcția updateTime(), care actualizează conținutul câmpului &lt;div id="timer"&gt;, setând ca text ora curentă.</p>
     <h2 class="subtitle">requestAnimationFrame()</h2>
     <p class="paragraph">Metoda requestAnimationFrame() acționează similar cu setInterval(), cu excepția că este mai orientată spre animații, lucrul cu grafica și are o serie de optimizări care îmbunătățesc performanța sa.</p>
     <div class="code-inline">
      <pre><code>&lt;!DOCTYPE&nbsp;html&gt;<br>&lt;html&gt;<br>&lt;head&gt;<br>&nbsp;&nbsp;&nbsp;&lt;meta&nbsp;charset="utf-8"&nbsp;/&gt;<br>&nbsp;&nbsp;&nbsp;&lt;style&gt;<br>&nbsp;&nbsp;&nbsp;#rect&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;margin:&nbsp;100px;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;width:&nbsp;100px;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;height:&nbsp;100px;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;background:&nbsp;#50c878;<br>&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&lt;/style&gt;<br>&lt;/head&gt;<br>&lt;body&gt;<br>&lt;div&nbsp;id="rect"&gt;&lt;/div&gt;<br>&lt;script&gt;<br>const&nbsp;square&nbsp;=&nbsp;document.getElementById("rect");<br>let&nbsp;offset&nbsp;=&nbsp;0;<br>let&nbsp;step&nbsp;=&nbsp;1;<br>function&nbsp;moveRect()&nbsp;{<br>&nbsp;&nbsp;&nbsp;if(offset&nbsp;&nbsp;&gt;=600)&nbsp;step&nbsp;=&nbsp;-1;<br>&nbsp;&nbsp;&nbsp;if(offset&nbsp;&nbsp;&lt;=0)&nbsp;step&nbsp;=&nbsp;1;<br>&nbsp;&nbsp;&nbsp;offset&nbsp;+=step;<br>&nbsp;&nbsp;&nbsp;square.style.marginLeft&nbsp;=&nbsp;offset&nbsp;+&nbsp;"px";<br>&nbsp;&nbsp;&nbsp;window.requestAnimationFrame(moveRect);<br>}<br>window.requestAnimationFrame(moveRect);<br>&lt;/script&gt;<br>&lt;/body&gt;<br>&lt;/html&gt;</code></pre>
     </div>
     <p class="paragraph">În metoda window.requestAnimationFrame() se transmite o funcție care va fi apelată de un număr stabilit de ori (de obicei 60) pe secundă.</p>
     <p class="paragraph">În acest caz, în această metodă este transmisă funcția moveRect, care schimbă unghiul de rotație al blocului pe pagină și apoi apelează din nou metoda window.requestAnimationFrame(moveRect).</p>
     <p class="paragraph">Ca rezultat al returnării, metoda window.requestAnimationFrame() returnează un id unic, care poate fi folosit ulterior pentru oprirea animației:</p>
     <div class="code-inline">
      <pre><code>//&nbsp;obținem&nbsp;id<br>const&nbsp;id&nbsp;=&nbsp;window.requestAnimationFrame(moveRect);<br><br>//&nbsp;oprim&nbsp;animația<br>window.cancelAnimationFrame(id);</code></pre>
     </div>
    </div>
   </main>
   <aside class="ad-section">
    <div class="ad-box">
     <p>Google Ad Here</p>
    </div>
    <div class="ad-box">
     <p>Promo: SQL Beginner Guide</p>
    </div>
   </aside>
  </div>
  <div class="lesson-navigation">
   <th:block th:if="${previousLesson != null}">
    <a th:href="@{'/lectii/' +
            ${#strings.toLowerCase(#strings.replace(previousLesson.chapter.topic.name, ' ', '-'))} + '/' +
            ${#strings.toLowerCase(#strings.replace(previousLesson.chapter.title, ' ', '-'))} + '/' +
            ${#strings.toLowerCase(#strings.replace(previousLesson.title, ' ', '-'))} }" class="nav-button">← Lecția anterioară</a>
   </th:block> <th:block th:if="${nextLesson != null}">
    <a th:href="@{'/lectii/' +
            ${#strings.toLowerCase(#strings.replace(nextLesson.chapter.topic.name, ' ', '-'))} + '/' +
            ${#strings.toLowerCase(#strings.replace(nextLesson.chapter.title, ' ', '-'))} + '/' +
            ${#strings.toLowerCase(#strings.replace(nextLesson.title, ' ', '-'))} }" class="nav-button">Lecția următoare →</a>
   </th:block>
  </div>
  <div th:replace="~{fragments/footer :: footer}"></div>
  <script th:src="@{/js/script.js}" defer></script>
 </body>
</html>
