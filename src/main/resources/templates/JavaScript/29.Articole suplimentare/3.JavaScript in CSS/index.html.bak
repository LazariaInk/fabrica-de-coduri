<!doctype html>
<html lang="ro" xmlns:th="http://www.w3.org/1999/xhtml">
 <head>
    <link rel="icon" type="image/png" href="/nume-aplicatie/images/favicon.png">
    <script async src="https://www.googletagmanager.com/gtag/js?id=G-7Q2536ZKL2"></script>
    <script>
      window.dataLayer = window.dataLayer || [];
      window.gtag = function () { dataLayer.push(arguments); };
      gtag('consent', 'default', {
        'wait_for_update': 500,
        'region': ['RO'],
        'ad_storage': 'denied',
        'analytics_storage': 'denied',
        'ad_user_data': 'denied',
        'ad_personalization': 'denied'
      });
      gtag('js', new Date());
      gtag('config', 'G-7Q2536ZKL2');
    </script>


  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title th:text="${lesson.title}">Lesson</title>
  <link rel="stylesheet" th:href="@{/css/styles.css}">
  <style>body { background: #ffffff; }</style>
 </head>
 <body th:with="activeTopic='JavaScript', activeChapter='29.Articole suplimentare', activeLesson='3.JavaScript in CSS'">
  <button class="mobile-sidebar-toggle" onclick="toggleMobileSidebar()">☰</button>
  <div th:replace="~{fragments/nav :: nav}"></div>
  <div class="top-nav">
   <th:block th:each="topic : ${topics}">
    <a th:href="@{'/lectii/topic/' + ${topic.id}}" th:text="${topic.name}" th:classappend="${topic.id} == ${activeTopicId} ? 'active' : ''"> </a>
   </th:block>
  </div>
  <div class="layout">
   <div class="mobile-sidebar" id="mobileSidebar">
    <button class="close-btn" onclick="toggleSidebar()">✖</button>
    <ul class="chapter-list">
     <th:block th:each="chapter : ${chapters}">
      <li class="chapter-item" th:classappend="${chapter.id} == ${activeChapterId} ? 'open' : ''">
       <div class="chapter-title" onclick="toggleChapter(this)">
        <strong th:text="${chapter.title}"></strong> <span class="arrow">▼</span>
       </div>
       <ul class="lesson-list">
        <th:block th:each="lesson : ${chapter.lessons}">
         <li><a th:href="@{'/lessons/' +
    ${#strings.toLowerCase(#strings.replace(chapter.topic.name, ' ', '-'))} + '/' +
    ${#strings.toLowerCase(#strings.replace(chapter.title, ' ', '-'))} + '/' +
    ${#strings.toLowerCase(#strings.replace(lesson.title, ' ', '-'))} }" th:text="${lesson.title}" th:classappend="${lesson.id} == ${activeLessonId} ? 'active' : ''"> </a></li>
        </th:block>
       </ul></li>
     </th:block>
    </ul>
   </div>
   <aside class="sidebar">
    <ul class="sidebar-list">
     <th:block th:each="chapter : ${chapters}">
      <li class="chapter-item" th:classappend="${chapter.id} == ${activeChapterId} ? 'open' : ''">
       <div class="chapter-toggle" onclick="toggleLessons(this)">
        <span th:text="${chapter.title}">Chapter</span>
       </div>
       <ul class="lesson-list hidden">
        <th:block th:each="lesson : ${chapter.lessons}">
         <li><a th:href="@{'/lessons/' +
    ${#strings.toLowerCase(#strings.replace(chapter.topic.name, ' ', '-'))} + '/' +
    ${#strings.toLowerCase(#strings.replace(chapter.title, ' ', '-'))} + '/' +
    ${#strings.toLowerCase(#strings.replace(lesson.title, ' ', '-'))} }" th:text="${lesson.title}" th:classappend="${lesson.id} == ${activeLessonId} ? 'active' : ''"> </a></li>
        </th:block>
       </ul></li>
     </th:block>
    </ul>
   </aside>
   <main class="content">
    <div class="document-container">
     <h1 class="main-title">JavaScript în CSS</h1>
     <p class="paragraph">CSS permite stocarea codului JavaScript în variabile. Deși păstrarea codului JS în variabile poate părea lipsită de sens, acest cod poate fi executat de browser ca orice cod standard JavaScript. Să luăm în considerare un exemplu simplu:</p>
     <div class="code-inline">
      <pre><code>&lt;!DOCTYPE&nbsp;html&gt;<br>&lt;html&gt;<br>&lt;head&gt;<br>&nbsp;&nbsp;&nbsp;&lt;meta&nbsp;charset="utf-8"&nbsp;/&gt;<br>&nbsp;&nbsp;&nbsp;&lt;title&gt;FDC.COM&lt;/title&gt;<br>&nbsp;&nbsp;&nbsp;&lt;style&gt;<br>&nbsp;&nbsp;&nbsp;:root&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;--script:&nbsp;console.log("Salut&nbsp;de&nbsp;la&nbsp;CSS");<br>&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&lt;/style&gt;<br>&lt;/head&gt;<br>&lt;body&gt;<br>&lt;script&gt;<br>//&nbsp;obținem&nbsp;stilurile&nbsp;documentului<br>const&nbsp;style&nbsp;=&nbsp;getComputedStyle(document.documentElement);<br>//&nbsp;obținem&nbsp;valoarea&nbsp;proprietății&nbsp;--script<br>const&nbsp;script&nbsp;=&nbsp;style.getPropertyValue("--script");<br>//&nbsp;Executăm&nbsp;codul&nbsp;din&nbsp;proprietatea&nbsp;--script<br>new&nbsp;Function(script)();<br><br>//&nbsp;variantă&nbsp;alternativă&nbsp;de&nbsp;execuție<br>//&nbsp;eval(script);<br>&lt;/script&gt;<br>&lt;/body&gt;<br>&lt;/html&gt;</code></pre>
     </div>
     <p class="paragraph">Aici proprietatea sau variabila CSS --script conține cod JS care afișează un mesaj în consola browserului.</p>
     <p class="paragraph">Pentru a executa acest cod, mai întâi obținem stilurile documentului:</p>
     <div class="code-inline">
      <pre><code>const&nbsp;style&nbsp;=&nbsp;getComputedStyle(document.documentElement);</code></pre>
     </div>
     <p class="paragraph">Apoi, printre aceste stiluri, obținem definiția proprietății --script:</p>
     <div class="code-inline">
      <pre><code>const&nbsp;script&nbsp;=&nbsp;style.getPropertyValue("--script");</code></pre>
     </div>
     <p class="paragraph">Apoi executăm codul:</p>
     <div class="code-inline">
      <pre><code>new&nbsp;Function(script)();</code></pre>
     </div>
     <p class="paragraph">Ca alternativă pentru executarea codului, putem apela funcția eval():</p>
     <div class="code-inline">
      <pre><code>eval(script);</code></pre>
     </div>
     <p class="paragraph">În final, mesajul corespunzător va fi afișat în consola browserului.</p>
     <div class="image-container">
      <img th:src="@{/images/JavaScript/29.Articole%20suplimentare/3.JavaScript%20in%20CSS/images/image1.png}" alt="" class="responsive-image">
     </div>
     <p class="paragraph">În calitate de cod stocat, pot fi aplicate expresii JavaScript mai complexe. De exemplu, folosim construcția if:</p>
     <div class="code-inline">
      <pre><code>&lt;!DOCTYPE&nbsp;html&gt;<br>&lt;html&gt;<br>&lt;head&gt;<br>&nbsp;&nbsp;&nbsp;&lt;meta&nbsp;charset="utf-8"&nbsp;/&gt;<br>&nbsp;&nbsp;&nbsp;&lt;title&gt;FDC.COM&lt;/title&gt;<br>&nbsp;&nbsp;&nbsp;&lt;style&gt;<br>&nbsp;&nbsp;&nbsp;:root&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;--script:&nbsp;if&nbsp;(x&nbsp;&gt;&nbsp;5)&nbsp;document.body.style.background&nbsp;=&nbsp;"blue";<br>&nbsp;&nbsp;&nbsp;}<br>&lt;/style&gt;<br>&lt;/head&gt;<br>&lt;body&gt;<br>&lt;script&gt;<br>let&nbsp;x&nbsp;=&nbsp;10;<br><br>const&nbsp;style&nbsp;=&nbsp;getComputedStyle(document.documentElement);<br>const&nbsp;script&nbsp;=&nbsp;style.getPropertyValue("--script");<br>eval(script);<br>&lt;/script&gt;<br>&lt;/body&gt;<br>&lt;/html&gt;</code></pre>
     </div>
     <p class="paragraph">Aici, dacă valoarea variabilei x este mai mare de 5, atunci colorăm spațiul elementului body în culoarea albastră.</p>
     <div class="image-container">
      <img th:src="@{/images/JavaScript/29.Articole%20suplimentare/3.JavaScript%20in%20CSS/images/image2.png}" alt="" class="responsive-image">
     </div>
     <p class="paragraph">În ce situații astfel de capacități pot fi de folos practic? La prima vedere, nu sunt prea multe situații. Și la o simplă gândire, singurul lucru care vine în minte este un anumit tip de jurnalizare, care, într-un fel sau altul, este legat de setările din CSS. De exemplu, am putea dori să jurnalizăm lățimea minimă a ferestrei browserului folosit de utilizator. În acest caz, am putea scrie ceva de genul următor:</p>
     <div class="code-inline">
      <pre><code>&lt;!DOCTYPE&nbsp;html&gt;<br>&lt;html&gt;<br>&lt;head&gt;<br>&nbsp;&nbsp;&nbsp;&lt;meta&nbsp;charset="utf-8"&nbsp;/&gt;<br>&nbsp;&nbsp;&nbsp;&lt;title&gt;FDC.COM&lt;/title&gt;<br>&nbsp;&nbsp;&nbsp;&lt;style&gt;<br>&nbsp;&nbsp;&nbsp;:root{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;--log:&nbsp;localStorage["minwidth"]&nbsp;=&nbsp;0;<br>&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;@media&nbsp;(min-width:500px)&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;:root{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;--log:&nbsp;localStorage["minwidth"]&nbsp;=&nbsp;500;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;@media&nbsp;(min-width:800px)&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;:root{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;--log:&nbsp;localStorage["minwidth"]&nbsp;=&nbsp;800;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;@media&nbsp;(min-width:1200px)&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;:root{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;--log:&nbsp;localStorage["minwidth"]&nbsp;=&nbsp;1200;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&lt;/style&gt;<br>&lt;/head&gt;<br>&lt;body&gt;<br>&lt;script&gt;<br>window.onload&nbsp;=&nbsp;window.onresize&nbsp;=&nbsp;()=&gt;{<br>&nbsp;&nbsp;&nbsp;const&nbsp;log&nbsp;=&nbsp;getComputedStyle(document.documentElement).getPropertyValue("--log");<br>&nbsp;&nbsp;&nbsp;eval(log);<br>};<br>&lt;/script&gt;<br>&lt;/body&gt;<br>&lt;/html&gt;</code></pre>
     </div>
     <p class="paragraph">Aici în localStorage scriem un element cu cheia "minwidth", valoarea căruia depinde de valorile media-query. În codul JavaScript, definim gestionarul de evenimente window.onresize și window.onload, astfel încât la încărcarea paginii, precum și la schimbarea lățimii ferestrei browserului, valoarea din localStorage să fie rescrisă.</p>
     <div class="image-container">
      <img th:src="@{/images/JavaScript/29.Articole%20suplimentare/3.JavaScript%20in%20CSS/images/image3.png}" alt="" class="responsive-image">
     </div>
    </div>
   </main>
   <aside class="ad-section">
    <div class="ad-box">
     <p>Google Ad Here</p>
    </div>
    <div class="ad-box">
     <p>Promo: SQL Beginner Guide</p>
    </div>
   </aside>
  </div>
  <div class="lesson-navigation">
   <th:block th:if="${previousLesson != null}">
    <a th:href="@{'/lessons/' +
            ${#strings.toLowerCase(#strings.replace(previousLesson.chapter.topic.name, ' ', '-'))} + '/' +
            ${#strings.toLowerCase(#strings.replace(previousLesson.chapter.title, ' ', '-'))} + '/' +
            ${#strings.toLowerCase(#strings.replace(previousLesson.title, ' ', '-'))} }" class="nav-button">← Lecția anterioară</a>
   </th:block> <th:block th:if="${nextLesson != null}">
    <a th:href="@{'/lessons/' +
            ${#strings.toLowerCase(#strings.replace(nextLesson.chapter.topic.name, ' ', '-'))} + '/' +
            ${#strings.toLowerCase(#strings.replace(nextLesson.chapter.title, ' ', '-'))} + '/' +
            ${#strings.toLowerCase(#strings.replace(nextLesson.title, ' ', '-'))} }" class="nav-button">Lecția următoare →</a>
   </th:block>
  </div>
  <div th:replace="~{fragments/footer :: footer}"></div>
  <script th:src="@{/js/script.js}" defer></script>
 </body>
</html>
