<!doctype html>
<html lang="ro" xmlns:th="http://www.w3.org/1999/xhtml">
 <head>
    <script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-4253419731329045"
            crossorigin="anonymous"></script>


  <link rel="canonical" th:href="${canonicalUrl}" />

    <link rel="icon" type="image/png" href="/nume-aplicatie/images/favicon.png">
    <script async src="https://www.googletagmanager.com/gtag/js?id=G-7Q2536ZKL2"></script>
    <script>
      window.dataLayer = window.dataLayer || [];
      window.gtag = function () { dataLayer.push(arguments); };
      gtag('consent', 'default', {
        'wait_for_update': 500,
        'region': ['RO'],
        'ad_storage': 'denied',
        'analytics_storage': 'denied',
        'ad_user_data': 'denied',
        'ad_personalization': 'denied'
      });
      gtag('js', new Date());
      gtag('config', 'G-7Q2536ZKL2');
    </script>


  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title th:text="${lesson.title}">Lesson</title>
  <link rel="stylesheet" th:href="@{/css/styles.css}">
  <style>body { background: #ffffff; }</style>
 </head>
 <body th:with="activeTopic='JavaScript', activeChapter='13.Lucrul cu Formulare', activeLesson='7.Controlul validarii formularelor'">
  <button class="mobile-sidebar-toggle" onclick="toggleMobileSidebar()">☰</button>
  <div th:replace="~{fragments/nav :: nav}"></div>
  <div class="top-nav">
   <th:block th:each="topic : ${topics}">
    <a th:href="@{'/lectii/topic/' + ${topic.id}}" th:text="${topic.name}" th:classappend="${topic.id} == ${activeTopicId} ? 'active' : ''"> </a>
   </th:block>
  </div>
  <div class="layout">
   <div class="mobile-sidebar" id="mobileSidebar">
    <button class="close-btn" onclick="toggleSidebar()">✖</button>
    <ul class="chapter-list">
     <th:block th:each="chapter : ${chapters}">
      <li class="chapter-item" th:classappend="${chapter.id} == ${activeChapterId} ? 'open' : ''">
       <div class="chapter-title" onclick="toggleChapter(this)">
        <strong th:text="${chapter.title}"></strong> <span class="arrow">▼</span>
       </div>
       <ul class="lesson-list">
        <th:block th:each="lesson : ${chapter.lessons}">
         <li><a th:href="@{'/lectii/' +
    ${#strings.toLowerCase(#strings.replace(chapter.topic.name, ' ', '-'))} + '/' +
    ${#strings.toLowerCase(#strings.replace(chapter.title, ' ', '-'))} + '/' +
    ${#strings.toLowerCase(#strings.replace(lesson.title, ' ', '-'))} }" th:text="${lesson.title}" th:classappend="${lesson.id} == ${activeLessonId} ? 'active' : ''"> </a></li>
        </th:block>
       </ul></li>
     </th:block>
    </ul>
   </div>
   <aside class="sidebar">
    <ul class="sidebar-list">
     <th:block th:each="chapter : ${chapters}">
      <li class="chapter-item" th:classappend="${chapter.id} == ${activeChapterId} ? 'open' : ''">
       <div class="chapter-toggle" onclick="toggleLessons(this)">
        <span th:text="${chapter.title}">Chapter</span>
       </div>
       <ul class="lesson-list hidden">
        <th:block th:each="lesson : ${chapter.lessons}">
         <li><a th:href="@{'/lectii/' +
    ${#strings.toLowerCase(#strings.replace(chapter.topic.name, ' ', '-'))} + '/' +
    ${#strings.toLowerCase(#strings.replace(chapter.title, ' ', '-'))} + '/' +
    ${#strings.toLowerCase(#strings.replace(lesson.title, ' ', '-'))} }" th:text="${lesson.title}" th:classappend="${lesson.id} == ${activeLessonId} ? 'active' : ''"> </a></li>
        </th:block>
       </ul></li>
     </th:block>
    </ul>
   </aside>
   <main class="content">
    <div class="document-container">
     <h1 class="main-title">Controlul validării formularelor</h1>
     <h2 class="subtitle">Metode de validare</h2>
     <p class="paragraph">În tema anterioară am văzut cum se poate obține starea folosind proprietățile Constraint Validation API. Dar, în plus față de proprietăți, Constraint Validation API oferă o serie de metode care permit controlul validării:</p>
     <ul class="enumeration">
      <li>checkValidity(): verifică dacă elementul formularului sau întregul formular trece validarea. Această metodă poate fi apelată atât pentru formular în ansamblu, cât și pentru elementele sale individuale. Un element al formularului este valid dacă respectă toate atributele de validare. Un formular este valid dacă toate elementele sale trec validarea. Dacă formularul sau elementele sale trec validarea, atunci se returnează true, altfel se returnează false</li>
      <li>reportValidity(): de asemenea, verifică dacă elementul formularului sau întregul formular trece validarea. Cu toate acestea, spre deosebire de checkValidity(), această metodă afișează și erorile de validare. Această metodă poate fi, de asemenea, apelată atât pentru formular în ansamblu, cât și pentru elementele sale individuale</li>
      <li>setCustomValidity(): această metodă permite configurarea mesajelor de validare</li>
     </ul>
     <p class="paragraph">De exemplu, verificarea validității formularului și a elementelor sale folosind checkValidity():</p>
     <div class="code-inline">
      <pre><code>&lt;form&nbsp;id="registerForm"&nbsp;name="registerForm"&nbsp;method="post"&nbsp;action="register"&gt;<br>&lt;p&gt;<br>&nbsp;&nbsp;&nbsp;&lt;label&nbsp;for="username"&gt;Username:&lt;/label&gt;&lt;br&gt;<br>&nbsp;&nbsp;&nbsp;&lt;input&nbsp;id="username"&nbsp;name="username"&nbsp;maxlength="20"&nbsp;minlength="3"&nbsp;required&gt;<br>&lt;/p&gt;<br>&lt;p&gt;<br>&nbsp;&nbsp;&nbsp;&lt;label&nbsp;for="age"&gt;Age:&lt;/label&gt;&lt;br&gt;<br>&nbsp;&nbsp;&nbsp;&lt;input&nbsp;type="number"&nbsp;id="age"&nbsp;name="age"&nbsp;min="1"&nbsp;max="110"&nbsp;required&gt;<br>&lt;/p&gt;<br>&lt;button&nbsp;type="submit"&nbsp;id="submit"&nbsp;name="submit"&gt;Register&lt;/button&gt;<br>&lt;/form&gt;<br>&lt;script&gt;<br>const&nbsp;registerForm&nbsp;=&nbsp;document.registerForm;<br>const&nbsp;submit&nbsp;=&nbsp;registerForm.submit;<br>submit.addEventListener("click",&nbsp;validate);<br><br>function&nbsp;validate(){<br>&nbsp;&nbsp;&nbsp;if(!registerForm.username.checkValidity()){<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;console.log("Username&nbsp;is&nbsp;not&nbsp;valid");<br>&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;if(!registerForm.age.checkValidity()){<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;console.log("Age&nbsp;is&nbsp;not&nbsp;valid");<br>&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;if(!registerForm.checkValidity()){<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;console.log("Form&nbsp;data&nbsp;is&nbsp;not&nbsp;valid");<br>&nbsp;&nbsp;&nbsp;}<br>}<br>&lt;/script&gt;</code></pre>
     </div>
     <p class="paragraph">Pentru elemente, apelarea acestei metode este analogă verificării validității folosind proprietatea validity.valid:</p>
     <div class="code-inline">
      <pre><code>function&nbsp;validate(){<br>&nbsp;&nbsp;&nbsp;if(!registerForm.username.validity.valid){<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;console.log("Username&nbsp;is&nbsp;not&nbsp;valid");<br>&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;if(!registerForm.age.validity.valid){<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;console.log("Age&nbsp;is&nbsp;not&nbsp;valid");<br>&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;if(!registerForm.checkValidity()){<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;console.log("Form&nbsp;data&nbsp;is&nbsp;not&nbsp;valid");<br>&nbsp;&nbsp;&nbsp;}<br>}</code></pre>
     </div>
     <h2 class="subtitle">Configurarea propriilor mesaje de validare</h2>
     <p class="paragraph">Pentru configurarea propriilor mesaje de validare, în metoda setCustomValidity() se transmite mesajul necesar:</p>
     <div class="code-inline">
      <pre><code>&lt;form&nbsp;id="registerForm"&nbsp;name="registerForm"&gt;<br>&lt;p&gt;<br>&nbsp;&nbsp;&nbsp;&lt;label&nbsp;for="username"&gt;Username:&lt;/label&gt;&lt;br&gt;<br>&nbsp;&nbsp;&nbsp;&lt;input&nbsp;id="username"&nbsp;name="username"&nbsp;maxlength="20"&nbsp;minlength="3"&nbsp;required&gt;<br>&lt;/p&gt;<br>&lt;button&nbsp;type="submit"&nbsp;id="submit"&nbsp;name="submit"&gt;Register&lt;/button&gt;<br>&lt;/form&gt;<br>&lt;script&gt;<br>const&nbsp;registerForm&nbsp;=&nbsp;document.registerForm;<br>const&nbsp;submit&nbsp;=&nbsp;registerForm.submit;<br>submit.addEventListener("click",&nbsp;validate);<br><br>function&nbsp;validate(){<br>&nbsp;&nbsp;&nbsp;if(registerForm.username.validity.valueMissing){<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;registerForm.username.setCustomValidity("Este&nbsp;necesar&nbsp;să&nbsp;introduceți&nbsp;un&nbsp;nume&nbsp;de&nbsp;utilizator");<br>&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;if(registerForm.username.validity.tooLong){<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;registerForm.username.setCustomValidity("Numele&nbsp;de&nbsp;utilizator&nbsp;nu&nbsp;trebuie&nbsp;să&nbsp;depășească&nbsp;20&nbsp;de&nbsp;caractere");<br>&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;if(registerForm.username.validity.tooShort){<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;registerForm.username.setCustomValidity("Numele&nbsp;de&nbsp;utilizator&nbsp;nu&nbsp;trebuie&nbsp;să&nbsp;fie&nbsp;mai&nbsp;scurt&nbsp;de&nbsp;3&nbsp;caractere");<br>&nbsp;&nbsp;&nbsp;}<br>}<br>&lt;/script&gt;</code></pre>
     </div>
     <p class="paragraph">Aici, la trimiterea formularului, verificăm valoarea câmpului username. În funcție de regula de validare nerespectată, stabilim mesajul de eroare corespunzător. Și browserul va folosi de asemenea aceste mesaje.</p>
     <div class="image-container">
      <img th:src="@{/images/JavaScript/13.Lucrul%20cu%20Formulare/7.Controlul%20validarii%20formularelor/images/image1.png}" alt="" class="responsive-image">
     </div>
     <h2 class="subtitle">Definirea propriilor reguli de validare</h2>
     <p class="paragraph">La validare nu suntem limitați la regulile de validare încorporate, care sunt aplicate elementului formularului prin atributele required, minlength, maxlength, min, max sau în funcție de tipul câmpului de intrare. Dacă este necesar, putem defini propria noastră logică de validare pentru scenarii personalizate. De exemplu, să luăm cel mai simplu exemplu: numele de utilizator nu trebuie să fie "admin". Pentru asta, vom defini următorul program:</p>
     <div class="code-inline">
      <pre><code>&lt;form&nbsp;id="registerForm"&nbsp;name="registerForm"&gt;<br>&lt;p&gt;<br>&nbsp;&nbsp;&nbsp;&lt;label&nbsp;for="username"&gt;Username:&lt;/label&gt;&lt;br&gt;<br>&nbsp;&nbsp;&nbsp;&lt;input&nbsp;id="username"&nbsp;name="username"&nbsp;maxlength="20"&nbsp;minlength="3"&nbsp;required&gt;<br>&lt;/p&gt;<br>&lt;button&nbsp;type="submit"&nbsp;id="submit"&nbsp;name="submit"&gt;Register&lt;/button&gt;<br>&lt;/form&gt;<br>&lt;script&gt;<br>const&nbsp;usernameField&nbsp;=&nbsp;document.registerForm.username;<br>const&nbsp;submit&nbsp;=&nbsp;registerForm.submit;<br>submit.addEventListener("click",&nbsp;validate);<br><br>function&nbsp;validate(){<br>&nbsp;&nbsp;&nbsp;if(usernameField.value&nbsp;===&nbsp;"admin"){<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;usernameField.setCustomValidity("Numele&nbsp;de&nbsp;utilizator&nbsp;nu&nbsp;este&nbsp;permis");<br>&nbsp;&nbsp;&nbsp;}<br>}<br>&lt;/script&gt;</code></pre>
     </div>
     <p class="paragraph">În funcția validate verificăm valoarea câmpului usernameField. Dacă este egală cu "admin", atunci setăm un mesaj de eroare.</p>
     <div class="image-container">
      <img th:src="@{/images/JavaScript/13.Lucrul%20cu%20Formulare/7.Controlul%20validarii%20formularelor/images/image2.png}" alt="" class="responsive-image">
     </div>
     <p class="paragraph">Deoarece am setat un mesaj de eroare, câmpul username nu mai trece validarea, chiar dacă corespunde atributelor required, maxlength și minlength. În consecință, putem obține acest mesaj prin proprietatea validationMessage:</p>
     <div class="code-inline">
      <pre><code>&lt;!DOCTYPE&nbsp;html&gt;<br>&lt;html&gt;<br>&lt;head&gt;<br>&nbsp;&nbsp;&nbsp;&lt;meta&nbsp;charset="utf-8"&nbsp;/&gt;<br>&nbsp;&nbsp;&nbsp;&lt;title&gt;FDC.COM&lt;/title&gt;<br>&nbsp;&nbsp;&nbsp;&lt;style&gt;<br>&nbsp;&nbsp;&nbsp;input&nbsp;{width:&nbsp;150px;}<br>&nbsp;&nbsp;&nbsp;input:invalid&nbsp;{border-color:&nbsp;red;&nbsp;}<br>&nbsp;&nbsp;&nbsp;input:valid&nbsp;{&nbsp;border-color:&nbsp;green;}<br>&nbsp;&nbsp;&nbsp;#usernameErrors&nbsp;{padding:5px;background-color:&nbsp;#ffcccc;&nbsp;color:#b33939;&nbsp;display:none;}<br>&nbsp;&nbsp;&nbsp;&lt;/style&gt;<br>&lt;/head&gt;<br>&lt;body&gt;<br>&lt;form&nbsp;id="registerForm"&nbsp;name="registerForm"&gt;<br>&lt;p&gt;<br>&nbsp;&nbsp;&nbsp;&lt;label&nbsp;for="username"&gt;Username:&lt;/label&gt;&lt;br&gt;<br>&nbsp;&nbsp;&nbsp;&lt;input&nbsp;id="username"&nbsp;name="username"&nbsp;maxlength="20"&nbsp;minlength="3"&nbsp;required&gt;<br>&nbsp;&nbsp;&nbsp;&lt;div&nbsp;id="usernameErrors"&gt;&lt;/div&gt;<br>&lt;/p&gt;<br>&lt;button&nbsp;type="submit"&nbsp;id="submit"&nbsp;name="submit"&gt;Register&lt;/button&gt;<br>&lt;/form&gt;<br>&lt;script&gt;<br>const&nbsp;usernameErrors&nbsp;=&nbsp;document.getElementById("usernameErrors");<br>const&nbsp;usernameField&nbsp;=&nbsp;document.registerForm.username;<br>const&nbsp;submit&nbsp;=&nbsp;registerForm.submit;<br>submit.addEventListener("click",&nbsp;validate);<br><br>function&nbsp;validate(e){<br>&nbsp;&nbsp;&nbsp;if(usernameField.value&nbsp;===&nbsp;"admin"){<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;usernameField.setCustomValidity("Numele&nbsp;de&nbsp;utilizator&nbsp;nu&nbsp;este&nbsp;permis");<br>&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;//&nbsp;verificăm&nbsp;validitatea<br>&nbsp;&nbsp;&nbsp;if(!usernameField.validity.valid){<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;usernameErrors.textContent&nbsp;=&nbsp;usernameField.validationMessage;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;usernameErrors.style.display&nbsp;=&nbsp;"block";<br>&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;else{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;usernameErrors.textContent&nbsp;=&nbsp;"";<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;usernameErrors.style.display&nbsp;=&nbsp;"none";<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;e.preventDefault();&nbsp;//&nbsp;prevenim&nbsp;trimiterea&nbsp;formularului&nbsp;și&nbsp;reîncărcarea&nbsp;paginii<br>&nbsp;&nbsp;&nbsp;}<br>}<br>&lt;/script&gt;<br>&lt;/body&gt;<br>&lt;/html&gt;</code></pre>
     </div>
     <div class="image-container">
      <img th:src="@{/images/JavaScript/13.Lucrul%20cu%20Formulare/7.Controlul%20validarii%20formularelor/images/image3.png}" alt="" class="responsive-image">
     </div>
    </div>
   </main>
   <aside class="ad-section">
    <div class="ad-box">
     <p>Google Ad Here</p>
    </div>
    <div class="ad-box">
     <p>Promo: SQL Beginner Guide</p>
    </div>
   </aside>
  </div>
  <div class="lesson-navigation">
   <th:block th:if="${previousLesson != null}">
    <a th:href="@{'/lectii/' +
            ${#strings.toLowerCase(#strings.replace(previousLesson.chapter.topic.name, ' ', '-'))} + '/' +
            ${#strings.toLowerCase(#strings.replace(previousLesson.chapter.title, ' ', '-'))} + '/' +
            ${#strings.toLowerCase(#strings.replace(previousLesson.title, ' ', '-'))} }" class="nav-button">← Lecția anterioară</a>
   </th:block> <th:block th:if="${nextLesson != null}">
    <a th:href="@{'/lectii/' +
            ${#strings.toLowerCase(#strings.replace(nextLesson.chapter.topic.name, ' ', '-'))} + '/' +
            ${#strings.toLowerCase(#strings.replace(nextLesson.chapter.title, ' ', '-'))} + '/' +
            ${#strings.toLowerCase(#strings.replace(nextLesson.title, ' ', '-'))} }" class="nav-button">Lecția următoare →</a>
   </th:block>
  </div>
  <div th:replace="~{fragments/footer :: footer}"></div>
  <script th:src="@{/js/script.js}" defer></script>
 </body>
</html>
