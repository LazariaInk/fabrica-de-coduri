<!doctype html>
<html lang="ro" xmlns:th="http://www.w3.org/1999/xhtml">
 <head>
    <link rel="icon" type="image/png" href="/nume-aplicatie/images/favicon.png">
    <script async src="https://www.googletagmanager.com/gtag/js?id=G-7Q2536ZKL2"></script>
    <script>
      window.dataLayer = window.dataLayer || [];
      window.gtag = function () { dataLayer.push(arguments); };
      gtag('consent', 'default', {
        'wait_for_update': 500,
        'region': ['RO'],
        'ad_storage': 'denied',
        'analytics_storage': 'denied',
        'ad_user_data': 'denied',
        'ad_personalization': 'denied'
      });
      gtag('js', new Date());
      gtag('config', 'G-7Q2536ZKL2');
    </script>


  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title th:text="${lesson.title}">Lesson</title>
  <link rel="stylesheet" th:href="@{/css/styles.css}">
  <style>body { background: #ffffff; }</style>
 </head>
 <body th:with="activeTopic='JavaScript', activeChapter='18.Cereri AJAX si XMLHttpRequest', activeLesson='6.Trimiterea formularelor intr-o solicitare ajax'">
  <button class="mobile-sidebar-toggle" onclick="toggleMobileSidebar()">☰</button>
  <div th:replace="~{fragments/nav :: nav}"></div>
  <div class="top-nav">
   <th:block th:each="topic : ${topics}">
    <a th:href="@{'/lectii/topic/' + ${topic.id}}" th:text="${topic.name}" th:classappend="${topic.id} == ${activeTopicId} ? 'active' : ''"> </a>
   </th:block>
  </div>
  <div class="layout">
   <div class="mobile-sidebar" id="mobileSidebar">
    <button class="close-btn" onclick="toggleSidebar()">✖</button>
    <ul class="chapter-list">
     <th:block th:each="chapter : ${chapters}">
      <li class="chapter-item" th:classappend="${chapter.id} == ${activeChapterId} ? 'open' : ''">
       <div class="chapter-title" onclick="toggleChapter(this)">
        <strong th:text="${chapter.title}"></strong> <span class="arrow">▼</span>
       </div>
       <ul class="lesson-list">
        <th:block th:each="lesson : ${chapter.lessons}">
         <li><a th:href="@{'/lessons/' +
    ${#strings.toLowerCase(#strings.replace(chapter.topic.name, ' ', '-'))} + '/' +
    ${#strings.toLowerCase(#strings.replace(chapter.title, ' ', '-'))} + '/' +
    ${#strings.toLowerCase(#strings.replace(lesson.title, ' ', '-'))} }" th:text="${lesson.title}" th:classappend="${lesson.id} == ${activeLessonId} ? 'active' : ''"> </a></li>
        </th:block>
       </ul></li>
     </th:block>
    </ul>
   </div>
   <aside class="sidebar">
    <ul class="sidebar-list">
     <th:block th:each="chapter : ${chapters}">
      <li class="chapter-item" th:classappend="${chapter.id} == ${activeChapterId} ? 'open' : ''">
       <div class="chapter-toggle" onclick="toggleLessons(this)">
        <span th:text="${chapter.title}">Chapter</span>
       </div>
       <ul class="lesson-list hidden">
        <th:block th:each="lesson : ${chapter.lessons}">
         <li><a th:href="@{'/lessons/' +
    ${#strings.toLowerCase(#strings.replace(chapter.topic.name, ' ', '-'))} + '/' +
    ${#strings.toLowerCase(#strings.replace(chapter.title, ' ', '-'))} + '/' +
    ${#strings.toLowerCase(#strings.replace(lesson.title, ' ', '-'))} }" th:text="${lesson.title}" th:classappend="${lesson.id} == ${activeLessonId} ? 'active' : ''"> </a></li>
        </th:block>
       </ul></li>
     </th:block>
    </ul>
   </aside>
   <main class="content">
    <div class="document-container">
     <h1 class="main-title">Trimiterea formularelor într-o solicitare ajax</h1>
     <p class="paragraph">Cu ajutorul obiectului FormData, se pot trimite datele unui formular de pe pagina web către server folosind Ajax. Să examinăm un exemplu simplu. Ca server, la fel ca în articolele anterioare, vom folosi Node.js.</p>
     <p class="paragraph">Mai întâi, creăm fișierul app.js, care va reprezenta serverul. Definim în el logica de bază:</p>
     <div class="code-inline">
      <pre><code>const&nbsp;http&nbsp;=&nbsp;require("http");<br>const&nbsp;fs&nbsp;=&nbsp;require("fs");<br><br>http.createServer(async&nbsp;(request,&nbsp;response)&nbsp;=&gt;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;if(request.url&nbsp;==&nbsp;"/user"){<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;let&nbsp;body&nbsp;=&nbsp;"";&nbsp;&nbsp;&nbsp;//&nbsp;buffer&nbsp;pentru&nbsp;datele&nbsp;primite<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;primim&nbsp;datele&nbsp;din&nbsp;solicitare&nbsp;în&nbsp;buffer<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for&nbsp;await&nbsp;(const&nbsp;chunk&nbsp;of&nbsp;request)&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;body&nbsp;+=&nbsp;chunk;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;pentru&nbsp;parametrul&nbsp;name<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;let&nbsp;userName&nbsp;=&nbsp;"";<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;pentru&nbsp;parametrul&nbsp;age<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;let&nbsp;userAge&nbsp;=&nbsp;0;<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;expresia&nbsp;regulată&nbsp;pentru&nbsp;căutarea&nbsp;numelor&nbsp;și&nbsp;valorilor&nbsp;câmpurilor&nbsp;formularului<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const&nbsp;exp&nbsp;=&nbsp;/Content-Disposition:&nbsp;form-data;&nbsp;name="([^\"]+)\"\r\n\r\n(\w*)/g;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;let&nbsp;formElement;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;while&nbsp;((formElement&nbsp;=&nbsp;exp.exec(body))){<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;paramName&nbsp;=&nbsp;formElement[1];&nbsp;&nbsp;&nbsp;//&nbsp;obținem&nbsp;numele&nbsp;elementului&nbsp;formularului<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;paramValue&nbsp;=&nbsp;formElement[2];&nbsp;&nbsp;//&nbsp;obținem&nbsp;valoarea&nbsp;elementului&nbsp;formularului<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;console.log(paramName,&nbsp;":",&nbsp;paramValue);&nbsp;&nbsp;//&nbsp;afișăm&nbsp;în&nbsp;consolă<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if(paramName&nbsp;===&nbsp;"name")&nbsp;userName&nbsp;=&nbsp;paramValue;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if(paramName&nbsp;===&nbsp;"age")&nbsp;userAge&nbsp;=&nbsp;paramValue;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;response.end(`Numele&nbsp;tău:&nbsp;${userName}&nbsp;&nbsp;Vârsta&nbsp;ta:&nbsp;${userAge}`);<br>&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;else{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fs.readFile("index.html",&nbsp;(_,&nbsp;data)&nbsp;=&gt;&nbsp;response.end(data));<br>&nbsp;&nbsp;&nbsp;}<br>}).listen(3000,&nbsp;()=&gt;console.log("Serverul&nbsp;a&nbsp;fost&nbsp;lansat&nbsp;la&nbsp;adresa&nbsp;http://localhost:3000"));</code></pre>
     </div>
     <p class="paragraph">Să trecem rapid prin cod. Mai întâi, se conectează pachetele necesare:</p>
     <div class="code-inline">
      <pre><code>const&nbsp;http&nbsp;=&nbsp;require("http");&nbsp;&nbsp;&nbsp;//&nbsp;pentru&nbsp;gestionarea&nbsp;solicitărilor&nbsp;de&nbsp;intrare<br>const&nbsp;fs&nbsp;=&nbsp;require("fs");&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;pentru&nbsp;citirea&nbsp;fișierelor&nbsp;de&nbsp;pe&nbsp;disc</code></pre>
     </div>
     <p class="paragraph">Se folosește funcția http.createServer() pentru crearea serverului. Acestei funcții i se transmite un handler, care este apelat de fiecare dată când serverul primește o solicitare. Handlerul are doi parametri: request (conține datele solicitării) și response (gestionează trimiterea răspunsului).</p>
     <p class="paragraph">Handlerul folosește proprietatea request.url pentru a obține calea resursei solicitate. Aici presupunem că clientul va trimite formularul la adresa "/user". Inițial, se procesează solicitarea către această adresă:</p>
     <div class="code-inline">
      <pre><code>if(request.url&nbsp;==&nbsp;"/user"){</code></pre>
     </div>
     <p class="paragraph">Pentru a extrage valorile trimise prin formular, citim corpul solicitării în variabila body:</p>
     <div class="code-inline">
      <pre><code>let&nbsp;body&nbsp;=&nbsp;"";&nbsp;&nbsp;&nbsp;//&nbsp;buffer&nbsp;pentru&nbsp;datele&nbsp;primite<br>//&nbsp;primim&nbsp;datele&nbsp;din&nbsp;solicitare&nbsp;în&nbsp;buffer<br>for&nbsp;await&nbsp;(const&nbsp;chunk&nbsp;of&nbsp;request)&nbsp;{<br>&nbsp;&nbsp;&nbsp;body&nbsp;+=&nbsp;chunk;<br>}</code></pre>
     </div>
     <p class="paragraph">Pentru a avea o idee despre ce va conține corpul după citirea corpului solicitării, să presupunem că pe formular există două câmpuri numite "name" și "age". În acest caz, corpul solicitării va arăta aproximativ astfel:</p>
     <div class="code-inline">
      <pre><code>------WebKitFormBoundarya9nLzvDVEN5gPA5Q<br>Content-Disposition:&nbsp;form-data;&nbsp;name="name"<br><br>Tom<br>------WebKitFormBoundarya9nLzvDVEN5gPA5Q<br>Content-Disposition:&nbsp;form-data;&nbsp;name="age"<br><br>39<br>------WebKitFormBoundarya9nLzvDVEN5gPA5Q--</code></pre>
     </div>
     <p class="paragraph">Aici vedem marcajul de frontieră ------WebKitFormBoundarya9nLzvDVEN5gPA5Q, care definește începutul și sfârșitul corpului solicitării, precum și separă valorile diferitelor câmpuri ale formularului. (Valoarea marcajului de frontieră poate varia). Pentru fiecare câmp al formularului este definită expresia Content-Disposition: form-data;.</p>
     <p class="paragraph">Apoi, folosind atributul name este indicat numele câmpului formularului. Apoi, printr-o linie nouă este indicată valoarea corespunzătoare a câmpului. Deci, în exemplul de mai sus, avem două câmpuri ale formularului: câmpul "name" cu valoarea "Tom" și câmpul "age" cu valoarea 39.</p>
     <p class="paragraph">Acum sarcina noastră este să extragem numele și valorile câmpurilor formularului. Pentru aceasta folosim expresia regulată:</p>
     <div class="code-inline">
      <pre><code>const&nbsp;exp&nbsp;=&nbsp;/Content-Disposition:&nbsp;form-data;&nbsp;name="([^\"]+)\"\r\n\r\n(\w*)/g;</code></pre>
     </div>
     <p class="paragraph">Apoi, trecem prin corpul solicitării cu expresia regulată și extragem toate elementele formularului și valorile lor:</p>
     <div class="code-inline">
      <pre><code>while&nbsp;((formElement&nbsp;=&nbsp;exp.exec(body))){<br>&nbsp;&nbsp;&nbsp;paramName&nbsp;=&nbsp;formElement[1];&nbsp;&nbsp;&nbsp;//&nbsp;obținem&nbsp;numele&nbsp;elementului&nbsp;formularului<br>&nbsp;&nbsp;&nbsp;paramValue&nbsp;=&nbsp;formElement[2];&nbsp;&nbsp;//&nbsp;obținem&nbsp;valoarea&nbsp;elementului&nbsp;formularului<br>&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;if(paramName&nbsp;===&nbsp;"name")&nbsp;userName&nbsp;=&nbsp;paramValue;<br>&nbsp;&nbsp;&nbsp;if(paramName&nbsp;===&nbsp;"age")&nbsp;userAge&nbsp;=&nbsp;paramValue;<br>}</code></pre>
     </div>
     <p class="paragraph">Este important de menționat că acesta este un proces de parsare simplificat, care nu ia în considerare multe aspecte (trimiterea de array-uri, fișiere etc.) și este prezentat doar pentru a demonstra solicitările ajax.</p>
     <p class="paragraph">După ce primim datele solicitării, trimitem înapoi clientului un anumit mesaj:</p>
     <div class="code-inline">
      <pre><code>response.end(`Numele&nbsp;tău:&nbsp;${userName}&nbsp;&nbsp;Vârsta&nbsp;ta:&nbsp;${userAge}`);</code></pre>
     </div>
     <p class="paragraph">La final, cu ajutorul funcției listen() lansăm serverul web pe portul 3000. Astfel, serverul va fi accesibil la adresa http://localhost:3000/</p>
     <h2 class="subtitle">Definirea clientului</h2>
     <p class="paragraph">Acum să definim fișierul index.html, care se află în aceeași directorie cu fișierul serverului app.js și care va reprezenta codul clientului:</p>
     <div class="code-inline">
      <pre><code>&lt;!DOCTYPE&nbsp;html&gt;<br>&lt;html&gt;<br>&lt;head&gt;<br>&nbsp;&nbsp;&nbsp;&lt;meta&nbsp;charset="utf-8"&nbsp;/&gt;<br>&nbsp;&nbsp;&nbsp;&lt;title&gt;FDC.COM&lt;/title&gt;<br>&lt;/head&gt;<br>&lt;body&gt;<br>&lt;script&gt;<br>//&nbsp;datele&nbsp;pentru&nbsp;trimitere<br>const&nbsp;formData&nbsp;=&nbsp;new&nbsp;FormData();&nbsp;&nbsp;<br>formData.append("name",&nbsp;"Tom");&nbsp;&nbsp;<br>formData.append("age",&nbsp;39);<br><br>const&nbsp;xhr&nbsp;=&nbsp;new&nbsp;XMLHttpRequest();&nbsp;&nbsp;<br>xhr.onload&nbsp;=&nbsp;()&nbsp;=&gt;&nbsp;{<br>&nbsp;&nbsp;&nbsp;if&nbsp;(xhr.status&nbsp;==&nbsp;200)&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;console.log(xhr.responseText);<br>&nbsp;&nbsp;&nbsp;}&nbsp;else&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;console.log("Răspunsul&nbsp;serverului:&nbsp;",&nbsp;xhr.statusText);<br>&nbsp;&nbsp;&nbsp;}<br>};<br><br>xhr.open("POST",&nbsp;"user",&nbsp;true);&nbsp;&nbsp;<br>xhr.send(formData);<br>&lt;/script&gt;<br>&lt;/body&gt;<br>&lt;/html&gt;</code></pre>
     </div>
     <p class="paragraph">Aici, datele formularului sunt definite manual ca obiect FormData. După ce se creează obiectul FormData, folosind metoda append() adăugăm proprietăți și valorile lor. Apoi, pentru a trimite la server, obiectul FormData este furnizat ca argument metodei send(). Se utilizează metoda HTTP POST.</p>
     <p class="paragraph">În handlerul onload, afișăm mesajul primit de la server în consolă.</p>
     <p class="paragraph">La final, mergem în consola la directorul serverului folosind comanda cd și pornim serverul cu comanda node server.js</p>
     <div class="image-container">
      <img th:src="@{/images/JavaScript/18.Cereri%20AJAX%20si%20XMLHttpRequest/6.Trimiterea%20formularelor%20intr-o%20solicitare%20ajax/images/image1.png}" alt="" class="responsive-image">
     </div>
     <p class="paragraph">După pornirea serverului, putem accesa în browser adresa http://localhost:3000, unde ne va fi afișată pagina, iar în codul JavaScript al acesteia se va executa o solicitare POST către adresa "/user". Codul JavaScript va primi răspunsul de la server și îl va afișa în consolă:</p>
     <div class="image-container">
      <img th:src="@{/images/JavaScript/18.Cereri%20AJAX%20si%20XMLHttpRequest/6.Trimiterea%20formularelor%20intr-o%20solicitare%20ajax/images/image2.png}" alt="" class="responsive-image">
     </div>
     <p class="paragraph">În exemplul de mai sus, datele formularului sunt definite manual. Totuși, într-un mod similar, se pot trimite și datele formularelor care sunt definite în codul HTML. De exemplu, modificăm codul paginii index.html în următorul mod:</p>
     <div class="code-inline">
      <pre><code>&lt;!DOCTYPE&nbsp;html&gt;<br>&lt;html&gt;<br>&lt;head&gt;<br>&nbsp;&nbsp;&nbsp;&lt;meta&nbsp;charset="utf-8"&nbsp;/&gt;<br>&nbsp;&nbsp;&nbsp;&lt;title&gt;FDC.COM&lt;/title&gt;<br>&lt;/head&gt;<br>&lt;body&gt;<br>&lt;form&nbsp;id="myForm"&nbsp;method="post"&nbsp;action="/user"&gt;<br>&lt;p&gt;<br>&nbsp;&nbsp;&nbsp;&lt;label&gt;Numele&nbsp;utilizatorului:&lt;/label&gt;&lt;br&gt;<br>&nbsp;&nbsp;&nbsp;&lt;input&nbsp;name="name"&nbsp;/&gt;<br>&lt;/p&gt;<br>&lt;p&gt;<br>&nbsp;&nbsp;&nbsp;&lt;label&gt;Vârsta&nbsp;utilizatorului:&lt;/label&gt;&lt;br&gt;<br>&nbsp;&nbsp;&nbsp;&lt;input&nbsp;name="age"&nbsp;/&gt;<br>&lt;/p&gt;<br>&lt;input&nbsp;type="submit"&nbsp;value="Trimite"&nbsp;/&gt;<br>&lt;/form&gt;<br>&lt;script&gt;<br>//&nbsp;datele&nbsp;pentru&nbsp;trimitere<br>const&nbsp;myForm&nbsp;=&nbsp;document.getElementById("myForm");<br>myForm.addEventListener("submit",&nbsp;(e)=&gt;{<br>&nbsp;&nbsp;&nbsp;e.preventDefault();<br>&nbsp;&nbsp;&nbsp;const&nbsp;formData&nbsp;=&nbsp;new&nbsp;FormData(myForm);<br><br>&nbsp;&nbsp;&nbsp;const&nbsp;xhr&nbsp;=&nbsp;new&nbsp;XMLHttpRequest();&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;xhr.onload&nbsp;=&nbsp;()&nbsp;=&gt;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(xhr.status&nbsp;==&nbsp;200)&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;console.log(xhr.responseText);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;};<br>&nbsp;&nbsp;&nbsp;xhr.open("POST",&nbsp;"user",&nbsp;true);&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;xhr.send(formData);<br>});<br>&lt;/script&gt;<br>&lt;/body&gt;<br>&lt;/html&gt;</code></pre>
     </div>
     <p class="paragraph">Aici, în codul formularului este definită o formă cu două câmpuri de intrare pentru trimitere la server. Și aceste câmpuri au, de asemenea, numele "name" și "age". În codul JavaScript, interceptăm trimiterea formularului, obținem obiectul FormData din formular și îl trimitem la server.</p>
     <div class="image-container">
      <img th:src="@{/images/JavaScript/18.Cereri%20AJAX%20si%20XMLHttpRequest/6.Trimiterea%20formularelor%20intr-o%20solicitare%20ajax/images/image3.png}" alt="" class="responsive-image">
     </div>
    </div>
   </main>
   <aside class="ad-section">
    <div class="ad-box">
     <p>Google Ad Here</p>
    </div>
    <div class="ad-box">
     <p>Promo: SQL Beginner Guide</p>
    </div>
   </aside>
  </div>
  <div class="lesson-navigation">
   <th:block th:if="${previousLesson != null}">
    <a th:href="@{'/lessons/' +
            ${#strings.toLowerCase(#strings.replace(previousLesson.chapter.topic.name, ' ', '-'))} + '/' +
            ${#strings.toLowerCase(#strings.replace(previousLesson.chapter.title, ' ', '-'))} + '/' +
            ${#strings.toLowerCase(#strings.replace(previousLesson.title, ' ', '-'))} }" class="nav-button">← Lecția anterioară</a>
   </th:block> <th:block th:if="${nextLesson != null}">
    <a th:href="@{'/lessons/' +
            ${#strings.toLowerCase(#strings.replace(nextLesson.chapter.topic.name, ' ', '-'))} + '/' +
            ${#strings.toLowerCase(#strings.replace(nextLesson.chapter.title, ' ', '-'))} + '/' +
            ${#strings.toLowerCase(#strings.replace(nextLesson.title, ' ', '-'))} }" class="nav-button">Lecția următoare →</a>
   </th:block>
  </div>
  <div th:replace="~{fragments/footer :: footer}"></div>
  <script th:src="@{/js/script.js}" defer></script>
 </body>
</html>
