<!doctype html>
<html lang="ro" xmlns:th="http://www.w3.org/1999/xhtml">
 <head>
    <link rel="icon" type="image/png" href="/nume-aplicatie/images/favicon.png">
    <script async src="https://www.googletagmanager.com/gtag/js?id=G-7Q2536ZKL2"></script>
    <script>
      window.dataLayer = window.dataLayer || [];
      window.gtag = function () { dataLayer.push(arguments); };
      gtag('consent', 'default', {
        'wait_for_update': 500,
        'region': ['RO'],
        'ad_storage': 'denied',
        'analytics_storage': 'denied',
        'ad_user_data': 'denied',
        'ad_personalization': 'denied'
      });
      gtag('js', new Date());
      gtag('config', 'G-7Q2536ZKL2');
    </script>


  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title th:text="${lesson.title}">Lesson</title>
  <link rel="stylesheet" th:href="@{/css/styles.css}">
  <style>body { background: #ffffff; }</style>
 </head>
 <body th:with="activeTopic='JavaScript', activeChapter='7.Siruri de caractere', activeLesson='3.Obiectul RegExp'">
  <button class="mobile-sidebar-toggle" onclick="toggleMobileSidebar()">☰</button>
  <div th:replace="~{fragments/nav :: nav}"></div>
  <div class="top-nav">
   <th:block th:each="topic : ${topics}">
    <a th:href="@{'/lectii/topic/' + ${topic.id}}" th:text="${topic.name}" th:classappend="${topic.id} == ${activeTopicId} ? 'active' : ''"> </a>
   </th:block>
  </div>
  <div class="layout">
   <div class="mobile-sidebar" id="mobileSidebar">
    <button class="close-btn" onclick="toggleSidebar()">✖</button>
    <ul class="chapter-list">
     <th:block th:each="chapter : ${chapters}">
      <li class="chapter-item" th:classappend="${chapter.id} == ${activeChapterId} ? 'open' : ''">
       <div class="chapter-title" onclick="toggleChapter(this)">
        <strong th:text="${chapter.title}"></strong> <span class="arrow">▼</span>
       </div>
       <ul class="lesson-list">
        <th:block th:each="lesson : ${chapter.lessons}">
         <li><a th:href="@{'/lessons/' +
    ${#strings.toLowerCase(#strings.replace(chapter.topic.name, ' ', '-'))} + '/' +
    ${#strings.toLowerCase(#strings.replace(chapter.title, ' ', '-'))} + '/' +
    ${#strings.toLowerCase(#strings.replace(lesson.title, ' ', '-'))} }" th:text="${lesson.title}" th:classappend="${lesson.id} == ${activeLessonId} ? 'active' : ''"> </a></li>
        </th:block>
       </ul></li>
     </th:block>
    </ul>
   </div>
   <aside class="sidebar">
    <ul class="sidebar-list">
     <th:block th:each="chapter : ${chapters}">
      <li class="chapter-item" th:classappend="${chapter.id} == ${activeChapterId} ? 'open' : ''">
       <div class="chapter-toggle" onclick="toggleLessons(this)">
        <span th:text="${chapter.title}">Chapter</span>
       </div>
       <ul class="lesson-list hidden">
        <th:block th:each="lesson : ${chapter.lessons}">
         <li><a th:href="@{'/lessons/' +
    ${#strings.toLowerCase(#strings.replace(chapter.topic.name, ' ', '-'))} + '/' +
    ${#strings.toLowerCase(#strings.replace(chapter.title, ' ', '-'))} + '/' +
    ${#strings.toLowerCase(#strings.replace(lesson.title, ' ', '-'))} }" th:text="${lesson.title}" th:classappend="${lesson.id} == ${activeLessonId} ? 'active' : ''"> </a></li>
        </th:block>
       </ul></li>
     </th:block>
    </ul>
   </aside>
   <main class="content">
    <div class="document-container">
     <h1 class="main-title">Obiectul RegExp - Expresii regulate</h1>
     <p class="paragraph">Expresiile regulate reprezintă șabloane utilizate pentru căutare sau modificare a șirului de caractere. Desigur, pentru manipularea șirurilor putem utiliza un set standard de metode de tip String. Cu toate acestea, expresiile regulate oferă un instrument mai flexibil.</p>
     <p class="paragraph">Pentru a lucra cu expresii regulate în JavaScript, este definit obiectul RegExp.</p>
     <p class="paragraph">Există două moduri de a defini o expresie regulată:</p>
     <div class="code-inline">
      <pre><code>const&nbsp;myExp1&nbsp;=&nbsp;/hello/;<br>const&nbsp;myExp2&nbsp;=&nbsp;new&nbsp;RegExp("hello");</code></pre>
     </div>
     <p class="paragraph">Utilizată aici, expresia regulată este destul de simplă: constă dintr-un singur cuvânt "hello". În primul caz, expresia este plasată între două bare oblice (numită notație literală), iar în al doilea caz, este utilizat constructorul RegExp, în care expresia este transmisă sub formă de șir de caractere.</p>
     <p class="paragraph">În general, atunci când expresia regulată este definită dinamic (de exemplu, prin intermediul input-ului utilizatorului), este recomandat să se folosească constructorul. Dacă expresia este statică și neschimbată, atunci notația literală este preferată, așa cum este prezentat în primul caz.</p>
     <p class="paragraph">După ce am definit expresia regulată pentru manipularea șirurilor, putem utiliza una dintre metodele RegExp:</p>
     <ul class="enumeration">
      <li>test(): verifică dacă un anumit șablon este prezent într-un șir. Dacă șirul corespunde șablonului, această metodă returnează true; altfel, returnează false</li>
      <li>exec(): caută aparițiile unui anumit șablon într-un șir și returnează aceste apariții sub formă de array</li>
     </ul>
     <p class="paragraph">De asemenea, pentru manipularea expresiilor regulate, putem utiliza și câteva metode de tip String:</p>
     <ul class="enumeration">
      <li>match(): caută aparițiile unui anumit șablon într-un șir și returnează aceste apariții sub formă de array</li>
      <li>replace(): înlocuiește aparițiile unui anumit șablon într-un șir</li>
      <li>search(): caută aparițiile unui anumit șablon într-un șir și returnează indexul primei apariții</li>
      <li>split(): împarte un șir în funcție de un anumit șablon și returnează părțile rezultate sub formă de array</li>
     </ul>
     <p class="paragraph">Metoda test() este utilizată pentru a verifica dacă un șir conține un text care se potrivește cu o expresie regulată. Această metodă returnează true dacă șirul conține text care se potrivește cu expresia regulată, iar false dacă nu conține.</p>
     <div class="code-inline">
      <pre><code>const&nbsp;initialText&nbsp;=&nbsp;"hello&nbsp;world!";&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;șirul&nbsp;în&nbsp;care&nbsp;căutăm<br>const&nbsp;exp&nbsp;=&nbsp;/hello/;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;expresia&nbsp;regulată<br>const&nbsp;result&nbsp;=&nbsp;exp.test(initialText);&nbsp;&nbsp;&nbsp;//&nbsp;verificăm&nbsp;dacă&nbsp;șirul&nbsp;conține&nbsp;expresia&nbsp;exp<br>console.log(result);&nbsp;//&nbsp;true<br>&nbsp;<br>const&nbsp;initialText2&nbsp;=&nbsp;"Hi&nbsp;all";<br>const&nbsp;result2&nbsp;=&nbsp;exp.test(initialText2);<br>console.log(result2);&nbsp;//&nbsp;false&nbsp;-&nbsp;în&nbsp;șirul&nbsp;"Hi&nbsp;all"&nbsp;nu&nbsp;există&nbsp;"hello"</code></pre>
     </div>
     <p class="paragraph">În acest caz, verificăm dacă șirurile `initialText` ("hello world!") și `initialText2` ("Hi all") conțin expresia exp (/hello/). Deoarece primul șir conține această expresie, exp.test(initialText) returnează true. În cazul celui de-al doilea șir, această expresie nu există, astfel că se returnează false.</p>
     <h2 class="subtitle">Metoda exec()</h2>
     <p class="paragraph">Metoda exec() funcționează similar cu test, deoarece și ea verifică dacă un șir conține text care se potrivește cu o expresie regulată. În cazul în care textul potrivit este găsit, metoda returnează partea șirului care corespunde expresiei. Dacă nu există nicio potrivire, metoda returnează valoarea null.</p>
     <div class="code-inline">
      <pre><code>const&nbsp;initialText&nbsp;=&nbsp;"hello&nbsp;world!";&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;șirul&nbsp;în&nbsp;care&nbsp;căutăm<br>const&nbsp;exp&nbsp;=&nbsp;/hello/;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;expresia&nbsp;regulată<br>const&nbsp;result&nbsp;=&nbsp;exp.exec(initialText);&nbsp;&nbsp;&nbsp;//&nbsp;verificăm&nbsp;dacă&nbsp;șirul&nbsp;conține&nbsp;expresia&nbsp;exp<br>console.log(result);&nbsp;//&nbsp;['hello',&nbsp;index:&nbsp;0,&nbsp;input:&nbsp;'hello&nbsp;world!',&nbsp;groups:&nbsp;undefined]<br>&nbsp;<br>const&nbsp;initialText2&nbsp;=&nbsp;"Hi&nbsp;all";<br>const&nbsp;result2&nbsp;=&nbsp;exp.exec(initialText2);<br>console.log(result2);&nbsp;//&nbsp;null&nbsp;-&nbsp;în&nbsp;șirul&nbsp;"Hi&nbsp;all"&nbsp;nu&nbsp;există&nbsp;"hello"</code></pre>
     </div>
     <p class="paragraph">Astfel, în șirul "hello world!" există text care corespunde șablonului /hello/, așa că apelul metodei exp.exec(initialText) va returna apariția textului care se potrivește expresiei în șir. După cum se poate vedea în afișajul consolei, nu este returnat doar textul potrivit, ci și un array de valori:</p>
     <div class="code-inline">
      <pre><code>['hello',&nbsp;index:&nbsp;0,&nbsp;input:&nbsp;'hello&nbsp;world!',&nbsp;groups:&nbsp;undefined]</code></pre>
     </div>
     <p class="paragraph">Primul element al array-ului este textul care se potrivește expresiei (în acest caz, "hello"). Al doilea element este indexul acestui text în șir (în acest caz, indexul 0 - începutul șirului). Al treilea element reprezintă șirul de intrare. Al patrulea element reprezintă grupul, care în exemplul de mai sus este nedefinit (grupele vor fi discutate ulterior).</p>
     <h2 class="subtitle">Grupuri de caractere</h2>
     <p class="paragraph">În exemplele anterioare, am folosit șirul "hello" ca expresie regulată. În realitate, pentru a verifica prezența acestui subșir într-un șir, am putea folosi și metode standard de tip String. Cu toate acestea, expresia nu este doar un șir, ci un șablon care poate include, de asemenea, elemente speciale de sintaxă pentru expresii regulate. Să examinăm câteva șabloane de bază:</p>
     <ul class="enumeration">
      <li>. (punct) se potrivește oricărui caracter</li>
      <li>a (un singur caracter) se potrivește caracterului "a"</li>
      <li>ab (concatenare de caractere) se potrivește secvenței de caractere "ab"</li>
      <li>a|b se potrivește fie caracterului "a", fie caracterului "b" (simbolul | poate fi văzut ca o analogie a operației OR)</li>
     </ul>
     <p class="paragraph">De exemplu, să presupunem că trebuie să verificăm lungimea unei parole - să fie cel puțin de 8 caractere:</p>
     <div class="code-inline">
      <pre><code>const&nbsp;exp&nbsp;=&nbsp;/......../;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;expresia&nbsp;regulată&nbsp;-&nbsp;8&nbsp;caractere<br><br>const&nbsp;password1&nbsp;=&nbsp;"1234567890";<br>const&nbsp;password2&nbsp;=&nbsp;"qwery5";<br>//&nbsp;verificăm&nbsp;prima&nbsp;parolă<br>console.log(exp.test(password1));&nbsp;&nbsp;&nbsp;//&nbsp;true&nbsp;-&nbsp;&nbsp;password1&nbsp;se&nbsp;potrivește&nbsp;expresiei&nbsp;exp<br>//&nbsp;verificăm&nbsp;a&nbsp;doua&nbsp;parolă<br>console.log(exp.test(password2));&nbsp;&nbsp;&nbsp;//&nbsp;false&nbsp;-&nbsp;&nbsp;password2&nbsp;nu&nbsp;se&nbsp;potrivește&nbsp;expresiei&nbsp;exp</code></pre>
     </div>
     <p class="paragraph">Aici, expresia regulată "/......../" are 8 puncte. Prin urmare, pentru a se potrivi acestei expresii, șirul trebuie să aibă cel puțin 8 caractere.</p>
     <p class="paragraph">Un alt exemplu:</p>
     <div class="code-inline">
      <pre><code>const&nbsp;exp&nbsp;=&nbsp;/word|work/;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;se&nbsp;potrivește&nbsp;fie&nbsp;"word",&nbsp;fie&nbsp;"work"<br><br>const&nbsp;str1&nbsp;=&nbsp;"hello&nbsp;world";<br>const&nbsp;str2&nbsp;=&nbsp;"hello&nbsp;work";<br>const&nbsp;str3&nbsp;=&nbsp;"hello&nbsp;word";<br>console.log(exp.test(str1));&nbsp;&nbsp;&nbsp;//&nbsp;false<br>console.log(exp.test(str2));&nbsp;&nbsp;&nbsp;//&nbsp;true<br>console.log(exp.test(str3));&nbsp;&nbsp;&nbsp;//&nbsp;true</code></pre>
     </div>
     <p class="paragraph">Aici, expresia "/word|work/" se potrivește textului care conține fie "word", fie "work". Cu toate acestea, această expresie nu este optimă - în ambele variante, grupa de caractere "wor" este repetată. Putem să luăm grupul comun de caractere și să-l punem între paranteze: "/(wor)d|k/". Rezultatul va fi același:</p>
     <div class="code-inline">
      <pre><code><br>const&nbsp;exp&nbsp;=&nbsp;/(wor)d|k/;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;se&nbsp;potrivește&nbsp;fie&nbsp;"word",&nbsp;fie&nbsp;"work"<br><br>const&nbsp;str1&nbsp;=&nbsp;"hello&nbsp;world";<br>const&nbsp;str2&nbsp;=&nbsp;"hello&nbsp;work";<br>const&nbsp;str3&nbsp;=&nbsp;"hello&nbsp;word";<br>console.log(exp.test(str1));&nbsp;&nbsp;&nbsp;//&nbsp;false<br>console.log(exp.test(str2));&nbsp;&nbsp;&nbsp;//&nbsp;true<br>console.log(exp.test(str3));&nbsp;&nbsp;&nbsp;//&nbsp;true</code></pre>
     </div>
     <p class="paragraph">Un alt exemplu - să verificăm dacă o adresă de e-mail aparține domeniilor "yandex.com" sau "gmail.com":</p>
     <div class="code-inline">
      <pre><code><br>const&nbsp;exp&nbsp;=&nbsp;/@yandex|@gmail(.com)/;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;se&nbsp;potrivește&nbsp;fie&nbsp;"@yandex.ru"&nbsp;fie&nbsp;"@mail.ru"<br><br>const&nbsp;email1&nbsp;=&nbsp;"tom@gmail.com";<br>const&nbsp;email2&nbsp;=&nbsp;"tom@mail.com";<br>const&nbsp;email3&nbsp;=&nbsp;"tom@yandex.com";<br>console.log(exp.test(email1));&nbsp;&nbsp;&nbsp;//&nbsp;true<br>console.log(exp.test(email2));&nbsp;&nbsp;&nbsp;//&nbsp;false<br>console.log(exp.test(email3));&nbsp;&nbsp;&nbsp;//&nbsp;true</code></pre>
     </div>
    </div>
   </main>
   <aside class="ad-section">
    <div class="ad-box">
     <p>Google Ad Here</p>
    </div>
    <div class="ad-box">
     <p>Promo: SQL Beginner Guide</p>
    </div>
   </aside>
  </div>
  <div class="lesson-navigation">
   <th:block th:if="${previousLesson != null}">
    <a th:href="@{'/lessons/' +
            ${#strings.toLowerCase(#strings.replace(previousLesson.chapter.topic.name, ' ', '-'))} + '/' +
            ${#strings.toLowerCase(#strings.replace(previousLesson.chapter.title, ' ', '-'))} + '/' +
            ${#strings.toLowerCase(#strings.replace(previousLesson.title, ' ', '-'))} }" class="nav-button">← Lecția anterioară</a>
   </th:block> <th:block th:if="${nextLesson != null}">
    <a th:href="@{'/lessons/' +
            ${#strings.toLowerCase(#strings.replace(nextLesson.chapter.topic.name, ' ', '-'))} + '/' +
            ${#strings.toLowerCase(#strings.replace(nextLesson.chapter.title, ' ', '-'))} + '/' +
            ${#strings.toLowerCase(#strings.replace(nextLesson.title, ' ', '-'))} }" class="nav-button">Lecția următoare →</a>
   </th:block>
  </div>
  <div th:replace="~{fragments/footer :: footer}"></div>
  <script th:src="@{/js/script.js}" defer></script>
 </body>
</html>
