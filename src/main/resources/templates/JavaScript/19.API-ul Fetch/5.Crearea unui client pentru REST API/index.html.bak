<!doctype html>
<html lang="ro" xmlns:th="http://www.w3.org/1999/xhtml">
 <head>
    <script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-4253419731329045"
            crossorigin="anonymous"></script>


  <link rel="canonical" th:href="${canonicalUrl}" />

    <link rel="icon" type="image/png" href="/nume-aplicatie/images/favicon.png">
    <script async src="https://www.googletagmanager.com/gtag/js?id=G-7Q2536ZKL2"></script>
    <script>
      window.dataLayer = window.dataLayer || [];
      window.gtag = function () { dataLayer.push(arguments); };
      gtag('consent', 'default', {
        'wait_for_update': 500,
        'region': ['RO'],
        'ad_storage': 'denied',
        'analytics_storage': 'denied',
        'ad_user_data': 'denied',
        'ad_personalization': 'denied'
      });
      gtag('js', new Date());
      gtag('config', 'G-7Q2536ZKL2');
    </script>


  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title th:text="${lesson.title}">Lesson</title>
  <link rel="stylesheet" th:href="@{/css/styles.css}">
  <style>body { background: #ffffff; }</style>
 </head>
 <body th:with="activeTopic='JavaScript', activeChapter='19.API-ul Fetch', activeLesson='5.Crearea unui client pentru REST API'">
  <button class="mobile-sidebar-toggle" onclick="toggleMobileSidebar()">☰</button>
  <div th:replace="~{fragments/nav :: nav}"></div>
  <div class="top-nav">
   <th:block th:each="topic : ${topics}">
    <a th:href="@{'/lectii/topic/' + ${topic.id}}" th:text="${topic.name}" th:classappend="${topic.id} == ${activeTopicId} ? 'active' : ''"> </a>
   </th:block>
  </div>
  <div class="layout">
   <div class="mobile-sidebar" id="mobileSidebar">
    <button class="close-btn" onclick="toggleSidebar()">✖</button>
    <ul class="chapter-list">
     <th:block th:each="chapter : ${chapters}">
      <li class="chapter-item" th:classappend="${chapter.id} == ${activeChapterId} ? 'open' : ''">
       <div class="chapter-title" onclick="toggleChapter(this)">
        <strong th:text="${chapter.title}"></strong> <span class="arrow">▼</span>
       </div>
       <ul class="lesson-list">
        <th:block th:each="lesson : ${chapter.lessons}">
         <li><a th:href="@{'/lectii/' +
    ${#strings.toLowerCase(#strings.replace(chapter.topic.name, ' ', '-'))} + '/' +
    ${#strings.toLowerCase(#strings.replace(chapter.title, ' ', '-'))} + '/' +
    ${#strings.toLowerCase(#strings.replace(lesson.title, ' ', '-'))} }" th:text="${lesson.title}" th:classappend="${lesson.id} == ${activeLessonId} ? 'active' : ''"> </a></li>
        </th:block>
       </ul></li>
     </th:block>
    </ul>
   </div>
   <aside class="sidebar">
    <ul class="sidebar-list">
     <th:block th:each="chapter : ${chapters}">
      <li class="chapter-item" th:classappend="${chapter.id} == ${activeChapterId} ? 'open' : ''">
       <div class="chapter-toggle" onclick="toggleLessons(this)">
        <span th:text="${chapter.title}">Chapter</span>
       </div>
       <ul class="lesson-list hidden">
        <th:block th:each="lesson : ${chapter.lessons}">
         <li><a th:href="@{'/lectii/' +
    ${#strings.toLowerCase(#strings.replace(chapter.topic.name, ' ', '-'))} + '/' +
    ${#strings.toLowerCase(#strings.replace(chapter.title, ' ', '-'))} + '/' +
    ${#strings.toLowerCase(#strings.replace(lesson.title, ' ', '-'))} }" th:text="${lesson.title}" th:classappend="${lesson.id} == ${activeLessonId} ? 'active' : ''"> </a></li>
        </th:block>
       </ul></li>
     </th:block>
    </ul>
   </aside>
   <main class="content">
    <div class="document-container">
     <h1 class="main-title">Crearea unui client pentru REST API</h1>
     <p class="paragraph">Folosind Fetch API în JavaScript, se poate implementa un client complet pentru Web API în stil REST pentru interacțiunea cu utilizatorul. Arhitectura REST presupune utilizarea următoarelor metode sau tipuri de cereri HTTP pentru interacțiunea cu serverul:</p>
     <ul class="enumeration">
      <li>GET</li>
      <li>POST</li>
      <li>PUT</li>
      <li>DELETE</li>
     </ul>
     <p class="paragraph">Să examinăm cum să creăm propriul client în JavaScript pentru API.</p>
     <h2 class="subtitle">Crearea unui server pe node.js</h2>
     <p class="paragraph">Pentru început, vom defini serverul care va reprezenta de fapt Web API. Ca exemplu, vom folosi Node.js. Pentru a procesa cererile, vom defini următorul fișier server.js:</p>
     <div class="code-inline">
      <pre><code>const&nbsp;http&nbsp;=&nbsp;require("http");<br>const&nbsp;fs&nbsp;=&nbsp;require("fs");<br><br>//&nbsp;datele&nbsp;cu&nbsp;care&nbsp;lucrează&nbsp;clientul<br>const&nbsp;users&nbsp;=&nbsp;[<br>&nbsp;&nbsp;&nbsp;{&nbsp;id:1,&nbsp;name:"Tom",&nbsp;age:24},<br>&nbsp;&nbsp;&nbsp;{&nbsp;id:2,&nbsp;name:"Bob",&nbsp;age:27},<br>&nbsp;&nbsp;&nbsp;{&nbsp;id:3,&nbsp;name:"Alice",&nbsp;age:23}<br>]<br>//&nbsp;procesăm&nbsp;datele&nbsp;primite&nbsp;de&nbsp;la&nbsp;client<br>function&nbsp;getReqData(req)&nbsp;{<br>&nbsp;&nbsp;&nbsp;return&nbsp;new&nbsp;Promise(async&nbsp;(resolve,&nbsp;reject)&nbsp;=&gt;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;try&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const&nbsp;buffers&nbsp;=&nbsp;[];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for&nbsp;await&nbsp;(const&nbsp;chunk&nbsp;of&nbsp;req)&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;buffers.push(chunk);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const&nbsp;data&nbsp;=&nbsp;JSON.parse(Buffer.concat(buffers).toString());<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;resolve(data);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;catch&nbsp;(error)&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;reject(error);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;});<br>}<br><br>http.createServer(async&nbsp;(request,&nbsp;response)&nbsp;=&gt;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;obținerea&nbsp;tuturor&nbsp;utilizatorilor<br>&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(request.url&nbsp;===&nbsp;"/api/users"&nbsp;&amp;&amp;&nbsp;request.method&nbsp;===&nbsp;"GET")&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;response.end(JSON.stringify(users));<br>&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;//&nbsp;obținerea&nbsp;unui&nbsp;singur&nbsp;utilizator&nbsp;după&nbsp;id<br>&nbsp;&nbsp;&nbsp;&nbsp;else&nbsp;if&nbsp;(request.url.match(/\/api\/users\/([0-9]+)/)&nbsp;&amp;&amp;&nbsp;request.method&nbsp;===&nbsp;"GET")&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;obținem&nbsp;id&nbsp;din&nbsp;adresa&nbsp;url<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const&nbsp;id&nbsp;=&nbsp;request.url.split("/")[3];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;obținem&nbsp;utilizatorul&nbsp;după&nbsp;id<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const&nbsp;user&nbsp;=&nbsp;users.find((u)&nbsp;=&gt;&nbsp;u.id&nbsp;===&nbsp;parseInt(id));<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;dacă&nbsp;utilizatorul&nbsp;este&nbsp;găsit,&nbsp;îl&nbsp;trimitem<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if(user)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;response.end(JSON.stringify(user));<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;dacă&nbsp;nu&nbsp;este&nbsp;găsit,&nbsp;trimitem&nbsp;codul&nbsp;de&nbsp;stare&nbsp;și&nbsp;mesajul&nbsp;de&nbsp;eroare<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;response.writeHead(404,&nbsp;{&nbsp;"Content-Type":&nbsp;"application/json"&nbsp;});<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;response.end(JSON.stringify({&nbsp;message:&nbsp;"Utilizatorul&nbsp;nu&nbsp;a&nbsp;fost&nbsp;găsit"&nbsp;}));<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;//&nbsp;ștergerea&nbsp;utilizatorului&nbsp;după&nbsp;id&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;else&nbsp;if&nbsp;(request.url.match(/\/api\/users\/([0-9]+)/)&nbsp;&amp;&amp;&nbsp;request.method&nbsp;===&nbsp;"DELETE")&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;obținem&nbsp;id&nbsp;din&nbsp;adresa&nbsp;url<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const&nbsp;id&nbsp;=&nbsp;request.url.split("/")[3];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;obținem&nbsp;indexul&nbsp;utilizatorului&nbsp;după&nbsp;id<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const&nbsp;userIndex&nbsp;=&nbsp;users.findIndex((u)&nbsp;=&gt;&nbsp;u.id&nbsp;===&nbsp;parseInt(id));<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;dacă&nbsp;utilizatorul&nbsp;este&nbsp;găsit,&nbsp;îl&nbsp;ștergem&nbsp;din&nbsp;array&nbsp;și&nbsp;îl&nbsp;trimitem&nbsp;clientului<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if(userIndex&nbsp;&gt;&nbsp;-1)&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const&nbsp;user&nbsp;=&nbsp;users.splice(userIndex,&nbsp;1)[0];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;response.end(JSON.stringify(user));<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;dacă&nbsp;nu&nbsp;este&nbsp;găsit,&nbsp;trimitem&nbsp;codul&nbsp;de&nbsp;stare&nbsp;și&nbsp;mesajul&nbsp;de&nbsp;eroare<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;response.writeHead(404,&nbsp;{&nbsp;"Content-Type":&nbsp;"application/json"&nbsp;});<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;response.end(JSON.stringify({&nbsp;message:&nbsp;"Utilizatorul&nbsp;nu&nbsp;a&nbsp;fost&nbsp;găsit"&nbsp;}));<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;//&nbsp;adăugarea&nbsp;unui&nbsp;utilizator<br>&nbsp;&nbsp;&nbsp;else&nbsp;if&nbsp;(request.url&nbsp;===&nbsp;"/api/users"&nbsp;&amp;&amp;&nbsp;request.method&nbsp;===&nbsp;"POST")&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;try{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;obținem&nbsp;datele&nbsp;utilizatorului<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const&nbsp;userData&nbsp;=&nbsp;await&nbsp;getReqData(request);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;creăm&nbsp;un&nbsp;nou&nbsp;utilizator<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const&nbsp;user&nbsp;=&nbsp;{name:&nbsp;userData.name,&nbsp;age:&nbsp;userData.age};<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;găsim&nbsp;cel&nbsp;mai&nbsp;mare&nbsp;id<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const&nbsp;id&nbsp;=&nbsp;Math.max.apply(Math,users.map(function(u){return&nbsp;u.id;}))<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;îl&nbsp;mărim&nbsp;cu&nbsp;o&nbsp;unitate<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;user.id&nbsp;=&nbsp;id&nbsp;+&nbsp;1;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;adăugăm&nbsp;utilizatorul&nbsp;în&nbsp;array<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;users.push(user);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;response.end(JSON.stringify(user));<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;catch(error){<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;response.writeHead(400,&nbsp;{&nbsp;"Content-Type":&nbsp;"application/json"&nbsp;});<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;response.end(JSON.stringify({&nbsp;message:&nbsp;"Cerere&nbsp;incorectă"&nbsp;}));<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;//&nbsp;modificarea&nbsp;unui&nbsp;utilizator<br>&nbsp;&nbsp;&nbsp;else&nbsp;if&nbsp;(request.url&nbsp;===&nbsp;"/api/users"&nbsp;&amp;&amp;&nbsp;request.method&nbsp;===&nbsp;"PUT")&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;try{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const&nbsp;userData&nbsp;=&nbsp;await&nbsp;getReqData(request);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;obținem&nbsp;utilizatorul&nbsp;după&nbsp;id<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const&nbsp;user&nbsp;=&nbsp;users.find((u)&nbsp;=&gt;&nbsp;u.id&nbsp;===&nbsp;parseInt(userData.id));<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;dacă&nbsp;utilizatorul&nbsp;este&nbsp;găsit,&nbsp;îi&nbsp;modificăm&nbsp;datele&nbsp;și&nbsp;îl&nbsp;trimitem&nbsp;înapoi&nbsp;clientului<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if(user)&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;user.age&nbsp;=&nbsp;userData.age;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;user.name&nbsp;=&nbsp;userData.name;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;response.end(JSON.stringify(user));<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;dacă&nbsp;nu&nbsp;este&nbsp;găsit,&nbsp;trimitem&nbsp;codul&nbsp;de&nbsp;stare&nbsp;și&nbsp;mesajul&nbsp;de&nbsp;eroare<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;response.writeHead(404,&nbsp;{&nbsp;"Content-Type":&nbsp;"application/json"&nbsp;});<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;response.end(JSON.stringify({&nbsp;message:&nbsp;"Utilizatorul&nbsp;nu&nbsp;a&nbsp;fost&nbsp;găsit"&nbsp;}));<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;catch(error){<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;response.writeHead(400,&nbsp;{&nbsp;"Content-Type":&nbsp;"application/json"&nbsp;});<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;response.end(JSON.stringify({&nbsp;message:&nbsp;"Cerere&nbsp;incorectă"&nbsp;}));<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;else&nbsp;if&nbsp;(request.url&nbsp;===&nbsp;"/"&nbsp;||&nbsp;request.url&nbsp;===&nbsp;"/index.html")&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fs.readFile("index.html",&nbsp;(error,&nbsp;data)&nbsp;=&gt;&nbsp;response.end(data));<br>&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;else{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;response.writeHead(404,&nbsp;{&nbsp;"Content-Type":&nbsp;"application/json"&nbsp;});<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;response.end(JSON.stringify({&nbsp;message:&nbsp;"Resursa&nbsp;nu&nbsp;a&nbsp;fost&nbsp;găsită"&nbsp;}));<br>&nbsp;&nbsp;&nbsp;}<br>}).listen(3000,&nbsp;()=&gt;console.log("Serverul&nbsp;a&nbsp;fost&nbsp;lansat&nbsp;la&nbsp;adresa&nbsp;http://localhost:3000"));</code></pre>
     </div>
     <p class="paragraph">Să examinăm în linii generale acest cod. La început, sunt definite datele cu care va lucra clientul:</p>
     <div class="code-inline">
      <pre><code>const&nbsp;users&nbsp;=&nbsp;[<br>&nbsp;&nbsp;&nbsp;{&nbsp;id:1,&nbsp;name:"Tom",&nbsp;age:24},<br>&nbsp;&nbsp;&nbsp;{&nbsp;id:2,&nbsp;name:"Bob",&nbsp;age:27},<br>&nbsp;&nbsp;&nbsp;{&nbsp;id:3,&nbsp;name:"Alice",&nbsp;age:23}<br>]</code></pre>
     </div>
     <p class="paragraph">Pentru simplificare, datele sunt definite sub formă de un array obișnuit de obiecte, dar într-o situație reală, de obicei, aceste date sunt extrase dintr-o anumită bază de date.</p>
     <p class="paragraph">Apoi este definită funcția getReqData(), care extrage din cererea trimisă de client datele și le convertește în format JSON (se presupune că clientul va trimite date în format JSON):</p>
     <div class="code-inline">
      <pre><code>function&nbsp;getReqData(req)&nbsp;{<br>&nbsp;&nbsp;&nbsp;return&nbsp;new&nbsp;Promise(async&nbsp;(resolve,&nbsp;reject)&nbsp;=&gt;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;try&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const&nbsp;buffers&nbsp;=&nbsp;[];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for&nbsp;await&nbsp;(const&nbsp;chunk&nbsp;of&nbsp;req)&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;buffers.push(chunk);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const&nbsp;data&nbsp;=&nbsp;JSON.parse(Buffer.concat(buffers).toString());<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;resolve(data);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;catch&nbsp;(error)&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;reject(error);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;});<br>}</code></pre>
     </div>
     <p class="paragraph">Rezultatul funcției este definit sub formă de promisiune. Dacă datele sunt analizate cu succes, atunci transmitem prin promisiune obiectul analizat. Dacă apare o eroare, atunci transmitem mesajul de eroare.</p>
     <p class="paragraph">Apoi, pentru fiecare tip de cerere, este definit un scenariu specific.</p>
     <p class="paragraph">Când aplicația primește o cerere de tip GET la adresa "api/users", se execută următorul cod:</p>
     <div class="code-inline">
      <pre><code>if&nbsp;(request.url&nbsp;===&nbsp;"/api/users"&nbsp;&amp;&amp;&nbsp;request.method&nbsp;===&nbsp;"GET")&nbsp;{<br>&nbsp;&nbsp;&nbsp;response.end(JSON.stringify(users));<br>}</code></pre>
     </div>
     <p class="paragraph">Aici pur și simplu trimitem array-ul users definit mai sus.</p>
     <p class="paragraph">Când clientul accesează aplicația pentru a obține un singur obiect după id într-o cerere de tip GET la adresa "api/users/", se execută următorul cod:</p>
     <div class="code-inline">
      <pre><code>else&nbsp;if&nbsp;(request.url.match(/\/api\/users\/([0-9]+)/)&nbsp;&amp;&amp;&nbsp;request.method&nbsp;===&nbsp;"GET")&nbsp;{<br>&nbsp;&nbsp;&nbsp;//&nbsp;obținem&nbsp;id&nbsp;din&nbsp;adresa&nbsp;url<br>&nbsp;&nbsp;&nbsp;const&nbsp;id&nbsp;=&nbsp;request.url.split("/")[3];<br>&nbsp;&nbsp;&nbsp;//&nbsp;obținem&nbsp;utilizatorul&nbsp;după&nbsp;id<br>&nbsp;&nbsp;&nbsp;const&nbsp;user&nbsp;=&nbsp;users.find((u)&nbsp;=&gt;&nbsp;u.id&nbsp;===&nbsp;parseInt(id));<br>&nbsp;&nbsp;&nbsp;//&nbsp;dacă&nbsp;utilizatorul&nbsp;este&nbsp;găsit,&nbsp;îl&nbsp;trimitem<br>&nbsp;&nbsp;&nbsp;if(user)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;response.end(JSON.stringify(user));<br>&nbsp;&nbsp;&nbsp;//&nbsp;dacă&nbsp;nu&nbsp;este&nbsp;găsit,&nbsp;trimitem&nbsp;codul&nbsp;de&nbsp;stare&nbsp;și&nbsp;mesajul&nbsp;de&nbsp;eroare<br>&nbsp;&nbsp;&nbsp;else{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;response.writeHead(404,&nbsp;{&nbsp;"Content-Type":&nbsp;"application/json"&nbsp;});<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;response.end(JSON.stringify({&nbsp;message:&nbsp;"Utilizatorul&nbsp;nu&nbsp;a&nbsp;fost&nbsp;găsit"&nbsp;}));<br>&nbsp;&nbsp;&nbsp;}<br>}</code></pre>
     </div>
     <p class="paragraph">În acest caz, trebuie să găsim utilizatorul necesar după id în array, iar dacă nu este găsit, returnăm codul de stare 404 cu un anumit mesaj în format JSON.</p>
     <p class="paragraph">La primirea unei cereri DELETE la adresa "/api/users/:id", găsim indexul obiectului în array. Dacă obiectul este găsit, îl ștergem din array și îl trimitem clientului:</p>
     <div class="code-inline">
      <pre><code>//&nbsp;ștergem&nbsp;utilizatorul&nbsp;după&nbsp;id<br>else&nbsp;if&nbsp;(request.url.match(/\/api\/users\/([0-9]+)/)&nbsp;&amp;&amp;&nbsp;request.method&nbsp;===&nbsp;"DELETE")&nbsp;{<br>&nbsp;&nbsp;&nbsp;//&nbsp;obținem&nbsp;id&nbsp;din&nbsp;adresa&nbsp;url<br>&nbsp;&nbsp;&nbsp;const&nbsp;id&nbsp;=&nbsp;request.url.split("/")[3];<br>&nbsp;&nbsp;&nbsp;//&nbsp;obținem&nbsp;indexul&nbsp;utilizatorului&nbsp;după&nbsp;id<br>&nbsp;&nbsp;&nbsp;const&nbsp;userIndex&nbsp;=&nbsp;users.findIndex((u)&nbsp;=&gt;&nbsp;u.id&nbsp;===&nbsp;parseInt(id));<br>&nbsp;&nbsp;&nbsp;//&nbsp;dacă&nbsp;utilizatorul&nbsp;este&nbsp;găsit,&nbsp;îl&nbsp;ștergem&nbsp;din&nbsp;array&nbsp;și&nbsp;îl&nbsp;trimitem&nbsp;clientului<br>&nbsp;&nbsp;&nbsp;if(userIndex&nbsp;&gt;&nbsp;-1)&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const&nbsp;user&nbsp;=&nbsp;users.splice(userIndex,&nbsp;1)[0];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;response.end(JSON.stringify(user));<br>&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;//&nbsp;dacă&nbsp;nu&nbsp;este&nbsp;găsit,&nbsp;trimitem&nbsp;codul&nbsp;de&nbsp;stare&nbsp;și&nbsp;mesajul&nbsp;de&nbsp;eroare<br>&nbsp;&nbsp;&nbsp;else{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;response.writeHead(404,&nbsp;{&nbsp;"Content-Type":&nbsp;"application/json"&nbsp;});<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;response.end(JSON.stringify({&nbsp;message:&nbsp;"Utilizatorul&nbsp;nu&nbsp;a&nbsp;fost&nbsp;găsit"&nbsp;}));<br>&nbsp;&nbsp;&nbsp;}<br>}</code></pre>
     </div>
     <p class="paragraph">Dacă obiectul nu este găsit, returnăm codul de stare 404.</p>
     <p class="paragraph">La primirea unei cereri cu metoda POST la adresa "/api/users", folosim funcția getReqData() pentru a extrage datele din cerere:</p>
     <div class="code-inline">
      <pre><code>else&nbsp;if&nbsp;(request.url&nbsp;===&nbsp;"/api/users"&nbsp;și&nbsp;request.method&nbsp;===&nbsp;"POST")&nbsp;{<br>&nbsp;&nbsp;&nbsp;try{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;obținem&nbsp;datele&nbsp;utilizatorului<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const&nbsp;userData&nbsp;=&nbsp;await&nbsp;getReqData(request);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;creăm&nbsp;un&nbsp;nou&nbsp;utilizator<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const&nbsp;user&nbsp;=&nbsp;{name:&nbsp;userData.name,&nbsp;age:&nbsp;userData.age};<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;găsim&nbsp;cel&nbsp;mai&nbsp;mare&nbsp;id<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const&nbsp;id&nbsp;=&nbsp;Math.max.apply(Math,users.map(function(u){return&nbsp;u.id;}))<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;îl&nbsp;mărim&nbsp;cu&nbsp;o&nbsp;unitate<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;user.id&nbsp;=&nbsp;id&nbsp;+&nbsp;1;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;adăugăm&nbsp;utilizatorul&nbsp;în&nbsp;array<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;users.push(user);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;response.end(JSON.stringify(user));<br>&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;catch(error){<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;response.writeHead(400,&nbsp;{&nbsp;"Content-Type":&nbsp;"application/json"&nbsp;});<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;response.end(JSON.stringify({&nbsp;message:&nbsp;"Cerere&nbsp;incorectă"&nbsp;}));<br>&nbsp;&nbsp;&nbsp;}<br>}</code></pre>
     </div>
     <p class="paragraph">Deoarece la executarea funcției promisiunea poate transmite o eroare (de exemplu, în rezultatul analizei în JSON), învăluim întregul cod în try..catch. După obținerea datelor, trebuie să creăm un nou obiect și să-l adăugăm în array-ul de obiecte.</p>
     <p class="paragraph">Dacă aplicației i se trimite o cerere PUT, atunci de asemenea, cu ajutorul funcției getReqData, obținem datele trimise de client. Dacă obiectul este găsit în array, îl modificăm, altfel trimitem codul de stare 404:</p>
     <div class="code-inline">
      <pre><code>else&nbsp;if&nbsp;(request.url&nbsp;===&nbsp;"/api/users"&nbsp;și&nbsp;request.method&nbsp;===&nbsp;"PUT")&nbsp;{<br>&nbsp;&nbsp;&nbsp;try{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const&nbsp;userData&nbsp;=&nbsp;await&nbsp;getReqData(request);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;obținem&nbsp;utilizatorul&nbsp;după&nbsp;id<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const&nbsp;user&nbsp;=&nbsp;users.find((u)&nbsp;=&gt;&nbsp;u.id&nbsp;===&nbsp;parseInt(userData.id));<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;dacă&nbsp;utilizatorul&nbsp;este&nbsp;găsit,&nbsp;îi&nbsp;modificăm&nbsp;datele&nbsp;și&nbsp;îl&nbsp;trimitem&nbsp;înapoi&nbsp;clientului<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if(user)&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;user.age&nbsp;=&nbsp;userData.age;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;user.name&nbsp;=&nbsp;userData.name;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;response.end(JSON.stringify(user));<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;dacă&nbsp;nu&nbsp;este&nbsp;găsit,&nbsp;trimitem&nbsp;codul&nbsp;de&nbsp;stare&nbsp;și&nbsp;mesajul&nbsp;de&nbsp;eroare<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;response.writeHead(404,&nbsp;{&nbsp;"Content-Type":&nbsp;"application/json"&nbsp;});<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;response.end(JSON.stringify({&nbsp;message:&nbsp;"Utilizatorul&nbsp;nu&nbsp;a&nbsp;fost&nbsp;găsit"&nbsp;}));<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;catch(error){<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;response.writeHead(400,&nbsp;{&nbsp;"Content-Type":&nbsp;"application/json"&nbsp;});<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;response.end(JSON.stringify({&nbsp;message:&nbsp;"Cerere&nbsp;incorectă"&nbsp;}));<br>&nbsp;&nbsp;&nbsp;}<br>}</code></pre>
     </div>
     <p class="paragraph">Astfel, am definit cea mai simplă API. Acum să adăugăm codul clientului.</p>
     <h2 class="subtitle">Definirea clientului</h2>
     <p class="paragraph">Când se accesează rădăcina aplicației web sau la adresa "/index.html", serverul va returna fișierul index.html. Prin urmare, în aceeași folderă cu fișierul serverului, definim fișierul index.html cu următorul cod:</p>
     <div class="code-inline">
      <pre><code>&lt;!DOCTYPE&nbsp;html&gt;<br>&lt;html&gt;<br>&lt;head&gt;<br>&nbsp;&nbsp;&nbsp;&lt;meta&nbsp;charset="utf-8"&nbsp;/&gt;<br>&nbsp;&nbsp;&nbsp;&lt;meta&nbsp;name="viewport"&nbsp;content="width=device-width"&nbsp;/&gt;<br>&nbsp;&nbsp;&nbsp;&lt;title&gt;FDC.COM&lt;/title&gt;<br>&nbsp;&nbsp;&nbsp;&lt;style&gt;<br>&nbsp;&nbsp;&nbsp;tr{height:30px;}<br>&nbsp;&nbsp;&nbsp;td,&nbsp;th&nbsp;{min-width:&nbsp;40px;text-align:&nbsp;left;}<br>&nbsp;&nbsp;&nbsp;a&nbsp;{cursor:pointer;&nbsp;padding:5px;text-decoration:&nbsp;underline;color:navy;}<br>&nbsp;&nbsp;&nbsp;input{width:180px;}<br>&nbsp;&nbsp;&nbsp;&lt;/style&gt;<br>&lt;/head&gt;<br>&lt;body&gt;<br>&nbsp;&nbsp;&nbsp;&lt;h2&gt;Lista&nbsp;utilizatorilor&lt;/h2&gt;<br>&nbsp;&nbsp;&nbsp;&lt;form&nbsp;name="userForm"&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;p&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;label&nbsp;for="name"&gt;Nume:&lt;/label&gt;&lt;br&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;input&nbsp;name="name"&nbsp;/&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/p&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;p&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;label&nbsp;for="age"&gt;Vârstă:&lt;/label&gt;&lt;br&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;input&nbsp;name="age"&nbsp;type="number"&nbsp;min="1"&nbsp;max="110"&nbsp;/&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/p&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;p&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;button&nbsp;type="submit"&gt;Salvează&lt;/button&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;button&nbsp;type="reset"&gt;Resetează&lt;/button&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/p&gt;<br>&nbsp;&nbsp;&nbsp;&lt;/form&gt;<br>&nbsp;&nbsp;&nbsp;&lt;table&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;Id&lt;/th&gt;&lt;th&gt;Nume&lt;/th&gt;&lt;th&gt;Vârstă&lt;/th&gt;&lt;th&gt;&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;tbody&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/tbody&gt;<br>&nbsp;&nbsp;&nbsp;&lt;/table&gt;<br>&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&lt;script&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;let&nbsp;userId&nbsp;=&nbsp;0;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;identificatorul&nbsp;utilizatorului&nbsp;care&nbsp;este&nbsp;editat<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const&nbsp;userForm&nbsp;=&nbsp;document.forms["userForm"];&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;formularul&nbsp;de&nbsp;introducere<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;Obținerea&nbsp;tuturor&nbsp;utilizatorilor<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;async&nbsp;function&nbsp;getUsers()&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;trimite&nbsp;cererea&nbsp;și&nbsp;primește&nbsp;răspunsul<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const&nbsp;response&nbsp;=&nbsp;await&nbsp;fetch("/api/users",&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;method:&nbsp;"GET",<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;headers:&nbsp;{&nbsp;"Accept":&nbsp;"application/json"&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;});<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;dacă&nbsp;cererea&nbsp;a&nbsp;trecut&nbsp;normal<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(response.ok&nbsp;===&nbsp;true)&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;primește&nbsp;datele<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const&nbsp;users&nbsp;=&nbsp;await&nbsp;response.json();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const&nbsp;rows&nbsp;=&nbsp;document.querySelector("tbody");<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;adaugă&nbsp;elementele&nbsp;primite&nbsp;în&nbsp;tabel<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;users.forEach(user&nbsp;=&gt;&nbsp;rows.append(row(user)));<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;Obținerea&nbsp;unui&nbsp;singur&nbsp;utilizator<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;async&nbsp;function&nbsp;getUser(id)&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const&nbsp;response&nbsp;=&nbsp;await&nbsp;fetch("/api/users/"&nbsp;+&nbsp;id,&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;method:&nbsp;"GET",<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;headers:&nbsp;{&nbsp;"Accept":&nbsp;"application/json"&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;});<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(response.ok&nbsp;===&nbsp;true)&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const&nbsp;user&nbsp;=&nbsp;await&nbsp;response.json();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;userId&nbsp;=&nbsp;user.id;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;userForm.elements["name"].value&nbsp;=&nbsp;user.name;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;userForm.elements["age"].value&nbsp;=&nbsp;user.age;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;Adăugarea&nbsp;unui&nbsp;utilizator<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;async&nbsp;function&nbsp;createUser(userName,&nbsp;userAge)&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const&nbsp;response&nbsp;=&nbsp;await&nbsp;fetch("api/users",&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;method:&nbsp;"POST",<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;headers:&nbsp;{&nbsp;"Accept":&nbsp;"application/json",&nbsp;"Content-Type":&nbsp;"application/json"&nbsp;},<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;body:&nbsp;JSON.stringify({<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;name:&nbsp;userName,<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;age:&nbsp;parseInt(userAge,&nbsp;10)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;})<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;});<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(response.ok&nbsp;===&nbsp;true)&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const&nbsp;user&nbsp;=&nbsp;await&nbsp;response.json();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;reset();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.querySelector("tbody").append(row(user));<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;Modificarea&nbsp;unui&nbsp;utilizator<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;async&nbsp;function&nbsp;editUser(userId,&nbsp;userName,&nbsp;userAge)&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const&nbsp;response&nbsp;=&nbsp;await&nbsp;fetch("api/users",&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;method:&nbsp;"PUT",<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;headers:&nbsp;{&nbsp;"Accept":&nbsp;"application/json",&nbsp;"Content-Type":&nbsp;"application/json"&nbsp;},<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;body:&nbsp;JSON.stringify({<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;id:&nbsp;userId,<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;name:&nbsp;userName,<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;age:&nbsp;parseInt(userAge,&nbsp;10)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;})<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;});<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(response.ok&nbsp;===&nbsp;true)&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const&nbsp;user&nbsp;=&nbsp;await&nbsp;response.json();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;reset();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.querySelector("tr[data-rowid='"&nbsp;+&nbsp;user.id&nbsp;+&nbsp;"']").replaceWith(row(user));<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;Ștergerea&nbsp;unui&nbsp;utilizator<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;async&nbsp;function&nbsp;deleteUser(id)&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const&nbsp;response&nbsp;=&nbsp;await&nbsp;fetch("/api/users/"&nbsp;+&nbsp;id,&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;method:&nbsp;"DELETE",<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;headers:&nbsp;{&nbsp;"Accept":&nbsp;"application/json"&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;});<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(response.ok&nbsp;===&nbsp;true)&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const&nbsp;user&nbsp;=&nbsp;await&nbsp;response.json();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.querySelector("tr[data-rowid='"&nbsp;+&nbsp;user.id&nbsp;+&nbsp;"']").remove();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;resetarea&nbsp;formularului&nbsp;și&nbsp;a&nbsp;identificatorului&nbsp;curent&nbsp;al<br><br>utilizatorului<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;function&nbsp;reset()&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;userForm.reset();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;userId&nbsp;=&nbsp;0;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;crearea&nbsp;unui&nbsp;rând&nbsp;pentru&nbsp;tabel<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;function&nbsp;row(user)&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const&nbsp;tr&nbsp;=&nbsp;document.createElement("tr");<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tr.setAttribute("data-rowid",&nbsp;user.id);<br>&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const&nbsp;idTd&nbsp;=&nbsp;document.createElement("td");<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;idTd.append(user.id);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tr.append(idTd);<br>&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const&nbsp;nameTd&nbsp;=&nbsp;document.createElement("td");<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;nameTd.append(user.name);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tr.append(nameTd);<br>&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const&nbsp;ageTd&nbsp;=&nbsp;document.createElement("td");<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ageTd.append(user.age);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tr.append(ageTd);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const&nbsp;linksTd&nbsp;=&nbsp;document.createElement("td");<br>&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const&nbsp;editLink&nbsp;=&nbsp;document.createElement("a");<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;editLink.setAttribute("data-id",&nbsp;user.id);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;editLink.append("Modifică");<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;editLink.addEventListener("click",&nbsp;async&nbsp;e&nbsp;=&gt;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;e.preventDefault();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;await&nbsp;getUser(user.id);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;});<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;linksTd.append(editLink);<br>&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const&nbsp;removeLink&nbsp;=&nbsp;document.createElement("a");<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;removeLink.setAttribute("data-id",&nbsp;user.id);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;removeLink.append("Șterge");<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;removeLink.addEventListener("click",&nbsp;async&nbsp;e&nbsp;=&gt;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;e.preventDefault();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;await&nbsp;deleteUser(user.id);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;});<br>&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;linksTd.append(removeLink);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tr.appendChild(linksTd);<br>&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;tr;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;resetarea&nbsp;valorilor&nbsp;formularului<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;userForm.addEventListener("reset",&nbsp;e&nbsp;=&gt;&nbsp;reset());<br>&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;trimiterea&nbsp;formularului<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;userForm.addEventListener("submit",&nbsp;e&nbsp;=&gt;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;e.preventDefault();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const&nbsp;name&nbsp;=&nbsp;userForm.elements["name"].value;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const&nbsp;age&nbsp;=&nbsp;userForm.elements["age"].value;<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(userId&nbsp;===&nbsp;0)&nbsp;createUser(name,&nbsp;age);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else&nbsp;editUser(userId,&nbsp;name,&nbsp;age);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;});<br>&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;încărcarea&nbsp;utilizatorilor<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;getUsers();<br>&nbsp;&nbsp;&nbsp;&lt;/script&gt;<br>&lt;/body&gt;<br>&lt;/html&gt;</code></pre>
     </div>
     <p class="paragraph">Logica principală este încapsulată în codul JavaScript. La început, sunt definite datele globale:</p>
     <ul class="enumeration">
      <li>Identificatorul utilizatorului care este editat (userId = 0)</li>
      <li>Formularul de introducere (const userForm = document.forms["userForm"])</li>
     </ul>
     <p class="paragraph">Constanta userForm reprezintă formularul pentru adăugarea sau editarea unui obiect. Cu ajutorul variabilei userId urmărim identificatorul utilizatorului încărcat. Dacă este egal cu 0, atunci utilizatorul este creat.</p>
     <p class="paragraph">La încărcarea paginii, această variabilă este 0, deoarece niciun utilizator nu este încărcat pe formular. Dacă userId nu este egal cu 0, atunci utilizatorul a fost anterior încărcat cu ajutorul funcției getUser, și intenționăm să edităm acest utilizator.</p>
     <p class="paragraph">La încărcarea paginii în browser, obținem toate obiectele din baza de date cu ajutorul funcției getUsers, folosind cereri la serverul nostru prin API pentru a interacționa cu datele utilizatorilor.</p>
     <div class="code-inline">
      <pre><code>async&nbsp;function&nbsp;getUser(id)&nbsp;{<br>&nbsp;&nbsp;&nbsp;const&nbsp;response&nbsp;=&nbsp;await&nbsp;fetch("/api/users/"&nbsp;+&nbsp;id,&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;method:&nbsp;"GET",<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;headers:&nbsp;{&nbsp;"Accept":&nbsp;"application/json"&nbsp;}<br>&nbsp;&nbsp;&nbsp;});<br>&nbsp;&nbsp;&nbsp;if&nbsp;(response.ok&nbsp;===&nbsp;true)&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const&nbsp;user&nbsp;=&nbsp;await&nbsp;response.json();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;userId&nbsp;=&nbsp;user.id;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;userForm.elements["name"].value&nbsp;=&nbsp;user.name;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;userForm.elements["age"].value&nbsp;=&nbsp;user.age;<br>&nbsp;&nbsp;&nbsp;}<br>}</code></pre>
     </div>
     <p class="paragraph">Pentru a adăuga rânduri în tabel se folosește funcția row(), care returnează un rând. În acest rând vor fi definite linkuri pentru modificarea și ștergerea utilizatorului.</p>
     <p class="paragraph">Linkul pentru modificarea utilizatorului cu ajutorul funcției getUser() ,obține de pe server utilizatorul selectat:</p>
     <div class="code-inline">
      <pre><code>async&nbsp;function&nbsp;createUser(userName,&nbsp;userAge)&nbsp;{<br>&nbsp;&nbsp;&nbsp;const&nbsp;response&nbsp;=&nbsp;await&nbsp;fetch("api/users",&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;method:&nbsp;"POST",<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;headers:&nbsp;{&nbsp;"Accept":&nbsp;"application/json",&nbsp;"Content-Type":&nbsp;"application/json"&nbsp;},<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;body:&nbsp;JSON.stringify({<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;name:&nbsp;userName,<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;age:&nbsp;parseInt(userAge,&nbsp;10)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;})<br>&nbsp;&nbsp;&nbsp;});<br>&nbsp;&nbsp;&nbsp;if&nbsp;(response.ok&nbsp;===&nbsp;true)&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const&nbsp;user&nbsp;=&nbsp;await&nbsp;response.json();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;reset();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.querySelector("tbody").append(row(user));<br>&nbsp;&nbsp;&nbsp;}<br>}</code></pre>
     </div>
     <p class="paragraph">Și utilizatorul selectat este adăugat în formularul de deasupra tabelului.</p>
     <p class="paragraph">Dacă userId este egal cu 0, atunci se execută funcția createUser, care trimite datele într-o cerere POST:</p>
     <div class="code-inline">
      <pre><code>async&nbsp;function&nbsp;createUser(userName,&nbsp;userAge)&nbsp;{<br>&nbsp;&nbsp;&nbsp;const&nbsp;response&nbsp;=&nbsp;await&nbsp;fetch("api/users",&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;method:&nbsp;"POST",<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;headers:&nbsp;{&nbsp;"Accept":&nbsp;"application/json",&nbsp;"Content-Type":&nbsp;"application/json"&nbsp;},<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;body:&nbsp;JSON.stringify({<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;name:&nbsp;userName,<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;age:&nbsp;parseInt(userAge,&nbsp;10)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;})<br>&nbsp;&nbsp;&nbsp;});<br>&nbsp;&nbsp;&nbsp;if&nbsp;(response.ok&nbsp;===&nbsp;true)&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const&nbsp;user&nbsp;=&nbsp;await&nbsp;response.json();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;reset();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.querySelector("tbody").append(row(user));<br>&nbsp;&nbsp;&nbsp;}<br>}</code></pre>
     </div>
     <p class="paragraph">Însă, dacă anterior utilizatorul a fost încărcat pe formular, și în variabila userId s-a păstrat id-ul său, atunci se execută funcția editUser, care trimite o cerere PUT:</p>
     <div class="code-inline">
      <pre><code>async&nbsp;function&nbsp;editUser(userId,&nbsp;userName,&nbsp;userAge)&nbsp;{<br>&nbsp;&nbsp;&nbsp;const&nbsp;response&nbsp;=&nbsp;await&nbsp;fetch("api/users",&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;method:&nbsp;"PUT",<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;headers:&nbsp;{&nbsp;"Accept":&nbsp;"application/json",&nbsp;"Content-Type":&nbsp;"application/json"&nbsp;},<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;body:&nbsp;JSON.stringify({<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;id:&nbsp;userId,<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;name:&nbsp;userName,<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;age:&nbsp;parseInt(userAge,&nbsp;10)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;})<br>&nbsp;&nbsp;&nbsp;});<br>&nbsp;&nbsp;&nbsp;if&nbsp;(response.ok&nbsp;===&nbsp;true)&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const&nbsp;user&nbsp;=&nbsp;await&nbsp;response.json();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;reset();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.querySelector("tr[data-rowid='"&nbsp;+&nbsp;user.id&nbsp;+&nbsp;"']").replaceWith(row(user));<br>&nbsp;&nbsp;&nbsp;}<br>}</code></pre>
     </div>
     <p class="paragraph">La final, vom lansa fișierul server server.js cu comanda:</p>
     <div class="code-inline">
      <pre><code>node&nbsp;server.js</code></pre>
     </div>
     <div class="image-container">
      <img th:src="@{/images/JavaScript/19.API-ul%20Fetch/5.Crearea%20unui%20client%20pentru%20REST%20API/images/image1.png}" alt="" class="responsive-image">
     </div>
     <p class="paragraph">Accesăm în browser adresa "http://localhost:3000" și vom putea gestiona utilizatorii care sunt stocați în fișierul json.</p>
     <div class="image-container">
      <img th:src="@{/images/JavaScript/19.API-ul%20Fetch/5.Crearea%20unui%20client%20pentru%20REST%20API/images/image2.png}" alt="" class="responsive-image">
     </div>
    </div>
   </main>
   <aside class="ad-section">
    <div class="ad-box">
     <p>Google Ad Here</p>
    </div>
    <div class="ad-box">
     <p>Promo: SQL Beginner Guide</p>
    </div>
   </aside>
  </div>
  <div class="lesson-navigation">
   <th:block th:if="${previousLesson != null}">
    <a th:href="@{'/lectii/' +
            ${#strings.toLowerCase(#strings.replace(previousLesson.chapter.topic.name, ' ', '-'))} + '/' +
            ${#strings.toLowerCase(#strings.replace(previousLesson.chapter.title, ' ', '-'))} + '/' +
            ${#strings.toLowerCase(#strings.replace(previousLesson.title, ' ', '-'))} }" class="nav-button">← Lecția anterioară</a>
   </th:block> <th:block th:if="${nextLesson != null}">
    <a th:href="@{'/lectii/' +
            ${#strings.toLowerCase(#strings.replace(nextLesson.chapter.topic.name, ' ', '-'))} + '/' +
            ${#strings.toLowerCase(#strings.replace(nextLesson.chapter.title, ' ', '-'))} + '/' +
            ${#strings.toLowerCase(#strings.replace(nextLesson.title, ' ', '-'))} }" class="nav-button">Lecția următoare →</a>
   </th:block>
  </div>
  <div th:replace="~{fragments/footer :: footer}"></div>
  <script th:src="@{/js/script.js}" defer></script>
 </body>
</html>
