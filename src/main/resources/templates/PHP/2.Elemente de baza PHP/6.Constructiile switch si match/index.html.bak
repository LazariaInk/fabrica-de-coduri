<!doctype html>
<html lang="ro" xmlns:th="http://www.w3.org/1999/xhtml">
 <head>
    <link rel="icon" type="image/png" href="/nume-aplicatie/images/favicon.png">
    <script async src="https://www.googletagmanager.com/gtag/js?id=G-7Q2536ZKL2"></script>
    <script>
      window.dataLayer = window.dataLayer || [];
      window.gtag = function () { dataLayer.push(arguments); };
      gtag('consent', 'default', {
        'wait_for_update': 500,
        'region': ['RO'],
        'ad_storage': 'denied',
        'analytics_storage': 'denied',
        'ad_user_data': 'denied',
        'ad_personalization': 'denied'
      });
      gtag('js', new Date());
      gtag('config', 'G-7Q2536ZKL2');
    </script>


  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title th:text="${lesson.title}">Lesson</title>
  <link rel="stylesheet" th:href="@{/css/styles.css}">
  <style>body { background: #ffffff; }</style>
 </head>
 <body th:with="activeTopic='PHP', activeChapter='2.Elemente de baza PHP', activeLesson='6.Constructiile switch si match'">
  <button class="mobile-sidebar-toggle" onclick="toggleMobileSidebar()">☰</button>
  <div th:replace="~{fragments/nav :: nav}"></div>
  <div class="top-nav">
   <th:block th:each="topic : ${topics}">
    <a th:href="@{'/lectii/topic/' + ${topic.id}}" th:text="${topic.name}" th:classappend="${topic.id} == ${activeTopicId} ? 'active' : ''"> </a>
   </th:block>
  </div>
  <div class="layout">
   <div class="mobile-sidebar" id="mobileSidebar">
    <button class="close-btn" onclick="toggleSidebar()">✖</button>
    <ul class="chapter-list">
     <th:block th:each="chapter : ${chapters}">
      <li class="chapter-item" th:classappend="${chapter.id} == ${activeChapterId} ? 'open' : ''">
       <div class="chapter-title" onclick="toggleChapter(this)">
        <strong th:text="${chapter.title}"></strong> <span class="arrow">▼</span>
       </div>
       <ul class="lesson-list">
        <th:block th:each="lesson : ${chapter.lessons}">
         <li><a th:href="@{'/lessons/' +
    ${#strings.toLowerCase(#strings.replace(chapter.topic.name, ' ', '-'))} + '/' +
    ${#strings.toLowerCase(#strings.replace(chapter.title, ' ', '-'))} + '/' +
    ${#strings.toLowerCase(#strings.replace(lesson.title, ' ', '-'))} }" th:text="${lesson.title}" th:classappend="${lesson.id} == ${activeLessonId} ? 'active' : ''"> </a></li>
        </th:block>
       </ul></li>
     </th:block>
    </ul>
   </div>
   <aside class="sidebar">
    <ul class="sidebar-list">
     <th:block th:each="chapter : ${chapters}">
      <li class="chapter-item" th:classappend="${chapter.id} == ${activeChapterId} ? 'open' : ''">
       <div class="chapter-toggle" onclick="toggleLessons(this)">
        <span th:text="${chapter.title}">Chapter</span>
       </div>
       <ul class="lesson-list hidden">
        <th:block th:each="lesson : ${chapter.lessons}">
         <li><a th:href="@{'/lessons/' +
    ${#strings.toLowerCase(#strings.replace(chapter.topic.name, ' ', '-'))} + '/' +
    ${#strings.toLowerCase(#strings.replace(chapter.title, ' ', '-'))} + '/' +
    ${#strings.toLowerCase(#strings.replace(lesson.title, ' ', '-'))} }" th:text="${lesson.title}" th:classappend="${lesson.id} == ${activeLessonId} ? 'active' : ''"> </a></li>
        </th:block>
       </ul></li>
     </th:block>
    </ul>
   </aside>
   <main class="content">
    <div class="document-container">
     <h1 class="main-title">Construcțiile switch și match</h1>
     <p class="paragraph">Construcția switch..case este o alternativă la utilizarea construcției if..elseif..else. Operatorul switch primește o expresie și o compară cu un set de valori:</p>
     <div class="code-inline">
      <pre><code>switch&nbsp;(expresie)&nbsp;{<br>&nbsp;&nbsp;&nbsp;case&nbsp;valoare1:&nbsp;acțiuni;&nbsp;break;<br>&nbsp;&nbsp;&nbsp;case&nbsp;valoare2:&nbsp;acțiuni;&nbsp;break;<br>&nbsp;&nbsp;&nbsp;//...........................<br>&nbsp;&nbsp;&nbsp;case&nbsp;valoareN:&nbsp;acțiuni;&nbsp;break;}</code></pre>
     </div>
     <p class="paragraph">După cuvântul cheie switch, în paranteze urmează expresia care va fi comparată. Valoarea acestei expresii este comparată secvențial cu valorile plasate după operatorii case. Dacă se găsește o potrivire, se execută blocul case respectiv.</p>
     <p class="paragraph">Construcția switch poate conține un număr arbitrar de operatori case. La sfârșitul fiecărui bloc case se plasează operatorul break pentru a evita executarea altor blocuri.</p>
     <p class="paragraph">Întregul bloc switch este delimitat de acolade, însă blocul fiecărui operator case NU este delimitat de acolade.</p>
     <p class="paragraph">De exemplu, să luăm următoarea construcție if..elseif..else:</p>
     <div class="code-inline">
      <pre><code>$a&nbsp;=&nbsp;3;<br>if($a&nbsp;==&nbsp;1)&nbsp;echo&nbsp;"adunare";<br>elseif($a&nbsp;==&nbsp;2)&nbsp;echo&nbsp;"scădere";<br>elseif($a&nbsp;==&nbsp;3)&nbsp;echo&nbsp;"înmulțire";<br>elseif($a&nbsp;==&nbsp;4)&nbsp;echo&nbsp;"împărțire";</code></pre>
     </div>
     <p class="paragraph">Acum să o rescriem folosind construcția switch..case:</p>
     <div class="code-inline">
      <pre><code>$a&nbsp;=&nbsp;3;<br>switch($a)&nbsp;{<br>&nbsp;&nbsp;&nbsp;case&nbsp;1:<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;"adunare";<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;break;<br>&nbsp;&nbsp;&nbsp;case&nbsp;2:<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;"scădere";<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;break;<br>&nbsp;&nbsp;&nbsp;case&nbsp;3:<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;"înmulțire";<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;break;<br>&nbsp;&nbsp;&nbsp;case&nbsp;4:<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;"împărțire";<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;break;<br>}</code></pre>
     </div>
     <p class="paragraph">Astfel, construcția switch primește variabila $a, iar valoarea acesteia este comparată secvențial cu valorile specificate după operatorii case. În acest caz, variabila $a este egală cu 3, astfel se va executa blocul:</p>
     <div class="code-inline">
      <pre><code>case&nbsp;3:<br>&nbsp;&nbsp;&nbsp;echo&nbsp;"înmulțire";<br>&nbsp;&nbsp;&nbsp;break;</code></pre>
     </div>
     <p class="paragraph">Dacă dorim să tratăm și situația în care nu se găsește nicio potrivire, putem adăuga blocul default:</p>
     <div class="code-inline">
      <pre><code>$a&nbsp;=&nbsp;3;<br>switch($a)&nbsp;{<br>&nbsp;&nbsp;&nbsp;case&nbsp;1:<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;"adunare";<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;break;<br>&nbsp;&nbsp;&nbsp;case&nbsp;2:<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;"scădere";<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;break;<br>&nbsp;&nbsp;&nbsp;default:<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;"acțiune&nbsp;implicită";<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;break;<br>}</code></pre>
     </div>
     <p class="paragraph">Construcția switch..case suportă și sintaxa alternativă, în care în loc de acoladă deschisă se folosește două puncte, iar în loc de acoladă închisă se folosește cuvântul cheie endswitch:</p>
     <div class="code-inline">
      <pre><code>$a&nbsp;=&nbsp;3;<br>switch($a):<br>&nbsp;&nbsp;&nbsp;case&nbsp;1:<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;"adunare";<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;break;<br>&nbsp;&nbsp;&nbsp;case&nbsp;2:<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;"scădere";<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;break;<br>&nbsp;&nbsp;&nbsp;default:<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;"acțiune&nbsp;implicită";<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;break;<br>endswitch;</code></pre>
     </div>
     <h2 class="subtitle">Construcția match</h2>
     <p class="paragraph">Începând cu versiunea 8.0, PHP a adăugat suportul pentru o altă construcție similară - match. Aceasta permite optimizarea construcției switch. Construcția match primește și ea o expresie și o compară cu un set de valori.</p>
     <p class="paragraph">De exemplu, să luăm următorul cod:</p>
     <div class="code-inline">
      <pre><code>$a&nbsp;=&nbsp;2;<br>switch($a)&nbsp;{<br>&nbsp;&nbsp;&nbsp;case&nbsp;1:<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$operation&nbsp;=&nbsp;"adunare";<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;break;<br>&nbsp;&nbsp;&nbsp;case&nbsp;2:<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$operation&nbsp;=&nbsp;"scădere";<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;break;<br>&nbsp;&nbsp;&nbsp;default:<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$operation&nbsp;=&nbsp;"acțiune&nbsp;implicită";<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;break;<br>}<br>echo&nbsp;$operation;</code></pre>
     </div>
     <p class="paragraph">Rescriem acest exemplu folosind match:</p>
     <div class="code-inline">
      <pre><code>$a&nbsp;=&nbsp;2;<br>$operation&nbsp;=&nbsp;match($a)&nbsp;{<br>&nbsp;&nbsp;&nbsp;1&nbsp;=&gt;&nbsp;"adunare",<br>&nbsp;&nbsp;&nbsp;2&nbsp;=&gt;&nbsp;"scădere",<br>&nbsp;&nbsp;&nbsp;default&nbsp;=&gt;&nbsp;"acțiune&nbsp;implicită",<br>};<br>echo&nbsp;$operation;</code></pre>
     </div>
     <p class="paragraph">Construcția match primește în paranteze o expresie (în acest caz variabila $a). Blocul de cod match este, de asemenea, delimitat de acolade, dar după acolada închisă este necesar să punem punct și virgulă. În loc de operatorii case, doar se specifică valorile cu care se compară expresia.</p>
     <p class="paragraph">Dar, spre deosebire de switch, construcția match returnează un rezultat. De aceea, după fiecare valoare comparată se plasează operatorul =&gt;, urmat de rezultatul returnat.</p>
     <p class="paragraph">Astfel, în acest caz, variabila $a este egală cu 2, astfel în construcția match se va executa blocul:</p>
     <div class="code-inline">
      <pre><code>2&nbsp;=&gt;&nbsp;"scădere",</code></pre>
     </div>
     <p class="paragraph">Acest bloc va seta ca rezultat returnat șirul "scădere".</p>
     <p class="paragraph">Deoarece construcția match returnează un rezultat, acest rezultat poate fi atribuit unei alte variabile:</p>
     <div class="code-inline">
      <pre><code>$operation&nbsp;=&nbsp;match($a){<br>&nbsp;&nbsp;&nbsp;//.................<br>}</code></pre>
     </div>
     <p class="paragraph">În final, în variabila $operation se va stoca șirul "scădere".</p>
     <p class="paragraph">De asemenea, putem rescrie exemplul anterior astfel:</p>
     <div class="code-inline">
      <pre><code>$a&nbsp;=&nbsp;2;<br>match($a)&nbsp;{<br>&nbsp;&nbsp;&nbsp;1&nbsp;=&gt;&nbsp;$operation&nbsp;=&nbsp;"adunare",<br>&nbsp;&nbsp;&nbsp;2&nbsp;=&gt;&nbsp;$operation&nbsp;=&nbsp;"scădere",<br>&nbsp;&nbsp;&nbsp;default&nbsp;=&gt;&nbsp;$operation&nbsp;=&nbsp;"acțiune&nbsp;implicită",<br>};<br>echo&nbsp;$operation;</code></pre>
     </div>
     <h2 class="subtitle">Compararea valorilor și tipurilor</h2>
     <p class="paragraph">Este important de menționat o diferență importantă între construcțiile switch și match: switch compară doar valoarea, fără a ține cont de tipul expresiei. În schimb, match ține cont și de tipul expresiei comparate. Să analizăm diferența pe un exemplu. Să considerăm următoarea construcție switch:</p>
     <div class="code-inline">
      <pre><code>switch&nbsp;(8.0)&nbsp;{<br>&nbsp;case&nbsp;"8.0":<br>&nbsp;&nbsp;&nbsp;$result&nbsp;=&nbsp;"șir";<br>&nbsp;&nbsp;&nbsp;break;<br>&nbsp;case&nbsp;8.0:<br>&nbsp;&nbsp;&nbsp;$result&nbsp;=&nbsp;"număr";<br>&nbsp;&nbsp;&nbsp;break;<br>}<br>echo&nbsp;$result;&nbsp;//&nbsp;șir</code></pre>
     </div>
     <p class="paragraph">Construcția switch primește ca expresie numărul 8.0, dar din punctul de vedere al logicii interne a construcției switch, această expresie corespunde și șirului "8.0". Prin urmare, în acest caz se va executa blocul:</p>
     <div class="code-inline">
      <pre><code>case&nbsp;"8.0":<br>&nbsp;&nbsp;&nbsp;$result&nbsp;=&nbsp;"șir";<br>&nbsp;&nbsp;&nbsp;break;</code></pre>
     </div>
     <p class="paragraph">Acum să vedem ce se întâmplă într-un exemplu similar cu match:</p>
     <div class="code-inline">
      <pre><code>match&nbsp;(8.0)&nbsp;{<br>&nbsp;"8.0"&nbsp;=&gt;&nbsp;$result&nbsp;=&nbsp;"șir",<br>&nbsp;8.0&nbsp;=&gt;&nbsp;$result&nbsp;=&nbsp;"număr"<br>};<br>echo&nbsp;$result;&nbsp;//&nbsp;număr</code></pre>
     </div>
     <p class="paragraph">Construcția match ține cont și de tipul expresiei, iar tipul în acest caz este float, prin urmare se va executa blocul:</p>
     <div class="code-inline">
      <pre><code>8.0&nbsp;=&gt;&nbsp;$result&nbsp;=&nbsp;"număr"</code></pre>
     </div>
    </div>
   </main>
   <aside class="ad-section">
    <div class="ad-box">
     <p>Google Ad Here</p>
    </div>
    <div class="ad-box">
     <p>Promo: SQL Beginner Guide</p>
    </div>
   </aside>
  </div>
  <div class="lesson-navigation">
   <th:block th:if="${previousLesson != null}">
    <a th:href="@{'/lessons/' +
            ${#strings.toLowerCase(#strings.replace(previousLesson.chapter.topic.name, ' ', '-'))} + '/' +
            ${#strings.toLowerCase(#strings.replace(previousLesson.chapter.title, ' ', '-'))} + '/' +
            ${#strings.toLowerCase(#strings.replace(previousLesson.title, ' ', '-'))} }" class="nav-button">← Lecția anterioară</a>
   </th:block> <th:block th:if="${nextLesson != null}">
    <a th:href="@{'/lessons/' +
            ${#strings.toLowerCase(#strings.replace(nextLesson.chapter.topic.name, ' ', '-'))} + '/' +
            ${#strings.toLowerCase(#strings.replace(nextLesson.chapter.title, ' ', '-'))} + '/' +
            ${#strings.toLowerCase(#strings.replace(nextLesson.title, ' ', '-'))} }" class="nav-button">Lecția următoare →</a>
   </th:block>
  </div>
  <div th:replace="~{fragments/footer :: footer}"></div>
  <script th:src="@{/js/script.js}" defer></script>
 </body>
</html>
