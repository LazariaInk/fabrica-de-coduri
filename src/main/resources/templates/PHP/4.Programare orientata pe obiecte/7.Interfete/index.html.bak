<!doctype html>
<html lang="ro" xmlns:th="http://www.w3.org/1999/xhtml">
 <head>
    <link rel="icon" type="image/png" href="/nume-aplicatie/images/favicon.png">
    <script async src="https://www.googletagmanager.com/gtag/js?id=G-7Q2536ZKL2"></script>
    <script>
      window.dataLayer = window.dataLayer || [];
      window.gtag = function () { dataLayer.push(arguments); };
      gtag('consent', 'default', {
        'wait_for_update': 500,
        'region': ['RO'],
        'ad_storage': 'denied',
        'analytics_storage': 'denied',
        'ad_user_data': 'denied',
        'ad_personalization': 'denied'
      });
      gtag('js', new Date());
      gtag('config', 'G-7Q2536ZKL2');
    </script>


  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title th:text="${lesson.title}">Lesson</title>
  <link rel="stylesheet" th:href="@{/css/styles.css}">
  <style>body { background: #ffffff; }</style>
 </head>
 <body th:with="activeTopic='PHP', activeChapter='4.Programare orientata pe obiecte', activeLesson='7.Interfete'">
  <button class="mobile-sidebar-toggle" onclick="toggleMobileSidebar()">☰</button>
  <div th:replace="~{fragments/nav :: nav}"></div>
  <div class="top-nav">
   <th:block th:each="topic : ${topics}">
    <a th:href="@{'/lectii/topic/' + ${topic.id}}" th:text="${topic.name}" th:classappend="${topic.id} == ${activeTopicId} ? 'active' : ''"> </a>
   </th:block>
  </div>
  <div class="layout">
   <div class="mobile-sidebar" id="mobileSidebar">
    <button class="close-btn" onclick="toggleSidebar()">✖</button>
    <ul class="chapter-list">
     <th:block th:each="chapter : ${chapters}">
      <li class="chapter-item" th:classappend="${chapter.id} == ${activeChapterId} ? 'open' : ''">
       <div class="chapter-title" onclick="toggleChapter(this)">
        <strong th:text="${chapter.title}"></strong> <span class="arrow">▼</span>
       </div>
       <ul class="lesson-list">
        <th:block th:each="lesson : ${chapter.lessons}">
         <li><a th:href="@{'/lessons/' +
    ${#strings.toLowerCase(#strings.replace(chapter.topic.name, ' ', '-'))} + '/' +
    ${#strings.toLowerCase(#strings.replace(chapter.title, ' ', '-'))} + '/' +
    ${#strings.toLowerCase(#strings.replace(lesson.title, ' ', '-'))} }" th:text="${lesson.title}" th:classappend="${lesson.id} == ${activeLessonId} ? 'active' : ''"> </a></li>
        </th:block>
       </ul></li>
     </th:block>
    </ul>
   </div>
   <aside class="sidebar">
    <ul class="sidebar-list">
     <th:block th:each="chapter : ${chapters}">
      <li class="chapter-item" th:classappend="${chapter.id} == ${activeChapterId} ? 'open' : ''">
       <div class="chapter-toggle" onclick="toggleLessons(this)">
        <span th:text="${chapter.title}">Chapter</span>
       </div>
       <ul class="lesson-list hidden">
        <th:block th:each="lesson : ${chapter.lessons}">
         <li><a th:href="@{'/lessons/' +
    ${#strings.toLowerCase(#strings.replace(chapter.topic.name, ' ', '-'))} + '/' +
    ${#strings.toLowerCase(#strings.replace(chapter.title, ' ', '-'))} + '/' +
    ${#strings.toLowerCase(#strings.replace(lesson.title, ' ', '-'))} }" th:text="${lesson.title}" th:classappend="${lesson.id} == ${activeLessonId} ? 'active' : ''"> </a></li>
        </th:block>
       </ul></li>
     </th:block>
    </ul>
   </aside>
   <main class="content">
    <div class="document-container">
     <h1 class="main-title">Interfețe</h1>
     <p class="paragraph">O interfață definește un design abstract pe care trebuie să îl respecte clasa care îl implementează. Interfața definește metode fără implementare, iar clasa care implementează interfața trebuie să definească aceste metode. Utilizarea interfeței garantează că o clasă are o anumită funcționalitate descrisă de interfață.</p>
     <p class="paragraph">Interfața este definită folosind cuvântul cheie interface, urmat de numele interfeței și blocul de cod al interfeței în acolade:</p>
     <div class="code-inline">
      <pre><code>interface&nbsp;Messenger&nbsp;{}</code></pre>
     </div>
     <p class="paragraph">Aici este definită interfața Messenger. În interiorul blocului interfeței, în acolade, sunt definite semnăturile metodelor. Toate aceste metode pot fi doar publice, adică cu modificatorul public, sau fără modificator de acces (ceea ce este echivalent cu modificatorul public):</p>
     <div class="code-inline">
      <pre><code>interface&nbsp;Messenger<br>{<br>&nbsp;&nbsp;&nbsp;function&nbsp;send();<br>}</code></pre>
     </div>
     <p class="paragraph">Interfețele pot conține doar semnăturile metodelor - numele funcțiilor și lista de parametri în paranteze, urmate de punct și virgulă. Astfel, în acest caz, este declarată metoda send(). Aceasta nu are implementare - implementarea specifică va fi definită de clasa care implementează această interfață.</p>
     <p class="paragraph">Pentru ca o clasă să implementeze o interfață, se folosește cuvântul cheie implements, urmat de numele interfeței:</p>
     <div class="code-inline">
      <pre><code>&lt;?php<br>interface&nbsp;Messenger<br>{<br>&nbsp;&nbsp;&nbsp;function&nbsp;send();<br>}<br>class&nbsp;EmailMessenger&nbsp;implements&nbsp;Messenger&nbsp;<br>{<br>&nbsp;&nbsp;&nbsp;function&nbsp;send()<br>&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;"Trimitere&nbsp;mesaj&nbsp;prin&nbsp;e-mail";<br>&nbsp;&nbsp;&nbsp;}<br>}<br>$outlook&nbsp;=&nbsp;new&nbsp;EmailMessenger();<br>$outlook-&gt;send();<br>?&gt;</code></pre>
     </div>
     <p class="paragraph">În acest caz, clasa EmailMessenger implementează interfața Messenger. Dacă o clasă implementează o interfață, aceasta trebuie să implementeze toate metodele din interfață. Astfel, în acest caz, clasa EmailMessenger definește metoda send() cu o anumită implementare.</p>
     <p class="paragraph">Interfețele pot fi, de asemenea, moștenite de alte interfețe:</p>
     <div class="code-inline">
      <pre><code>&lt;?php<br>interface&nbsp;Messenger<br>{<br>&nbsp;&nbsp;&nbsp;function&nbsp;send();<br>}<br>interface&nbsp;EmailMessenger&nbsp;extends&nbsp;Messenger<br>{<br>&nbsp;&nbsp;&nbsp;<br>}<br>class&nbsp;SimpleEmailMessenger&nbsp;implements&nbsp;EmailMessenger&nbsp;<br>{<br>&nbsp;&nbsp;&nbsp;function&nbsp;send()<br>&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;"Trimitere&nbsp;mesaj&nbsp;prin&nbsp;e-mail.";<br>&nbsp;&nbsp;&nbsp;}<br>}<br>$outlook&nbsp;=&nbsp;new&nbsp;SimpleEmailMessenger();<br>$outlook-&gt;send();<br>?&gt;</code></pre>
     </div>
     <p class="paragraph">Când pot fi necesare interfețele? O interfață este un contract care specifică că o clasă va implementa o anumită funcționalitate. Putem folosi acest lucru în programul nostru. De exemplu, definim următorul cod:</p>
     <div class="code-inline">
      <pre><code>&lt;?php<br>interface&nbsp;Messenger<br>{<br>&nbsp;&nbsp;&nbsp;function&nbsp;send($message);<br>}<br>function&nbsp;sendMessage(Messenger&nbsp;$messenger,&nbsp;$text)<br>{<br>&nbsp;&nbsp;&nbsp;$messenger-&gt;send($text);<br>}<br><br>class&nbsp;EmailMessenger&nbsp;implements&nbsp;Messenger&nbsp;<br>{<br>&nbsp;&nbsp;&nbsp;function&nbsp;send($message)<br>&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;"Trimitere&nbsp;mesaj&nbsp;prin&nbsp;e-mail:&nbsp;$message";<br>&nbsp;&nbsp;&nbsp;}<br>}<br>$outlook&nbsp;=&nbsp;new&nbsp;EmailMessenger();<br>sendMessage($outlook,&nbsp;"Hello&nbsp;World");<br>?&gt;</code></pre>
     </div>
     <p class="paragraph">Pentru a trimite un mesaj, este definită funcția sendMessage(), care acceptă ca prim parametru un obiect de tip Messenger și ca al doilea parametru textul mesajului. Definiția primului parametru specifică faptul că valoarea transmisă acestui parametru trebuie să implementeze interfața Messenger.</p>
     <p class="paragraph">În funcția în sine, știm că primul parametru este un obiect care implementează interfața Messenger, deci putem apela metoda send() pentru a trimite mesajul:</p>
     <div class="code-inline">
      <pre><code>function&nbsp;sendMessage(Messenger&nbsp;$messenger,&nbsp;$text)<br>{<br>&nbsp;&nbsp;&nbsp;$messenger-&gt;send($text);<br>}</code></pre>
     </div>
     <h2 class="subtitle">Implementarea multiplă a interfețelor</h2>
     <p class="paragraph">O clasă poate implementa mai multe interfețe simultan. În acest caz, toate interfețele sunt enumerate prin virgulă după cuvântul implements. Clasa trebuie să implementeze metodele tuturor interfețelor implementate:</p>
     <div class="code-inline">
      <pre><code>interface&nbsp;Camera<br>{<br>&nbsp;&nbsp;&nbsp;function&nbsp;makeVideo();<br>&nbsp;&nbsp;&nbsp;function&nbsp;makePhoto();<br>}<br>interface&nbsp;Messenger<br>{<br>&nbsp;&nbsp;&nbsp;function&nbsp;sendMessage($message);<br>}<br><br>class&nbsp;Mobile&nbsp;implements&nbsp;Camera,&nbsp;Messenger<br>{<br>&nbsp;&nbsp;&nbsp;function&nbsp;makeVideo(){&nbsp;echo&nbsp;"Înregistrare&nbsp;video";}<br>&nbsp;&nbsp;&nbsp;function&nbsp;makePhoto(){&nbsp;echo&nbsp;"Fotografiere";}<br>&nbsp;&nbsp;&nbsp;function&nbsp;sendMessage($message)&nbsp;{echo&nbsp;"Trimitere&nbsp;mesaj&nbsp;$message";}<br>}<br>$iphone12&nbsp;=&nbsp;new&nbsp;Mobile();<br>$iphone12-&gt;makePhoto();</code></pre>
     </div>
    </div>
   </main>
   <aside class="ad-section">
    <div class="ad-box">
     <p>Google Ad Here</p>
    </div>
    <div class="ad-box">
     <p>Promo: SQL Beginner Guide</p>
    </div>
   </aside>
  </div>
  <div class="lesson-navigation">
   <th:block th:if="${previousLesson != null}">
    <a th:href="@{'/lessons/' +
            ${#strings.toLowerCase(#strings.replace(previousLesson.chapter.topic.name, ' ', '-'))} + '/' +
            ${#strings.toLowerCase(#strings.replace(previousLesson.chapter.title, ' ', '-'))} + '/' +
            ${#strings.toLowerCase(#strings.replace(previousLesson.title, ' ', '-'))} }" class="nav-button">← Lecția anterioară</a>
   </th:block> <th:block th:if="${nextLesson != null}">
    <a th:href="@{'/lessons/' +
            ${#strings.toLowerCase(#strings.replace(nextLesson.chapter.topic.name, ' ', '-'))} + '/' +
            ${#strings.toLowerCase(#strings.replace(nextLesson.chapter.title, ' ', '-'))} + '/' +
            ${#strings.toLowerCase(#strings.replace(nextLesson.title, ' ', '-'))} }" class="nav-button">Lecția următoare →</a>
   </th:block>
  </div>
  <div th:replace="~{fragments/footer :: footer}"></div>
  <script th:src="@{/js/script.js}" defer></script>
 </body>
</html>
