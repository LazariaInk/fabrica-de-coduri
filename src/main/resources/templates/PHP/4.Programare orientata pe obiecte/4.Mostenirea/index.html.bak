<!doctype html>
<html lang="ro" xmlns:th="http://www.w3.org/1999/xhtml">
 <head>
    <link rel="icon" type="image/png" href="/nume-aplicatie/images/favicon.png">
    <script async src="https://www.googletagmanager.com/gtag/js?id=G-7Q2536ZKL2"></script>
    <script>
      window.dataLayer = window.dataLayer || [];
      window.gtag = function () { dataLayer.push(arguments); };
      gtag('consent', 'default', {
        'wait_for_update': 500,
        'region': ['RO'],
        'ad_storage': 'denied',
        'analytics_storage': 'denied',
        'ad_user_data': 'denied',
        'ad_personalization': 'denied'
      });
      gtag('js', new Date());
      gtag('config', 'G-7Q2536ZKL2');
    </script>


  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title th:text="${lesson.title}">Lesson</title>
  <link rel="stylesheet" th:href="@{/css/styles.css}">
  <style>body { background: #ffffff; }</style>
 </head>
 <body th:with="activeTopic='PHP', activeChapter='4.Programare orientata pe obiecte', activeLesson='4.Mostenirea'">
  <button class="mobile-sidebar-toggle" onclick="toggleMobileSidebar()">☰</button>
  <div th:replace="~{fragments/nav :: nav}"></div>
  <div class="top-nav">
   <th:block th:each="topic : ${topics}">
    <a th:href="@{'/lectii/topic/' + ${topic.id}}" th:text="${topic.name}" th:classappend="${topic.id} == ${activeTopicId} ? 'active' : ''"> </a>
   </th:block>
  </div>
  <div class="layout">
   <div class="mobile-sidebar" id="mobileSidebar">
    <button class="close-btn" onclick="toggleSidebar()">✖</button>
    <ul class="chapter-list">
     <th:block th:each="chapter : ${chapters}">
      <li class="chapter-item" th:classappend="${chapter.id} == ${activeChapterId} ? 'open' : ''">
       <div class="chapter-title" onclick="toggleChapter(this)">
        <strong th:text="${chapter.title}"></strong> <span class="arrow">▼</span>
       </div>
       <ul class="lesson-list">
        <th:block th:each="lesson : ${chapter.lessons}">
         <li><a th:href="@{'/lessons/' +
    ${#strings.toLowerCase(#strings.replace(chapter.topic.name, ' ', '-'))} + '/' +
    ${#strings.toLowerCase(#strings.replace(chapter.title, ' ', '-'))} + '/' +
    ${#strings.toLowerCase(#strings.replace(lesson.title, ' ', '-'))} }" th:text="${lesson.title}" th:classappend="${lesson.id} == ${activeLessonId} ? 'active' : ''"> </a></li>
        </th:block>
       </ul></li>
     </th:block>
    </ul>
   </div>
   <aside class="sidebar">
    <ul class="sidebar-list">
     <th:block th:each="chapter : ${chapters}">
      <li class="chapter-item" th:classappend="${chapter.id} == ${activeChapterId} ? 'open' : ''">
       <div class="chapter-toggle" onclick="toggleLessons(this)">
        <span th:text="${chapter.title}">Chapter</span>
       </div>
       <ul class="lesson-list hidden">
        <th:block th:each="lesson : ${chapter.lessons}">
         <li><a th:href="@{'/lessons/' +
    ${#strings.toLowerCase(#strings.replace(chapter.topic.name, ' ', '-'))} + '/' +
    ${#strings.toLowerCase(#strings.replace(chapter.title, ' ', '-'))} + '/' +
    ${#strings.toLowerCase(#strings.replace(lesson.title, ' ', '-'))} }" th:text="${lesson.title}" th:classappend="${lesson.id} == ${activeLessonId} ? 'active' : ''"> </a></li>
        </th:block>
       </ul></li>
     </th:block>
    </ul>
   </aside>
   <main class="content">
    <div class="document-container">
     <h1 class="main-title">Moștenirea</h1>
     <p class="paragraph">Moștenirea este unul dintre aspectele principale ale programării orientate pe obiecte. Moștenirea permite unei clase să preia funcționalitatea claselor existente și, dacă este necesar, să o redefinească. Dacă avem o clasă care nu are câteva funcții, este mult mai simplu să moștenim clasa existentă și să adăugăm câteva linii de cod, decât să creăm una nouă de la zero, rescriind o mulțime de cod.</p>
     <p class="paragraph">Pentru a moșteni o clasă de la alta, trebuie să utilizăm operatorul extends. Este important de menționat că în PHP putem moșteni o clasă doar de la o singură clasă. Moștenirea multiplă nu este suportată.</p>
     <p class="paragraph">De exemplu, să moștenim clasa Employee de la clasa Person:</p>
     <div class="code-inline">
      <pre><code>&lt;?php<br>class&nbsp;Person<br>{<br>&nbsp;&nbsp;&nbsp;public&nbsp;$name;<br>&nbsp;&nbsp;&nbsp;function&nbsp;__construct($name)<br>&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$this-&gt;name&nbsp;=&nbsp;$name;<br>&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;function&nbsp;displayInfo()<br>&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;"Nume:&nbsp;$this-&gt;name&lt;br&gt;";<br>&nbsp;&nbsp;&nbsp;}<br>}<br>class&nbsp;Employee&nbsp;extends&nbsp;Person&nbsp;<br>{}<br><br>$tom&nbsp;=&nbsp;new&nbsp;Employee("Tom");<br>$tom&nbsp;-&gt;&nbsp;displayInfo();<br>?&gt;</code></pre>
     </div>
     <p class="paragraph">În acest caz, să presupunem că clasa Person reprezintă o persoană în general, iar clasa Employee - un angajat al unei companii. În această legătură, fiecare angajat reprezintă o persoană.</p>
     <p class="paragraph">Și pentru a nu duplica același funcțional, este mai bine să moștenim clasa Employee de la clasa Person. În această pereche, clasa Person este numită clasa părinte sau clasa de bază, iar clasa Employee este clasa derivată sau clasa copil.</p>
     <p class="paragraph">Deoarece clasa Employee este moștenită de la Person, pentru obiectele clasei Employee putem utiliza funcționalitatea clasei părinte Person. Astfel, pentru a crea un obiect Employee în acest caz, este apelat constructorul definit în clasa Person, care acceptă ca parametru numele persoanei:</p>
     <div class="code-inline">
      <pre><code>$tom&nbsp;=&nbsp;new&nbsp;Employee("Tom");</code></pre>
     </div>
     <p class="paragraph">De asemenea, pentru variabila de tip Employee este apelată metoda displayInfo, care este definită în clasa Person:</p>
     <div class="code-inline">
      <pre><code>$tom&nbsp;-&gt;&nbsp;displayInfo();</code></pre>
     </div>
     <h2 class="subtitle">Suprascrierea funcționalității</h2>
     <p class="paragraph">Moștenind funcționalitatea clasei părinte, clasa derivată poate adăuga propriile proprietăți și metode sau poate suprascrie funcționalitatea moștenită. De exemplu, să modificăm clasa Employee, adăugând în ea date despre compania unde lucrează angajatul:</p>
     <div class="code-inline">
      <pre><code>&lt;?php<br>class&nbsp;Person<br>{<br>&nbsp;&nbsp;&nbsp;public&nbsp;$name;<br>&nbsp;&nbsp;&nbsp;function&nbsp;__construct($name)<br>&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$this-&gt;name&nbsp;=&nbsp;$name;<br>&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;function&nbsp;displayInfo()<br>&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;"Nume:&nbsp;$this-&gt;name&lt;br&gt;";<br>&nbsp;&nbsp;&nbsp;}<br>}<br>class&nbsp;Employee&nbsp;extends&nbsp;Person&nbsp;<br>{<br>&nbsp;&nbsp;&nbsp;public&nbsp;$company;<br>&nbsp;&nbsp;&nbsp;function&nbsp;__construct($name,&nbsp;$company)<br>&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$this-&gt;name&nbsp;=&nbsp;$name;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$this-&gt;company&nbsp;=&nbsp;$company;<br>&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;function&nbsp;displayInfo()<br>&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;"Nume:&nbsp;$this-&gt;name&lt;br&gt;";<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;"Lucrează&nbsp;la&nbsp;$this-&gt;company&lt;br&gt;";<br>&nbsp;&nbsp;&nbsp;}<br>}<br><br>$tom&nbsp;=&nbsp;new&nbsp;Employee("Tom",&nbsp;"Microsoft");<br>$tom&nbsp;-&gt;&nbsp;displayInfo();<br>?&gt;</code></pre>
     </div>
     <p class="paragraph">Aici, clasa Employee adaugă o nouă proprietate - $company, care stochează compania angajatului. De asemenea, clasa Employee suprascrie constructorul, în care sunt transmise datele pentru nume și companie. De asemenea, este suprascrisă metoda displayInfo. Prin urmare, pentru a crea un obiect al clasei Employee, trebuie să folosim constructorul suprascris în clasa Employee:</p>
     <div class="code-inline">
      <pre><code>$tom&nbsp;=&nbsp;new&nbsp;Employee("Tom",&nbsp;"Microsoft");</code></pre>
     </div>
     <p class="paragraph">Clasa derivată suprascrie constructorul clasei părinte, așa că pentru a crea un obiect al clasei derivate trebuie să folosim constructorul suprascris.</p>
     <p class="paragraph">De asemenea, se va modifica comportamentul metodei displayInfo, care, pe lângă nume, va afișa și compania angajatului:</p>
     <div class="code-inline">
      <pre><code>Nume:&nbsp;Tom<br>Lucrează&nbsp;la&nbsp;Microsoft</code></pre>
     </div>
     <h2 class="subtitle">Apelarea funcționalității clasei părinte</h2>
     <p class="paragraph">Dacă ne uităm la codul clasei derivate Employee, putem vedea părți ale codului care repetă codul clasei Person. De exemplu, setarea numelui în constructor:</p>
     <div class="code-inline">
      <pre><code>$this-&gt;name&nbsp;=&nbsp;$name;</code></pre>
     </div>
     <p class="paragraph">De asemenea, afișarea numelui angajatului în metoda displayInfo:</p>
     <div class="code-inline">
      <pre><code>echo&nbsp;"Nume:&nbsp;$this-&gt;name&lt;br&gt;";</code></pre>
     </div>
     <p class="paragraph">În ambele cazuri, este vorba de o linie de cod. Totuși, ce se întâmplă dacă constructorul Employee repetă setarea nu a unei singure proprietăți, ci a unei duzini de proprietăți?</p>
     <p class="paragraph">Și ce se întâmplă dacă metoda displayInfo din clasa derivată repetă mult mai multe acțiuni ale clasei părinte? În acest caz, este mult mai eficient să nu scriem codul repetitiv în clasa derivată, ci să apelăm funcționalitatea corespunzătoare a clasei părinte.</p>
     <p class="paragraph">Dacă trebuie să apelăm o metodă a clasei părinte, putem folosi cuvântul cheie parent, după care folosim operatorul de rezoluție a domeniului :: și apoi metoda apelată.</p>
     <p class="paragraph">De exemplu, să rescriem exemplul anterior:</p>
     <div class="code-inline">
      <pre><code>&lt;?php<br>class&nbsp;Person<br>{<br>&nbsp;&nbsp;&nbsp;public&nbsp;$name;<br>&nbsp;&nbsp;&nbsp;function&nbsp;__construct($name)<br>&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$this-&gt;name&nbsp;=&nbsp;$name;<br>&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;function&nbsp;displayInfo()<br>&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;"Nume:&nbsp;$this-&gt;name&lt;br&gt;";<br>&nbsp;&nbsp;&nbsp;}<br>}<br>class&nbsp;Employee&nbsp;extends&nbsp;Person&nbsp;<br>{<br>&nbsp;&nbsp;&nbsp;public&nbsp;$company;<br>&nbsp;&nbsp;&nbsp;function&nbsp;__construct($name,&nbsp;$company)<br>&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;parent::__construct($name);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$this-&gt;company&nbsp;=&nbsp;$company;<br>&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;function&nbsp;displayInfo()<br>&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;parent::displayInfo();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;"Lucrează&nbsp;la&nbsp;$this-&gt;company&lt;br&gt;";<br>&nbsp;&nbsp;&nbsp;}<br>}<br><br>$tom&nbsp;=&nbsp;new&nbsp;Employee("Tom",&nbsp;"Microsoft");<br>$tom&nbsp;-&gt;&nbsp;displayInfo();<br>?&gt;</code></pre>
     </div>
     <p class="paragraph">Acum, în constructorul Employee este apelat constructorul clasei de bază:</p>
     <div class="code-inline">
      <pre><code>parent::__construct($name);</code></pre>
     </div>
     <p class="paragraph">În el se face setarea numelui. Și în mod similar, în metoda displayInfo este apelată implementarea metodei clasei Person:</p>
     <div class="code-inline">
      <pre><code>parent::displayInfo();</code></pre>
     </div>
     <p class="paragraph">În final, vom obține același rezultat.</p>
     <p class="paragraph">Este de menționat că, în realitate, cuvântul cheie parent înlocuiește numele clasei. Adică, am putea apela funcționalitatea clasei părinte și prin numele acestei clase:</p>
     <div class="code-inline">
      <pre><code>class&nbsp;Employee&nbsp;extends&nbsp;Person&nbsp;<br>{<br>&nbsp;&nbsp;&nbsp;public&nbsp;$company;<br>&nbsp;&nbsp;&nbsp;function&nbsp;__construct($name,&nbsp;$company)<br>&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Person::__construct($name);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$this-&gt;company&nbsp;=&nbsp;$company;<br>&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;function&nbsp;displayInfo()<br>&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Person::displayInfo();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;"Lucrează&nbsp;la&nbsp;$this-&gt;company&lt;br&gt;";<br>&nbsp;&nbsp;&nbsp;}<br>}</code></pre>
     </div>
     <h2 class="subtitle">Operatorul instanceof</h2>
     <p class="paragraph">Operatorul instanceof permite verificarea apartenenței unui obiect la o anumită clasă. În stânga operatorului se află obiectul care trebuie verificat, iar în dreapta - numele clasei. Și dacă obiectul reprezintă clasa respectivă, operatorul returnează true. De exemplu:</p>
     <div class="code-inline">
      <pre><code>&lt;?php<br>class&nbsp;Person<br>{<br>&nbsp;&nbsp;&nbsp;public&nbsp;$name;<br>&nbsp;&nbsp;&nbsp;function&nbsp;__construct($name)<br>&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$this-&gt;name&nbsp;=&nbsp;$name;<br>&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;function&nbsp;displayInfo()<br>&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;"Nume:&nbsp;$this-&gt;name&lt;br&gt;";<br>&nbsp;&nbsp;&nbsp;}<br>}<br>class&nbsp;Employee&nbsp;extends&nbsp;Person&nbsp;<br>{<br>&nbsp;&nbsp;&nbsp;public&nbsp;$company;<br>&nbsp;&nbsp;&nbsp;function&nbsp;__construct($name,&nbsp;$company)<br>&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Person::__construct($name);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$this-&gt;company&nbsp;=&nbsp;$company;<br>&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;function&nbsp;displayInfo()<br>&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Person::displayInfo();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;"Lucrează&nbsp;la&nbsp;$this-&gt;company&lt;br&gt;";<br>&nbsp;&nbsp;&nbsp;}<br>}<br>class&nbsp;Manager{}<br><br>$tom&nbsp;=&nbsp;new&nbsp;Employee("Tom",&nbsp;"Microsoft");<br><br>$tom&nbsp;instanceof&nbsp;Employee;&nbsp;&nbsp;&nbsp;//&nbsp;true<br>$tom&nbsp;instanceof&nbsp;Person;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;true<br>$tom&nbsp;instanceof&nbsp;Manager;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;false</code></pre>
     </div>
     <p class="paragraph">Aici, variabila $tom reprezintă clasa Employee, de aceea $tom instanceof Employee returnează true.</p>
     <p class="paragraph">Deoarece clasa Employee este moștenită de la Person, variabila $tom reprezintă, de asemenea, clasa Person (angajatul este și el o persoană).</p>
     <p class="paragraph">Totuși, variabila $tom nu reprezintă clasa Manager, de aceea expresia $tom instanceof Manager returnează false.</p>
     <h2 class="subtitle">Interzicerea moștenirii și operatorul final</h2>
     <p class="paragraph">În exemplul de mai sus, metoda displayInfo era suprascrisă de clasa derivată. Totuși, uneori este necesar să interzicem suprascrierea metodelor. Pentru aceasta, în clasa părinte, trebuie să specificăm metodele cu modificatorul final:</p>
     <div class="code-inline">
      <pre><code>&lt;?php<br>class&nbsp;Person<br>{<br>&nbsp;&nbsp;&nbsp;public&nbsp;$name;<br>&nbsp;&nbsp;&nbsp;function&nbsp;__construct($name)<br>&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$this-&gt;name&nbsp;=&nbsp;$name;<br>&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;final&nbsp;function&nbsp;displayInfo()<br>&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;"Nume:&nbsp;$this-&gt;name&lt;br&gt;";<br>&nbsp;&nbsp;&nbsp;}<br>}<br>class&nbsp;Employee&nbsp;extends&nbsp;Person&nbsp;<br>{<br>&nbsp;&nbsp;&nbsp;public&nbsp;$company;<br>&nbsp;&nbsp;&nbsp;function&nbsp;__construct($name,&nbsp;$company)<br>&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Person::__construct($name);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$this-&gt;company&nbsp;=&nbsp;$company;<br>&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;function&nbsp;displayEmployeeInfo()<br>&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Person::displayInfo();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;"Lucrează&nbsp;la&nbsp;$this-&gt;company&lt;br&gt;";<br>&nbsp;&nbsp;&nbsp;}<br>}<br><br>$tom&nbsp;=&nbsp;new&nbsp;Employee("Tom",&nbsp;"Microsoft");<br>$tom&nbsp;-&gt;&nbsp;displayEmployeeInfo();<br>?&gt;</code></pre>
     </div>
     <p class="paragraph">În acest caz, în toate clasele derivate din clasa Person nu vom putea defini o metodă cu același nume. De aceea, în acest caz, în clasa Employee este definită o nouă metodă - displayEmployeeInfo.</p>
     <p class="paragraph">De asemenea, putem interzice moștenirea completă de la o clasă. Pentru aceasta, clasa respectivă trebuie definită cu modificatorul final:</p>
     <div class="code-inline">
      <pre><code>final&nbsp;class&nbsp;Person<br>{<br>&nbsp;&nbsp;&nbsp;public&nbsp;$name;<br>&nbsp;&nbsp;&nbsp;function&nbsp;__construct($name)<br>&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$this-&gt;name&nbsp;=&nbsp;$name;<br>&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;final&nbsp;function&nbsp;displayInfo()<br>&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;"Nume:&nbsp;$this-&gt;name&lt;br&gt;";<br>&nbsp;&nbsp;&nbsp;}<br>}</code></pre>
     </div>
     <p class="paragraph">Acum nu vom putea moșteni clasa Employee (și nicio altă clasă) de la clasa Person.</p>
    </div>
   </main>
   <aside class="ad-section">
    <div class="ad-box">
     <p>Google Ad Here</p>
    </div>
    <div class="ad-box">
     <p>Promo: SQL Beginner Guide</p>
    </div>
   </aside>
  </div>
  <div class="lesson-navigation">
   <th:block th:if="${previousLesson != null}">
    <a th:href="@{'/lessons/' +
            ${#strings.toLowerCase(#strings.replace(previousLesson.chapter.topic.name, ' ', '-'))} + '/' +
            ${#strings.toLowerCase(#strings.replace(previousLesson.chapter.title, ' ', '-'))} + '/' +
            ${#strings.toLowerCase(#strings.replace(previousLesson.title, ' ', '-'))} }" class="nav-button">← Lecția anterioară</a>
   </th:block> <th:block th:if="${nextLesson != null}">
    <a th:href="@{'/lessons/' +
            ${#strings.toLowerCase(#strings.replace(nextLesson.chapter.topic.name, ' ', '-'))} + '/' +
            ${#strings.toLowerCase(#strings.replace(nextLesson.chapter.title, ' ', '-'))} + '/' +
            ${#strings.toLowerCase(#strings.replace(nextLesson.title, ' ', '-'))} }" class="nav-button">Lecția următoare →</a>
   </th:block>
  </div>
  <div th:replace="~{fragments/footer :: footer}"></div>
  <script th:src="@{/js/script.js}" defer></script>
 </body>
</html>
