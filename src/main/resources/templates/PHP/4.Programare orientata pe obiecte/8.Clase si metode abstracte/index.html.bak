<!doctype html>
<html lang="ro" xmlns:th="http://www.w3.org/1999/xhtml">
 <head>
    <link rel="icon" type="image/png" href="/nume-aplicatie/images/favicon.png">
    <script async src="https://www.googletagmanager.com/gtag/js?id=G-7Q2536ZKL2"></script>
    <script>
      window.dataLayer = window.dataLayer || [];
      window.gtag = function () { dataLayer.push(arguments); };
      gtag('consent', 'default', {
        'wait_for_update': 500,
        'region': ['RO'],
        'ad_storage': 'denied',
        'analytics_storage': 'denied',
        'ad_user_data': 'denied',
        'ad_personalization': 'denied'
      });
      gtag('js', new Date());
      gtag('config', 'G-7Q2536ZKL2');
    </script>


  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title th:text="${lesson.title}">Lesson</title>
  <link rel="stylesheet" th:href="@{/css/styles.css}">
  <style>body { background: #ffffff; }</style>
 </head>
 <body th:with="activeTopic='PHP', activeChapter='4.Programare orientata pe obiecte', activeLesson='8.Clase si metode abstracte'">
  <button class="mobile-sidebar-toggle" onclick="toggleMobileSidebar()">☰</button>
  <div th:replace="~{fragments/nav :: nav}"></div>
  <div class="top-nav">
   <th:block th:each="topic : ${topics}">
    <a th:href="@{'/lectii/topic/' + ${topic.id}}" th:text="${topic.name}" th:classappend="${topic.id} == ${activeTopicId} ? 'active' : ''"> </a>
   </th:block>
  </div>
  <div class="layout">
   <div class="mobile-sidebar" id="mobileSidebar">
    <button class="close-btn" onclick="toggleSidebar()">✖</button>
    <ul class="chapter-list">
     <th:block th:each="chapter : ${chapters}">
      <li class="chapter-item" th:classappend="${chapter.id} == ${activeChapterId} ? 'open' : ''">
       <div class="chapter-title" onclick="toggleChapter(this)">
        <strong th:text="${chapter.title}"></strong> <span class="arrow">▼</span>
       </div>
       <ul class="lesson-list">
        <th:block th:each="lesson : ${chapter.lessons}">
         <li><a th:href="@{'/lessons/' +
    ${#strings.toLowerCase(#strings.replace(chapter.topic.name, ' ', '-'))} + '/' +
    ${#strings.toLowerCase(#strings.replace(chapter.title, ' ', '-'))} + '/' +
    ${#strings.toLowerCase(#strings.replace(lesson.title, ' ', '-'))} }" th:text="${lesson.title}" th:classappend="${lesson.id} == ${activeLessonId} ? 'active' : ''"> </a></li>
        </th:block>
       </ul></li>
     </th:block>
    </ul>
   </div>
   <aside class="sidebar">
    <ul class="sidebar-list">
     <th:block th:each="chapter : ${chapters}">
      <li class="chapter-item" th:classappend="${chapter.id} == ${activeChapterId} ? 'open' : ''">
       <div class="chapter-toggle" onclick="toggleLessons(this)">
        <span th:text="${chapter.title}">Chapter</span>
       </div>
       <ul class="lesson-list hidden">
        <th:block th:each="lesson : ${chapter.lessons}">
         <li><a th:href="@{'/lessons/' +
    ${#strings.toLowerCase(#strings.replace(chapter.topic.name, ' ', '-'))} + '/' +
    ${#strings.toLowerCase(#strings.replace(chapter.title, ' ', '-'))} + '/' +
    ${#strings.toLowerCase(#strings.replace(lesson.title, ' ', '-'))} }" th:text="${lesson.title}" th:classappend="${lesson.id} == ${activeLessonId} ? 'active' : ''"> </a></li>
        </th:block>
       </ul></li>
     </th:block>
    </ul>
   </aside>
   <main class="content">
    <div class="document-container">
     <h1 class="main-title">Clase și metode abstracte</h1>
     <p class="paragraph">O clasă abstractă reprezintă o implementare parțială pentru clasele derivate.</p>
     <p class="paragraph">O clasă abstractă este definită cu ajutorul modificatorului abstract, care se plasează înaintea numelui clasei:</p>
     <div class="code-inline">
      <pre><code>abstract&nbsp;class&nbsp;Messenger&nbsp;{&nbsp;}</code></pre>
     </div>
     <p class="paragraph">Una dintre caracteristicile cheie ale claselor abstracte este că nu putem crea direct obiecte ale unei clase abstracte prin apelarea constructorului său:</p>
     <div class="code-inline">
      <pre><code>abstract&nbsp;class&nbsp;Messenger&nbsp;{&nbsp;}<br>$telegram&nbsp;=&nbsp;new&nbsp;Messenger();&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;această&nbsp;linie&nbsp;nu&nbsp;va&nbsp;funcționa</code></pre>
     </div>
     <p class="paragraph">Clasele abstracte, la fel ca și clasele obișnuite, pot defini variabile și constante, metode și constructori.</p>
     <p class="paragraph">O altă caracteristică a claselor abstracte este că ele pot conține metode abstracte. Acestea sunt metode care nu au implementare. Implementarea pentru ele este oferită de clasele derivate. De exemplu:</p>
     <div class="code-inline">
      <pre><code>abstract&nbsp;class&nbsp;Messenger<br>{<br>&nbsp;&nbsp;&nbsp;abstract&nbsp;function&nbsp;send($message);&nbsp;&nbsp;&nbsp;//&nbsp;metodă&nbsp;abstractă<br>}</code></pre>
     </div>
     <p class="paragraph">La definirea unei metode abstracte, înainte de cuvântul function se pune modificatorul abstract. Iar după lista de parametri ai metodei se pune punct și virgulă.</p>
     <p class="paragraph">Metodele abstracte pot fi plasate doar în clase abstracte. O clasă obișnuită (neabstractă) nu poate avea metode abstracte.</p>
     <p class="paragraph">Dacă o clasă neabstractă moștenește de la o clasă abstractă, ea este obligată să implementeze toate metodele abstracte ale acesteia.</p>
     <p class="paragraph">Pentru a moșteni o clasă abstractă, la fel ca în cazul general al moștenirii, se folosește cuvântul cheie extends. De exemplu:</p>
     <div class="code-inline">
      <pre><code>&lt;?php<br>abstract&nbsp;class&nbsp;Messenger<br>{<br>&nbsp;&nbsp;&nbsp;protected&nbsp;$name;<br>&nbsp;&nbsp;&nbsp;function&nbsp;__construct($name)<br>&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$this-&gt;name&nbsp;=&nbsp;$name;<br>&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;abstract&nbsp;function&nbsp;send($message);<br>&nbsp;&nbsp;&nbsp;function&nbsp;close()<br>&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;"Ieșire&nbsp;din&nbsp;messenger...";<br>&nbsp;&nbsp;&nbsp;}<br>}<br><br>class&nbsp;EmailMessenger&nbsp;extends&nbsp;Messenger&nbsp;<br>{<br>&nbsp;&nbsp;&nbsp;function&nbsp;send($message)<br>&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;"$this-&gt;name&nbsp;trimite&nbsp;mesajul:&nbsp;$message&lt;br&gt;";<br>&nbsp;&nbsp;&nbsp;}<br>}<br>$outlook&nbsp;=&nbsp;new&nbsp;EmailMessenger("Outlook");<br>$outlook-&gt;send("Hello&nbsp;PHP&nbsp;8");<br>$outlook-&gt;close();<br>?&gt;</code></pre>
     </div>
     <p class="paragraph">În acest caz, clasa EmailMessenger moștenește de la clasa abstractă Messenger.</p>
     <p class="paragraph">Clasa abstractă definește metoda abstractă send(), astfel încât clasa derivată EmailMessenger trebuie să ofere o implementare pentru această metodă.</p>
     <p class="paragraph">Astfel, în acest caz, vom obține următorul rezultat:</p>
     <div class="code-inline">
      <pre><code>Outlook&nbsp;trimite&nbsp;mesajul:&nbsp;Hello&nbsp;PHP&nbsp;8<br>Ieșire&nbsp;din&nbsp;messenger...</code></pre>
     </div>
     <p class="paragraph">Putem observa că clasele abstracte sunt similare cu interfețele - ambele pot defini metode fără implementare, care sunt implementate în alte clase. Totuși, clasele abstracte, la fel ca și clasele obișnuite, pot avea variabile, metode neabstracte, constructori cu implementare, pe când interfețele nu pot.</p>
     <p class="paragraph">În plus, în PHP, o clasă poate moșteni doar de la o singură clasă, în timp ce o clasă poate implementa mai multe interfețe simultan.</p>
    </div>
   </main>
   <aside class="ad-section">
    <div class="ad-box">
     <p>Google Ad Here</p>
    </div>
    <div class="ad-box">
     <p>Promo: SQL Beginner Guide</p>
    </div>
   </aside>
  </div>
  <div class="lesson-navigation">
   <th:block th:if="${previousLesson != null}">
    <a th:href="@{'/lessons/' +
            ${#strings.toLowerCase(#strings.replace(previousLesson.chapter.topic.name, ' ', '-'))} + '/' +
            ${#strings.toLowerCase(#strings.replace(previousLesson.chapter.title, ' ', '-'))} + '/' +
            ${#strings.toLowerCase(#strings.replace(previousLesson.title, ' ', '-'))} }" class="nav-button">← Lecția anterioară</a>
   </th:block> <th:block th:if="${nextLesson != null}">
    <a th:href="@{'/lessons/' +
            ${#strings.toLowerCase(#strings.replace(nextLesson.chapter.topic.name, ' ', '-'))} + '/' +
            ${#strings.toLowerCase(#strings.replace(nextLesson.chapter.title, ' ', '-'))} + '/' +
            ${#strings.toLowerCase(#strings.replace(nextLesson.title, ' ', '-'))} }" class="nav-button">Lecția următoare →</a>
   </th:block>
  </div>
  <div th:replace="~{fragments/footer :: footer}"></div>
  <script th:src="@{/js/script.js}" defer></script>
 </body>
</html>
