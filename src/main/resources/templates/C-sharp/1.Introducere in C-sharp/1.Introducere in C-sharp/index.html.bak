<!doctype html>
<html lang="ro" xmlns:th="http://www.w3.org/1999/xhtml">
 <head>
    <link rel="icon" type="image/png" href="/nume-aplicatie/images/favicon.png">
    <script async src="https://www.googletagmanager.com/gtag/js?id=G-7Q2536ZKL2"></script>
    <script>
      window.dataLayer = window.dataLayer || [];
      window.gtag = function () { dataLayer.push(arguments); };
      gtag('consent', 'default', {
        'wait_for_update': 500,
        'region': ['RO'],
        'ad_storage': 'denied',
        'analytics_storage': 'denied',
        'ad_user_data': 'denied',
        'ad_personalization': 'denied'
      });
      gtag('js', new Date());
      gtag('config', 'G-7Q2536ZKL2');
    </script>


  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title th:text="${lesson.title}">Lesson</title>
  <link rel="stylesheet" th:href="@{/css/styles.css}">
  <style>
        body {
            background: #ffffff;
        }
    </style>
 </head>
 <body th:with="activeTopic='C-sharp', activeChapter='1.Introducere in C-sharp', activeLesson='1.Introducere in C-sharp'">
  <button class="mobile-sidebar-toggle" onclick="toggleMobileSidebar()">☰</button>
  <div th:replace="~{fragments/nav :: nav}"></div>
  <div class="top-nav">
   <th:block th:each="topic : ${topics}">
    <a th:href="@{'/lectii/topic/' + ${topic.id}}" th:text="${topic.name}" th:classappend="${topic.id} == ${activeTopicId} ? 'active' : ''"> </a>
   </th:block>
  </div>
  <div class="layout">
   <div class="mobile-sidebar" id="mobileSidebar">
    <button class="close-btn" onclick="toggleSidebar()">✖</button>
    <ul class="chapter-list">
     <th:block th:each="chapter : ${chapters}">
      <li class="chapter-item" th:classappend="${chapter.id} == ${activeChapterId} ? 'open' : ''">
       <div class="chapter-title" onclick="toggleChapter(this)">
        <strong th:text="${chapter.title}"></strong> <span class="arrow">▼</span>
       </div>
       <ul class="lesson-list">
        <th:block th:each="lesson : ${chapter.lessons}">
         <li><a th:href="@{'/lessons/' +
    ${#strings.toLowerCase(#strings.replace(chapter.topic.name, ' ', '-'))} + '/' +
    ${#strings.toLowerCase(#strings.replace(chapter.title, ' ', '-'))} + '/' +
    ${#strings.toLowerCase(#strings.replace(lesson.title, ' ', '-'))} }" th:text="${lesson.title}" th:classappend="${lesson.id} == ${activeLessonId} ? 'active' : ''"> </a></li>
        </th:block>
       </ul></li>
     </th:block>
    </ul>
   </div>
   <aside class="sidebar">
    <ul class="sidebar-list">
     <th:block th:each="chapter : ${chapters}">
      <li class="chapter-item" th:classappend="${chapter.id} == ${activeChapterId} ? 'open' : ''">
       <div class="chapter-toggle" onclick="toggleLessons(this)">
        <span th:text="${chapter.title}">Chapter</span>
       </div>
       <ul class="lesson-list hidden">
        <th:block th:each="lesson : ${chapter.lessons}">
         <li><a th:href="@{'/lessons/' +
    ${#strings.toLowerCase(#strings.replace(chapter.topic.name, ' ', '-'))} + '/' +
    ${#strings.toLowerCase(#strings.replace(chapter.title, ' ', '-'))} + '/' +
    ${#strings.toLowerCase(#strings.replace(lesson.title, ' ', '-'))} }" th:text="${lesson.title}" th:classappend="${lesson.id} == ${activeLessonId} ? 'active' : ''"> </a></li>
        </th:block>
       </ul></li>
     </th:block>
    </ul>
   </aside>
   <main class="content">
    <div class="document-container">
     <h1 class="main-title">Introducere în C#</h1>
     <h2 class="subtitle">Limbajul C# și platforma .NET</h2>
     <p class="paragraph">În momentul de față, limbajul de programare C# este unul dintre cele mai puternice, în dezvoltare rapidă și foarte solicitate limbaje din industria IT.</p>
     <p class="paragraph">În prezent, se scriu diverse aplicații pe el: de la programe desktop mici până la portaluri web și servicii web mari, care deservesc zilnic milioane de utilizatori.</p>
     <p class="paragraph">C# nu mai este un limbaj tânăr și, la fel ca întreaga platformă .NET, a parcurs un drum lung. Prima versiune a limbajului a fost lansată odată cu Microsoft Visual Studio .NET în februarie 2002. Versiunea curentă a limbajului este C# 12, lansată pe 14 noiembrie 2023, împreună cu .NET 8.</p>
     <p class="paragraph">C# este un limbaj cu sintaxă asemănătoare cu C și este similar din acest punct de vedere cu C++ și Java. Prin urmare, dacă sunteți familiarizați cu unul dintre aceste limbaje, va fi mai ușor să învățați C#.</p>
     <p class="paragraph">C# este orientat pe obiecte și în acest sens a preluat multe de la Java și C++. De exemplu, C# suportă polimorfismul, moștenirea, supraîncărcarea operatorilor, tipizarea statică. Abordarea orientată pe obiecte permite rezolvarea problemelor legate de construirea aplicațiilor mari, dar în același timp flexibile, scalabile și extensibile. Și C# continuă să se dezvolte activ, și cu fiecare versiune nouă apar tot mai multe funcționalități interesante.</p>
     <h2 class="subtitle">Rolul platformei .NET</h2>
     <p class="paragraph">Când se vorbește despre C#, se fac adesea referiri la tehnologiile platformei .NET (Windows Forms, WPF, ASP.NET, .NET MAUI). Și, invers, când se vorbește despre .NET, adesea se face referire la C#. Cu toate acestea, deși aceste concepte sunt legate, este incorect să le identificăm. Limbajul C# a fost creat special pentru a lucra cu framework-ul .NET, însă conceptul de .NET este ceva mai larg.</p>
     <p class="paragraph">Bill Gates a spus odată că platforma .NET este cel mai bun lucru creat de Microsoft. Poate că avea dreptate. Framework-ul .NET reprezintă o platformă puternică pentru crearea aplicațiilor. Se pot evidenția următoarele caracteristici principale:</p>
     <h2 class="subtitle">Suport pentru mai multe limbaje</h2>
     <p class="paragraph">Baza platformei este mediul de execuție comun Common Language Runtime (CLR), datorită căruia .NET suportă mai multe limbaje: pe lângă C# sunt și VB.NET, C++, F#, precum și diverse dialecte ale altor limbaje, legate de .NET, de exemplu, Delphi.NET. La compilare, codul în oricare dintre aceste limbaje este compilat într-un ansamblu pe limbajul comun CIL (Common Intermediate Language) - un fel de limbaj de asamblare al platformei .NET. Prin urmare, în anumite condiții, putem crea module separate ale unei aplicații în limbaje separate.</p>
     <h2 class="subtitle">Cross-platform</h2>
     <p class="paragraph">.NET este o platformă portabilă (cu anumite limitări). De exemplu, ultima versiune a platformei la acest moment - .NET 8 este suportată pe majoritatea sistemelor de operare moderne Windows, MacOS, Linux. Folosind diverse tehnologii pe platforma .NET, putem dezvolta aplicații în limbajul C# pentru diverse platforme - Windows, MacOS, Linux, Android, iOS, Tizen.</p>
     <h2 class="subtitle">Bibliotecă de clase puternică</h2>
     <p class="paragraph">.NET prezintă o bibliotecă de clase unică pentru toate limbajele suportate. Indiferent de ce aplicație intenționăm să scriem în C# - un editor de text, un chat sau un site web complex - vom utiliza biblioteca de clase .NET.</p>
     <h2 class="subtitle">Diversitate de tehnologii</h2>
     <p class="paragraph">Mediul comun de execuție CLR și biblioteca de clase de bază constituie fundamentul pentru un întreg set de tehnologii pe care dezvoltatorii le pot folosi pentru a construi diverse aplicații. De exemplu, pentru lucrul cu bazele de date în acest set de tehnologii este destinată tehnologia ADO.NET și Entity Framework Core.</p>
     <p class="paragraph">Pentru crearea aplicațiilor grafice cu interfață bogată - tehnologia WPF și WinUI, pentru crearea aplicațiilor grafice mai simple - Windows Forms. Pentru dezvoltarea aplicațiilor mobile și desktop cross-platform - Xamarin/MAUI. Pentru crearea site-urilor și aplicațiilor web - ASP.NET etc.</p>
     <p class="paragraph">La acestea se adaugă Blazor, un framework care funcționează pe .NET și care permite crearea de aplicații web atât pe partea de server, cât și pe partea de client. Iar în viitor va suporta crearea de aplicații mobile și, probabil, aplicații desktop.</p>
     <h2 class="subtitle">Performanță</h2>
     <p class="paragraph">Conform unui număr de teste, aplicațiile web pe .NET în anumite categorii depășesc semnificativ aplicațiile web construite cu alte tehnologii. Aplicațiile pe .NET, în principiu, se disting prin performanță ridicată.</p>
     <p class="paragraph">De asemenea, trebuie menționată caracteristica limbajului C# și framework-ului .NET, cum ar fi colectarea automată a gunoiului. Asta înseamnă că, în majoritatea cazurilor, nu va trebui să ne preocupăm de eliberarea memoriei, spre deosebire de C++. Mediul comun de execuție CLR va apela colectorul de gunoi și va elibera memoria.</p>
     <h2 class="subtitle">.NET Framework și .NET 8</h2>
     <p class="paragraph">Este de remarcat faptul că .NET s-a dezvoltat mult timp predominant ca platformă pentru Windows sub denumirea .NET Framework. În 2019 a fost lansată ultima versiune a acestei platforme - .NET Framework 4.8. Nu mai este dezvoltată.</p>
     <p class="paragraph">Din 2014, Microsoft a început să dezvolte o platformă alternativă - .NET Core, destinată deja pentru diverse platforme și care trebuia să încorporeze toate funcționalitățile .NET Framework și să adauge funcționalități noi. Ulterior, Microsoft a lansat succesiv mai multe versiuni ale acestei platforme: .NET Core 1, .NET Core 2, .NET Core 3, .NET 5.</p>
     <p class="paragraph">Iar versiunea curentă (2025) este .NET 8. De aceea, trebuie să facem distincție între .NET Framework, destinat în principal pentru Windows, și .NET 8, cross-platform. În acest ghid vom vorbi despre C# 12 în combinație cu .NET 8, deoarece aceasta este platforma actuală.</p>
     <h2 class="subtitle">Cod gestionat și neadministrat</h2>
     <p class="paragraph">Adesea, aplicațiile create în C# sunt numite cod gestionat (managed code). Ce înseamnă asta? Înseamnă că aplicația respectivă este creată pe baza platformei .NET și este gestionată de mediul comun de execuție CLR, care încarcă aplicația și, dacă este necesar, curăță memoria.</p>
     <p class="paragraph">Dar există și aplicații, de exemplu, create în C++, care sunt compilate nu în limbajul comun CIL, ca C#, VB.NET sau F#, ci în cod mașină obișnuit. În acest caz, .NET nu gestionează aplicația.</p>
     <p class="paragraph">Totuși, platforma .NET oferă posibilități de interacțiune cu codul neadministrat.</p>
     <h2 class="subtitle">JIT-compilare</h2>
     <p class="paragraph">Așa cum s-a menționat mai sus, codul în C# este compilat în aplicații sau ansambluri cu extensiile exe sau dll în limbajul CIL. Apoi, la rularea unei astfel de aplicații, se efectuează JIT-compilarea (Just-In-Time) în cod mașină, care apoi este executat.</p>
     <p class="paragraph">În acest caz, deoarece aplicația noastră poate fi mare și poate conține o mulțime de instrucțiuni, în momentul actual se va compila doar acea parte a aplicației la care se face referire directă. Dacă ne referim la o altă parte a codului, aceasta va fi compilată din CIL în cod mașină.</p>
     <p class="paragraph">În același timp, partea deja compilată a aplicației este păstrată până la finalizarea programului. În final, aceasta crește performanța.</p>
     <p class="paragraph">În esență, acestea sunt lucrurile pe care trebuie să le cunoașteți pe scurt despre platforma .NET și limbajul C#. Acum să creăm prima aplicație.</p>
    </div>
   </main>
   <aside class="ad-section">
    <div class="ad-box">
     <p>Google Ad Here</p>
    </div>
    <div class="ad-box">
     <p>Promo: SQL Beginner Guide</p>
    </div>
   </aside>
  </div>
  <div class="lesson-navigation">
   <th:block th:if="${previousLesson != null}">
    <a th:href="@{'/lessons/' +
            ${#strings.toLowerCase(#strings.replace(previousLesson.chapter.topic.name, ' ', '-'))} + '/' +
            ${#strings.toLowerCase(#strings.replace(previousLesson.chapter.title, ' ', '-'))} + '/' +
            ${#strings.toLowerCase(#strings.replace(previousLesson.title, ' ', '-'))} }" class="nav-button">← Lecția anterioară</a>
   </th:block> <th:block th:if="${nextLesson != null}">
    <a th:href="@{'/lessons/' +
            ${#strings.toLowerCase(#strings.replace(nextLesson.chapter.topic.name, ' ', '-'))} + '/' +
            ${#strings.toLowerCase(#strings.replace(nextLesson.chapter.title, ' ', '-'))} + '/' +
            ${#strings.toLowerCase(#strings.replace(nextLesson.title, ' ', '-'))} }" class="nav-button">Lecția următoare →</a>
   </th:block>
  </div>
  <div th:replace="~{fragments/footer :: footer}"></div>
  <script th:src="@{/js/script.js}" defer></script>
 </body>
</html>
