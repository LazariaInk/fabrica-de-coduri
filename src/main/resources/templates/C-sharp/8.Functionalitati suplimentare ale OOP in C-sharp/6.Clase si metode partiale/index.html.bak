<!doctype html>
<html lang="ro" xmlns:th="http://www.w3.org/1999/xhtml">
 <head>
    <link rel="icon" type="image/png" href="/nume-aplicatie/images/favicon.png">
    <script async src="https://www.googletagmanager.com/gtag/js?id=G-7Q2536ZKL2"></script>
    <script>
      window.dataLayer = window.dataLayer || [];
      window.gtag = function () { dataLayer.push(arguments); };
      gtag('consent', 'default', {
        'wait_for_update': 500,
        'region': ['RO'],
        'ad_storage': 'denied',
        'analytics_storage': 'denied',
        'ad_user_data': 'denied',
        'ad_personalization': 'denied'
      });
      gtag('js', new Date());
      gtag('config', 'G-7Q2536ZKL2');
    </script>


  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title th:text="${lesson.title}">Lesson</title>
  <link rel="stylesheet" th:href="@{/css/styles.css}">
  <style>
        body {
            background: #ffffff;
        }
    </style>
 </head>
 <body th:with="activeTopic='C-sharp', activeChapter='8.Functionalitati suplimentare ale OOP in C-sharp', activeLesson='6.Clase si metode partiale'">
  <button class="mobile-sidebar-toggle" onclick="toggleMobileSidebar()">☰</button>
  <div th:replace="~{fragments/nav :: nav}"></div>
  <div class="top-nav">
   <th:block th:each="topic : ${topics}">
    <a th:href="@{'/lectii/topic/' + ${topic.id}}" th:text="${topic.name}" th:classappend="${topic.id} == ${activeTopicId} ? 'active' : ''"> </a>
   </th:block>
  </div>
  <div class="layout">
   <div class="mobile-sidebar" id="mobileSidebar">
    <button class="close-btn" onclick="toggleSidebar()">✖</button>
    <ul class="chapter-list">
     <th:block th:each="chapter : ${chapters}">
      <li class="chapter-item" th:classappend="${chapter.id} == ${activeChapterId} ? 'open' : ''">
       <div class="chapter-title" onclick="toggleChapter(this)">
        <strong th:text="${chapter.title}"></strong> <span class="arrow">▼</span>
       </div>
       <ul class="lesson-list">
        <th:block th:each="lesson : ${chapter.lessons}">
         <li><a th:href="@{'/lessons/' +
    ${#strings.toLowerCase(#strings.replace(chapter.topic.name, ' ', '-'))} + '/' +
    ${#strings.toLowerCase(#strings.replace(chapter.title, ' ', '-'))} + '/' +
    ${#strings.toLowerCase(#strings.replace(lesson.title, ' ', '-'))} }" th:text="${lesson.title}" th:classappend="${lesson.id} == ${activeLessonId} ? 'active' : ''"> </a></li>
        </th:block>
       </ul></li>
     </th:block>
    </ul>
   </div>
   <aside class="sidebar">
    <ul class="sidebar-list">
     <th:block th:each="chapter : ${chapters}">
      <li class="chapter-item" th:classappend="${chapter.id} == ${activeChapterId} ? 'open' : ''">
       <div class="chapter-toggle" onclick="toggleLessons(this)">
        <span th:text="${chapter.title}">Chapter</span>
       </div>
       <ul class="lesson-list hidden">
        <th:block th:each="lesson : ${chapter.lessons}">
         <li><a th:href="@{'/lessons/' +
    ${#strings.toLowerCase(#strings.replace(chapter.topic.name, ' ', '-'))} + '/' +
    ${#strings.toLowerCase(#strings.replace(chapter.title, ' ', '-'))} + '/' +
    ${#strings.toLowerCase(#strings.replace(lesson.title, ' ', '-'))} }" th:text="${lesson.title}" th:classappend="${lesson.id} == ${activeLessonId} ? 'active' : ''"> </a></li>
        </th:block>
       </ul></li>
     </th:block>
    </ul>
   </aside>
   <main class="content">
    <div class="document-container">
     <h1 class="main-title">Clase și metode parțiale</h1>
     <p class="paragraph">Clasele pot fi parțiale. Adică putem avea mai multe fișiere cu definiția aceleiași clase, iar la compilare toate aceste definiții vor fi compilate într-una singură.</p>
     <p class="paragraph">De exemplu, vom defini în proiect două fișiere cu cod. Nu este atât de important cum vor fi numite aceste fișiere. De exemplu, PersonBase.cs și PersonAdditional.cs. Într-unul dintre aceste fișiere (nu contează în care anume) vom defini următoarea clasă:</p>
     <div class="code-inline">
      <pre><code>public&nbsp;partial&nbsp;class&nbsp;Person<br>{<br>&nbsp;&nbsp;&nbsp;public&nbsp;void&nbsp;Move()<br>&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Console.WriteLine("I&nbsp;am&nbsp;moving");<br>&nbsp;&nbsp;&nbsp;}<br>}</code></pre>
     </div>
     <p class="paragraph">Iar în celălalt fișier vom defini următoarea clasă:</p>
     <div class="code-inline">
      <pre><code>public&nbsp;partial&nbsp;class&nbsp;Person<br>{<br>&nbsp;&nbsp;&nbsp;public&nbsp;void&nbsp;Eat()<br>&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Console.WriteLine("I&nbsp;am&nbsp;eating");<br>&nbsp;&nbsp;&nbsp;}<br>}</code></pre>
     </div>
     <p class="paragraph">Astfel, două fișiere din proiect conțin definiția aceleași clase Person, care conțin două metode diferite. Și ambele clase definite aici sunt parțiale. Pentru aceasta, ele sunt definite cu cuvântul cheie partial.</p>
     <div class="image-container">
      <img th:src="@{/images/C-sharp/8.Functionalitati%20suplimentare%20ale%20OOP%20in%20C-sharp/6.Clase%20si%20metode%20partiale/images/image1.png}" alt="" class="responsive-image">
     </div>
     <p class="paragraph">Apoi putem folosi toate metodele clasei Person:</p>
     <div class="code-inline">
      <pre><code>class&nbsp;Program<br>{<br>&nbsp;&nbsp;&nbsp;static&nbsp;void&nbsp;Main(string[]&nbsp;args)<br>&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Person&nbsp;tom&nbsp;=&nbsp;new&nbsp;Person();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tom.Move();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tom.Eat();<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Console.ReadKey();<br>&nbsp;&nbsp;&nbsp;}<br>}</code></pre>
     </div>
     <h2 class="subtitle">Metode parțiale</h2>
     <p class="paragraph">Clasele parțiale pot conține metode parțiale. Astfel de metode sunt, de asemenea, definite cu cuvântul cheie partial. De fapt, definiția metodei parțiale fără corpul metodei se află într-o clasă parțială, iar implementarea acestei metode se află în altă clasă parțială.</p>
     <p class="paragraph">De exemplu, să modificăm clasele Person definite mai sus. Prima clasă:</p>
     <div class="code-inline">
      <pre><code>public&nbsp;partial&nbsp;class&nbsp;Person<br>{<br>&nbsp;&nbsp;&nbsp;partial&nbsp;void&nbsp;Read();<br>&nbsp;&nbsp;&nbsp;public&nbsp;void&nbsp;DoSomething()<br>&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Read();<br>&nbsp;&nbsp;&nbsp;}<br>}</code></pre>
     </div>
     <p class="paragraph">A doua clasă:</p>
     <div class="code-inline">
      <pre><code>public&nbsp;partial&nbsp;class&nbsp;Person<br>{<br>&nbsp;&nbsp;&nbsp;partial&nbsp;void&nbsp;Read()<br>&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Console.WriteLine("I&nbsp;am&nbsp;reading&nbsp;a&nbsp;book");<br>&nbsp;&nbsp;&nbsp;}<br>}</code></pre>
     </div>
     <p class="paragraph">În prima clasă este definită metoda Read(). De fapt, în momentul definirii primei clase nu este cunoscut ce reprezintă această metodă, ce acțiuni va îndeplini. Cu toate acestea, știm lista parametrilor săi și o putem apela în prima clasă.</p>
     <p class="paragraph">A doua clasă definește direct corpul metodei Read().</p>
     <div class="code-inline">
      <pre><code>class&nbsp;Program<br>{<br>&nbsp;&nbsp;&nbsp;static&nbsp;void&nbsp;Main(string[]&nbsp;args)<br>&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Person&nbsp;tom&nbsp;=&nbsp;new&nbsp;Person();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tom.DoSomething();<br>&nbsp;&nbsp;&nbsp;}<br>}</code></pre>
     </div>
     <p class="paragraph">Este de remarcat faptul că, în mod implicit, metodelor parțiale li se aplică o serie de restricții:</p>
     <ul class="enumeration">
      <li>ele nu pot avea modificatori de acces</li>
      <li>ele au tipul void</li>
      <li>ele nu pot avea parametri de tip out</li>
      <li>ele nu pot avea modificatorii virtual, override, sealed, new sau extern</li>
     </ul>
     <p class="paragraph">Dacă nu respectă vreuna dintre aceste restricții, trebuie să li se ofere o implementare. De exemplu, în următorul exemplu, metodele parțiale aplică modificatorul public:</p>
     <div class="code-inline">
      <pre><code>//&nbsp;prima&nbsp;implementare&nbsp;a&nbsp;clasei&nbsp;și&nbsp;a&nbsp;metodelor&nbsp;sale<br>public&nbsp;partial&nbsp;class&nbsp;Person<br>{<br>&nbsp;&nbsp;&nbsp;public&nbsp;partial&nbsp;void&nbsp;Read();<br>&nbsp;&nbsp;&nbsp;public&nbsp;void&nbsp;DoSomething()<br>&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Read();<br>&nbsp;&nbsp;&nbsp;}<br>}<br><br>//&nbsp;a&nbsp;doua&nbsp;implementare&nbsp;a&nbsp;clasei&nbsp;și&nbsp;a&nbsp;metodelor&nbsp;sale<br>public&nbsp;partial&nbsp;class&nbsp;Person<br>{<br>&nbsp;&nbsp;&nbsp;public&nbsp;partial&nbsp;void&nbsp;Read()<br>&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Console.WriteLine("I&nbsp;am&nbsp;reading&nbsp;a&nbsp;book");<br>&nbsp;&nbsp;&nbsp;}<br>}</code></pre>
     </div>
    </div>
   </main>
   <aside class="ad-section">
    <div class="ad-box">
     <p>Google Ad Here</p>
    </div>
    <div class="ad-box">
     <p>Promo: SQL Beginner Guide</p>
    </div>
   </aside>
  </div>
  <div class="lesson-navigation">
   <th:block th:if="${previousLesson != null}">
    <a th:href="@{'/lessons/' +
            ${#strings.toLowerCase(#strings.replace(previousLesson.chapter.topic.name, ' ', '-'))} + '/' +
            ${#strings.toLowerCase(#strings.replace(previousLesson.chapter.title, ' ', '-'))} + '/' +
            ${#strings.toLowerCase(#strings.replace(previousLesson.title, ' ', '-'))} }" class="nav-button">← Lecția anterioară</a>
   </th:block> <th:block th:if="${nextLesson != null}">
    <a th:href="@{'/lessons/' +
            ${#strings.toLowerCase(#strings.replace(nextLesson.chapter.topic.name, ' ', '-'))} + '/' +
            ${#strings.toLowerCase(#strings.replace(nextLesson.chapter.title, ' ', '-'))} + '/' +
            ${#strings.toLowerCase(#strings.replace(nextLesson.title, ' ', '-'))} }" class="nav-button">Lecția următoare →</a>
   </th:block>
  </div>
  <div th:replace="~{fragments/footer :: footer}"></div>
  <script th:src="@{/js/script.js}" defer></script>
 </body>
</html>
