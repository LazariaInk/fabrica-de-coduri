<!doctype html>
<html lang="ro" xmlns:th="http://www.w3.org/1999/xhtml">
 <head>
    <link rel="icon" type="image/png" href="/nume-aplicatie/images/favicon.png">
    <script async src="https://www.googletagmanager.com/gtag/js?id=G-7Q2536ZKL2"></script>
    <script>
      window.dataLayer = window.dataLayer || [];
      window.gtag = function () { dataLayer.push(arguments); };
      gtag('consent', 'default', {
        'wait_for_update': 500,
        'region': ['RO'],
        'ad_storage': 'denied',
        'analytics_storage': 'denied',
        'ad_user_data': 'denied',
        'ad_personalization': 'denied'
      });
      gtag('js', new Date());
      gtag('config', 'G-7Q2536ZKL2');
    </script>


  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title th:text="${lesson.title}">Lesson</title>
  <link rel="stylesheet" th:href="@{/css/styles.css}">
  <style>
        body {
            background: #ffffff;
        }
    </style>
 </head>
 <body th:with="activeTopic='C-sharp', activeChapter='14.Multithreading', activeLesson='7.Mutex-uri'">
  <button class="mobile-sidebar-toggle" onclick="toggleMobileSidebar()">☰</button>
  <div th:replace="~{fragments/nav :: nav}"></div>
  <div class="top-nav">
   <th:block th:each="topic : ${topics}">
    <a th:href="@{'/lectii/topic/' + ${topic.id}}" th:text="${topic.name}" th:classappend="${topic.id} == ${activeTopicId} ? 'active' : ''"> </a>
   </th:block>
  </div>
  <div class="layout">
   <div class="mobile-sidebar" id="mobileSidebar">
    <button class="close-btn" onclick="toggleSidebar()">✖</button>
    <ul class="chapter-list">
     <th:block th:each="chapter : ${chapters}">
      <li class="chapter-item" th:classappend="${chapter.id} == ${activeChapterId} ? 'open' : ''">
       <div class="chapter-title" onclick="toggleChapter(this)">
        <strong th:text="${chapter.title}"></strong> <span class="arrow">▼</span>
       </div>
       <ul class="lesson-list">
        <th:block th:each="lesson : ${chapter.lessons}">
         <li><a th:href="@{'/lessons/' +
    ${#strings.toLowerCase(#strings.replace(chapter.topic.name, ' ', '-'))} + '/' +
    ${#strings.toLowerCase(#strings.replace(chapter.title, ' ', '-'))} + '/' +
    ${#strings.toLowerCase(#strings.replace(lesson.title, ' ', '-'))} }" th:text="${lesson.title}" th:classappend="${lesson.id} == ${activeLessonId} ? 'active' : ''"> </a></li>
        </th:block>
       </ul></li>
     </th:block>
    </ul>
   </div>
   <aside class="sidebar">
    <ul class="sidebar-list">
     <th:block th:each="chapter : ${chapters}">
      <li class="chapter-item" th:classappend="${chapter.id} == ${activeChapterId} ? 'open' : ''">
       <div class="chapter-toggle" onclick="toggleLessons(this)">
        <span th:text="${chapter.title}">Chapter</span>
       </div>
       <ul class="lesson-list hidden">
        <th:block th:each="lesson : ${chapter.lessons}">
         <li><a th:href="@{'/lessons/' +
    ${#strings.toLowerCase(#strings.replace(chapter.topic.name, ' ', '-'))} + '/' +
    ${#strings.toLowerCase(#strings.replace(chapter.title, ' ', '-'))} + '/' +
    ${#strings.toLowerCase(#strings.replace(lesson.title, ' ', '-'))} }" th:text="${lesson.title}" th:classappend="${lesson.id} == ${activeLessonId} ? 'active' : ''"> </a></li>
        </th:block>
       </ul></li>
     </th:block>
    </ul>
   </aside>
   <main class="content">
    <div class="document-container">
     <h1 class="main-title">Mutex-uri</h1>
     <p class="paragraph">Un alt instrument de gestionare a sincronizării thread-urilor este clasa Mutex, care se află în namespace-ul System.Threading.</p>
     <p class="paragraph">Să luăm exemplul cu operatorul lock din una dintre temele anterioare, în care se utiliza sincronizarea thread-urilor:</p>
     <div class="code-inline">
      <pre><code>int&nbsp;x&nbsp;=&nbsp;0;<br>object&nbsp;locker&nbsp;=&nbsp;new();&nbsp;&nbsp;//&nbsp;obiect&nbsp;placeholder<br><br>//&nbsp;pornim&nbsp;cinci&nbsp;thread-uri<br>for&nbsp;(int&nbsp;i&nbsp;=&nbsp;1;&nbsp;i&nbsp;&lt;&nbsp;6;&nbsp;i++)<br>{<br>&nbsp;&nbsp;&nbsp;Thread&nbsp;myThread&nbsp;=&nbsp;new(Print);<br>&nbsp;&nbsp;&nbsp;myThread.Name&nbsp;=&nbsp;$"Thread&nbsp;{i}";<br>&nbsp;&nbsp;&nbsp;myThread.Start();<br>}<br><br>void&nbsp;Print()<br>{<br>&nbsp;&nbsp;&nbsp;lock&nbsp;(locker)<br>&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;x&nbsp;=&nbsp;1;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for&nbsp;(int&nbsp;i&nbsp;=&nbsp;1;&nbsp;i&nbsp;&lt;&nbsp;6;&nbsp;i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Console.WriteLine($"{Thread.CurrentThread.Name}:&nbsp;{x}");<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;x++;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Thread.Sleep(100);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;}<br>}</code></pre>
     </div>
     <p class="paragraph">Și rescriem acest exemplu folosind mutex-uri:</p>
     <div class="code-inline">
      <pre><code>int&nbsp;x&nbsp;=&nbsp;0;<br>Mutex&nbsp;mutexObj&nbsp;=&nbsp;new();<br><br>//&nbsp;pornim&nbsp;cinci&nbsp;thread-uri<br>for&nbsp;(int&nbsp;i&nbsp;=&nbsp;1;&nbsp;i&nbsp;&lt;&nbsp;6;&nbsp;i++)<br>{<br>&nbsp;&nbsp;&nbsp;Thread&nbsp;myThread&nbsp;=&nbsp;new(Print);<br>&nbsp;&nbsp;&nbsp;myThread.Name&nbsp;=&nbsp;$"Thread&nbsp;{i}";<br>&nbsp;&nbsp;&nbsp;myThread.Start();<br>}<br><br>void&nbsp;Print()<br>{<br>&nbsp;&nbsp;&nbsp;mutexObj.WaitOne();&nbsp;&nbsp;//&nbsp;suspendăm&nbsp;thread-ul&nbsp;până&nbsp;la&nbsp;obținerea&nbsp;mutex-ului<br>&nbsp;&nbsp;&nbsp;x&nbsp;=&nbsp;1;<br>&nbsp;&nbsp;&nbsp;for&nbsp;(int&nbsp;i&nbsp;=&nbsp;1;&nbsp;i&nbsp;&lt;&nbsp;6;&nbsp;i++)<br>&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Console.WriteLine($"{Thread.CurrentThread.Name}:&nbsp;{x}");<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;x++;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Thread.Sleep(100);<br>&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;mutexObj.ReleaseMutex();&nbsp;&nbsp;//&nbsp;eliberăm&nbsp;mutex-ul<br>}</code></pre>
     </div>
     <p class="paragraph">Mai întâi, creăm un obiect mutex:</p>
     <div class="code-inline">
      <pre><code>Mutex&nbsp;mutexObj&nbsp;=&nbsp;new&nbsp;Mutex();</code></pre>
     </div>
     <p class="paragraph">Principalele metode pentru sincronizare sunt WaitOne() și ReleaseMutex(). Metoda mutexObj.WaitOne() suspendă execuția thread-ului până când mutex-ul mutexObj este obținut.</p>
     <p class="paragraph">Inițial, mutex-ul este liber, așa că este obținut de unul dintre thread-uri.</p>
     <p class="paragraph">După ce toate acțiunile sunt finalizate și mutex-ul nu mai este necesar, thread-ul îl eliberează folosind metoda mutexObj.ReleaseMutex(). Apoi, mutex-ul este obținut de unul dintre thread-urile aflate în așteptare.</p>
     <p class="paragraph">Astfel, când execuția ajunge la apelul mutexObj.WaitOne(), thread-ul va aștepta până când mutex-ul va fi eliberat. După ce îl obține, va continua să-și execute activitatea.</p>
    </div>
   </main>
   <aside class="ad-section">
    <div class="ad-box">
     <p>Google Ad Here</p>
    </div>
    <div class="ad-box">
     <p>Promo: SQL Beginner Guide</p>
    </div>
   </aside>
  </div>
  <div class="lesson-navigation">
   <th:block th:if="${previousLesson != null}">
    <a th:href="@{'/lessons/' +
            ${#strings.toLowerCase(#strings.replace(previousLesson.chapter.topic.name, ' ', '-'))} + '/' +
            ${#strings.toLowerCase(#strings.replace(previousLesson.chapter.title, ' ', '-'))} + '/' +
            ${#strings.toLowerCase(#strings.replace(previousLesson.title, ' ', '-'))} }" class="nav-button">← Lecția anterioară</a>
   </th:block> <th:block th:if="${nextLesson != null}">
    <a th:href="@{'/lessons/' +
            ${#strings.toLowerCase(#strings.replace(nextLesson.chapter.topic.name, ' ', '-'))} + '/' +
            ${#strings.toLowerCase(#strings.replace(nextLesson.chapter.title, ' ', '-'))} + '/' +
            ${#strings.toLowerCase(#strings.replace(nextLesson.title, ' ', '-'))} }" class="nav-button">Lecția următoare →</a>
   </th:block>
  </div>
  <div th:replace="~{fragments/footer :: footer}"></div>
  <script th:src="@{/js/script.js}" defer></script>
 </body>
</html>
