<!doctype html>
<html lang="ro" xmlns:th="http://www.w3.org/1999/xhtml">
 <head>
    <link rel="icon" type="image/png" href="/nume-aplicatie/images/favicon.png">
    <script async src="https://www.googletagmanager.com/gtag/js?id=G-7Q2536ZKL2"></script>
    <script>
      window.dataLayer = window.dataLayer || [];
      window.gtag = function () { dataLayer.push(arguments); };
      gtag('consent', 'default', {
        'wait_for_update': 500,
        'region': ['RO'],
        'ad_storage': 'denied',
        'analytics_storage': 'denied',
        'ad_user_data': 'denied',
        'ad_personalization': 'denied'
      });
      gtag('js', new Date());
      gtag('config', 'G-7Q2536ZKL2');
    </script>


  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title th:text="${lesson.title}">Lesson</title>
  <link rel="stylesheet" th:href="@{/css/styles.css}">
  <style>
        body {
            background: #ffffff;
        }
    </style>
 </head>
 <body th:with="activeTopic='C-sharp', activeChapter='27.Ce mai e nou', activeLesson='2.Noutati in C sharp 12'">
  <button class="mobile-sidebar-toggle" onclick="toggleMobileSidebar()">☰</button>
  <div th:replace="~{fragments/nav :: nav}"></div>
  <div class="top-nav">
   <th:block th:each="topic : ${topics}">
    <a th:href="@{'/lectii/topic/' + ${topic.id}}" th:text="${topic.name}" th:classappend="${topic.id} == ${activeTopicId} ? 'active' : ''"> </a>
   </th:block>
  </div>
  <div class="layout">
   <div class="mobile-sidebar" id="mobileSidebar">
    <button class="close-btn" onclick="toggleSidebar()">✖</button>
    <ul class="chapter-list">
     <th:block th:each="chapter : ${chapters}">
      <li class="chapter-item" th:classappend="${chapter.id} == ${activeChapterId} ? 'open' : ''">
       <div class="chapter-title" onclick="toggleChapter(this)">
        <strong th:text="${chapter.title}"></strong> <span class="arrow">▼</span>
       </div>
       <ul class="lesson-list">
        <th:block th:each="lesson : ${chapter.lessons}">
         <li><a th:href="@{'/lessons/' +
    ${#strings.toLowerCase(#strings.replace(chapter.topic.name, ' ', '-'))} + '/' +
    ${#strings.toLowerCase(#strings.replace(chapter.title, ' ', '-'))} + '/' +
    ${#strings.toLowerCase(#strings.replace(lesson.title, ' ', '-'))} }" th:text="${lesson.title}" th:classappend="${lesson.id} == ${activeLessonId} ? 'active' : ''"> </a></li>
        </th:block>
       </ul></li>
     </th:block>
    </ul>
   </div>
   <aside class="sidebar">
    <ul class="sidebar-list">
     <th:block th:each="chapter : ${chapters}">
      <li class="chapter-item" th:classappend="${chapter.id} == ${activeChapterId} ? 'open' : ''">
       <div class="chapter-toggle" onclick="toggleLessons(this)">
        <span th:text="${chapter.title}">Chapter</span>
       </div>
       <ul class="lesson-list hidden">
        <th:block th:each="lesson : ${chapter.lessons}">
         <li><a th:href="@{'/lessons/' +
    ${#strings.toLowerCase(#strings.replace(chapter.topic.name, ' ', '-'))} + '/' +
    ${#strings.toLowerCase(#strings.replace(chapter.title, ' ', '-'))} + '/' +
    ${#strings.toLowerCase(#strings.replace(lesson.title, ' ', '-'))} }" th:text="${lesson.title}" th:classappend="${lesson.id} == ${activeLessonId} ? 'active' : ''"> </a></li>
        </th:block>
       </ul></li>
     </th:block>
    </ul>
   </aside>
   <main class="content">
    <div class="document-container">
     <h1 class="main-title">Noutăți în C# 12</h1>
     <h2 class="subtitle">Expresii de colecții</h2>
     <p class="paragraph">În C# 12, a fost simplificat modul de creare a array-urilor și colecțiilor prin intermediul expresiilor de colecții (collection expression), care oferă o abordare unificată pentru crearea colecțiilor. Astfel, dacă anterior crearea array-urilor arăta astfel:</p>
     <div class="code-inline">
      <pre><code>int[]&nbsp;nums1&nbsp;=&nbsp;{&nbsp;1,&nbsp;2,&nbsp;3,&nbsp;4&nbsp;};<br>int[]&nbsp;nums2&nbsp;=&nbsp;new&nbsp;int[]&nbsp;{&nbsp;};&nbsp;&nbsp;&nbsp;//&nbsp;array&nbsp;gol</code></pre>
     </div>
     <p class="paragraph">Acum poți scrie astfel:</p>
     <div class="code-inline">
      <pre><code>int[]&nbsp;nums1&nbsp;=&nbsp;[&nbsp;1,&nbsp;2,&nbsp;3,&nbsp;4&nbsp;];<br>int[]&nbsp;nums2&nbsp;=&nbsp;[];&nbsp;&nbsp;&nbsp;//&nbsp;array&nbsp;gol</code></pre>
     </div>
     <p class="paragraph">În mod similar, poți folosi expresii de colecții pentru a crea alte tipuri de colecții:</p>
     <div class="code-inline">
      <pre><code>List&lt;int&gt;&nbsp;list1&nbsp;=&nbsp;[1,&nbsp;2,&nbsp;3,&nbsp;4];<br>List&lt;int&gt;&nbsp;list2&nbsp;=&nbsp;[];&nbsp;//&nbsp;listă&nbsp;goală<br>Span&lt;int&gt;&nbsp;span1&nbsp;=&nbsp;[1,&nbsp;2,&nbsp;3,&nbsp;4];</code></pre>
     </div>
     <h2 class="subtitle">Constructori primari</h2>
     <p class="paragraph">Constructorii primari (Primary constructors) permit adăugarea de parametri la definirea clasei/structurii și utilizarea acestor parametri în interiorul clasei/structurii:</p>
     <div class="code-inline">
      <pre><code>var&nbsp;tom&nbsp;=&nbsp;new&nbsp;Person("Tom",&nbsp;38);<br>Console.WriteLine(tom);<br><br>public&nbsp;class&nbsp;Person(string&nbsp;name,&nbsp;int&nbsp;age)<br>{<br>&nbsp;&nbsp;&nbsp;public&nbsp;Person(string&nbsp;name)&nbsp;:&nbsp;this(name,&nbsp;18)&nbsp;{&nbsp;}<br>&nbsp;&nbsp;&nbsp;public&nbsp;string&nbsp;Name&nbsp;=&gt;&nbsp;name;<br>&nbsp;&nbsp;&nbsp;public&nbsp;int&nbsp;Age&nbsp;=&gt;&nbsp;age;<br><br>&nbsp;&nbsp;&nbsp;public&nbsp;override&nbsp;string&nbsp;ToString()&nbsp;=&gt;&nbsp;$"name:&nbsp;{name},&nbsp;age:&nbsp;{age}";<br>}</code></pre>
     </div>
     <p class="paragraph">Aici, pentru clasa Person este definit un constructor primar cu doi parametri - name și age. Acești parametri sunt folosiți pentru a inițializa proprietățile Name și Age și sunt utilizați în metoda ToString().</p>
     <p class="paragraph">În fundal, pentru fiecare parametru al constructorului primar, în clasă se creează un câmp privat care stochează valoarea parametrului. Datorită acestui fapt, acești parametri pot fi utilizați în corpul clasei.</p>
     <p class="paragraph">Pe lângă constructorii primari, clasa poate defini constructori suplimentari, așa cum este exemplificat mai sus. Însă acești constructori suplimentari trebuie să apeleze constructorul primar:</p>
     <div class="code-inline">
      <pre><code>public&nbsp;Person(string&nbsp;name)&nbsp;:&nbsp;this(name,&nbsp;18)&nbsp;{&nbsp;}</code></pre>
     </div>
     <h2 class="subtitle">Pseudonime pentru tipuri</h2>
     <p class="paragraph">C# 12 permite definirea de pseudonime pentru orice tipuri. De exemplu:</p>
     <div class="code-inline">
      <pre><code>using&nbsp;People&nbsp;=&nbsp;System.Collections.Generic.List&lt;Person&gt;;<br><br>People&nbsp;people&nbsp;=&nbsp;new()&nbsp;{&nbsp;new&nbsp;("Tom",&nbsp;38),&nbsp;new&nbsp;("Bob",&nbsp;42)&nbsp;};<br>people.ForEach(Console.WriteLine);<br><br>public&nbsp;record&nbsp;Person(string&nbsp;Name,&nbsp;int&nbsp;Age);</code></pre>
     </div>
     <p class="paragraph">Aici, "People" servește ca pseudonim pentru tipul List&lt;Person&gt;.</p>
     <p class="paragraph">Un alt exemplu:</p>
     <div class="code-inline">
      <pre><code>using&nbsp;user&nbsp;=&nbsp;(string,&nbsp;int);<br>user&nbsp;tom&nbsp;=&nbsp;("Tom",&nbsp;38);<br>Console.WriteLine(tom);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;(Tom,&nbsp;38)</code></pre>
     </div>
     <p class="paragraph">Aici, numele user servește ca pseudonim pentru un tuplu de tip (string, int).</p>
     <p class="paragraph">Mai mult, putem da nume elementelor tuplului:</p>
     <div class="code-inline">
      <pre><code>using&nbsp;user&nbsp;=&nbsp;(string&nbsp;name,&nbsp;int&nbsp;age);<br>user&nbsp;tom&nbsp;=&nbsp;("Tom",&nbsp;38);<br>Console.WriteLine(tom.name);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;Tom<br>Console.WriteLine(tom.age);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;38</code></pre>
     </div>
     <p class="paragraph">Încă un exemplu:</p>
     <div class="code-inline">
      <pre><code>using&nbsp;BinaryOp&nbsp;=&nbsp;System.Func&lt;int,&nbsp;int,&nbsp;int&gt;;<br><br>BinaryOp&nbsp;sum&nbsp;=&nbsp;(a,&nbsp;b)&nbsp;=&gt;&nbsp;a&nbsp;+&nbsp;b;<br>BinaryOp&nbsp;subtract&nbsp;=&nbsp;(a,&nbsp;b)&nbsp;=&gt;&nbsp;a&nbsp;-&nbsp;b;<br><br>DoOperation(10,&nbsp;6,&nbsp;sum);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;16<br>DoOperation(10,&nbsp;6,&nbsp;subtract);&nbsp;&nbsp;&nbsp;//&nbsp;4<br><br>void&nbsp;DoOperation(int&nbsp;a,&nbsp;int&nbsp;b,&nbsp;BinaryOp&nbsp;op)<br>{<br>&nbsp;&nbsp;&nbsp;Console.WriteLine(op(a,&nbsp;b));<br>}</code></pre>
     </div>
     <p class="paragraph">Aici, delegatul de tip System.Func&lt;int, int, int&gt; primește pseudonimul BinaryOp.</p>
     <h2 class="subtitle">Valori implicite pentru parametrii expresiilor lambda</h2>
     <p class="paragraph">Începând cu C# 12, parametrii expresiilor lambda pot avea valori implicite:</p>
     <div class="code-inline">
      <pre><code><br>var&nbsp;welcome&nbsp;=&nbsp;(string&nbsp;message&nbsp;=&nbsp;"hello")&nbsp;=&gt;&nbsp;Console.WriteLine(message);<br><br>welcome("hello&nbsp;world");&nbsp;//&nbsp;hello&nbsp;world<br>welcome();&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;hello</code></pre>
     </div>
     <h2 class="subtitle">Parametri ref doar pentru citire</h2>
     <p class="paragraph">Pentru a garanta că un parametru ref nu își va schimba valoarea, începând cu versiunea C# 12, se pot aplica parametri ref doar pentru citire. Acești parametri sunt precedați de cuvântul cheie readonly:</p>
     <div class="code-inline">
      <pre><code>void&nbsp;Increment(ref&nbsp;readonly&nbsp;int&nbsp;n)<br>{<br>&nbsp;&nbsp;&nbsp;//&nbsp;n++;&nbsp;//&nbsp;nu&nbsp;este&nbsp;permis,&nbsp;altfel&nbsp;va&nbsp;apărea&nbsp;o&nbsp;eroare&nbsp;de&nbsp;compilare<br>&nbsp;&nbsp;&nbsp;Console.WriteLine($"Numărul&nbsp;în&nbsp;metoda&nbsp;Increment:&nbsp;{n}");<br>}<br><br>int&nbsp;number&nbsp;=&nbsp;5;<br>Increment(ref&nbsp;number);<br>Console.WriteLine($"Numărul&nbsp;după&nbsp;metoda&nbsp;Increment:&nbsp;{number}");</code></pre>
     </div>
     <p class="paragraph">În acest caz, în metoda Increment, parametrul n este transmis prin referință și este disponibil doar pentru citire. Dacă se încearcă modificarea valorii sale, vom primi o eroare la compilare.</p>
     <h2 class="subtitle">Simplificarea definirii tipurilor</h2>
     <p class="paragraph">Începând cu versiunea C# 12, dacă un tip - clasă/structură/interfață - are o definiție goală (nu conține câmpuri, proprietăți, metode), acoladele după numele tipului pot fi omise:</p>
     <div class="code-inline">
      <pre><code>class&nbsp;Person;<br>struct&nbsp;User;<br>interface&nbsp;Human;</code></pre>
     </div>
    </div>
   </main>
   <aside class="ad-section">
    <div class="ad-box">
     <p>Google Ad Here</p>
    </div>
    <div class="ad-box">
     <p>Promo: SQL Beginner Guide</p>
    </div>
   </aside>
  </div>
  <div class="lesson-navigation">
   <th:block th:if="${previousLesson != null}">
    <a th:href="@{'/lessons/' +
            ${#strings.toLowerCase(#strings.replace(previousLesson.chapter.topic.name, ' ', '-'))} + '/' +
            ${#strings.toLowerCase(#strings.replace(previousLesson.chapter.title, ' ', '-'))} + '/' +
            ${#strings.toLowerCase(#strings.replace(previousLesson.title, ' ', '-'))} }" class="nav-button">← Lecția anterioară</a>
   </th:block> <th:block th:if="${nextLesson != null}">
    <a th:href="@{'/lessons/' +
            ${#strings.toLowerCase(#strings.replace(nextLesson.chapter.topic.name, ' ', '-'))} + '/' +
            ${#strings.toLowerCase(#strings.replace(nextLesson.chapter.title, ' ', '-'))} + '/' +
            ${#strings.toLowerCase(#strings.replace(nextLesson.title, ' ', '-'))} }" class="nav-button">Lecția următoare →</a>
   </th:block>
  </div>
  <div th:replace="~{fragments/footer :: footer}"></div>
  <script th:src="@{/js/script.js}" defer></script>
 </body>
</html>
