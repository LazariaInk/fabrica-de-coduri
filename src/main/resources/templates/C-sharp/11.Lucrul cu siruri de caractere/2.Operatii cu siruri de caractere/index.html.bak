<!doctype html>
<html lang="ro" xmlns:th="http://www.w3.org/1999/xhtml">
 <head>
    <link rel="icon" type="image/png" href="/nume-aplicatie/images/favicon.png">
    <script async src="https://www.googletagmanager.com/gtag/js?id=G-7Q2536ZKL2"></script>
    <script>
      window.dataLayer = window.dataLayer || [];
      window.gtag = function () { dataLayer.push(arguments); };
      gtag('consent', 'default', {
        'wait_for_update': 500,
        'region': ['RO'],
        'ad_storage': 'denied',
        'analytics_storage': 'denied',
        'ad_user_data': 'denied',
        'ad_personalization': 'denied'
      });
      gtag('js', new Date());
      gtag('config', 'G-7Q2536ZKL2');
    </script>


  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title th:text="${lesson.title}">Lesson</title>
  <link rel="stylesheet" th:href="@{/css/styles.css}">
  <style>
        body {
            background: #ffffff;
        }
    </style>
 </head>
 <body th:with="activeTopic='C-sharp', activeChapter='11.Lucrul cu siruri de caractere', activeLesson='2.Operatii cu siruri de caractere'">
  <button class="mobile-sidebar-toggle" onclick="toggleMobileSidebar()">☰</button>
  <div th:replace="~{fragments/nav :: nav}"></div>
  <div class="top-nav">
   <th:block th:each="topic : ${topics}">
    <a th:href="@{'/lectii/topic/' + ${topic.id}}" th:text="${topic.name}" th:classappend="${topic.id} == ${activeTopicId} ? 'active' : ''"> </a>
   </th:block>
  </div>
  <div class="layout">
   <div class="mobile-sidebar" id="mobileSidebar">
    <button class="close-btn" onclick="toggleSidebar()">✖</button>
    <ul class="chapter-list">
     <th:block th:each="chapter : ${chapters}">
      <li class="chapter-item" th:classappend="${chapter.id} == ${activeChapterId} ? 'open' : ''">
       <div class="chapter-title" onclick="toggleChapter(this)">
        <strong th:text="${chapter.title}"></strong> <span class="arrow">▼</span>
       </div>
       <ul class="lesson-list">
        <th:block th:each="lesson : ${chapter.lessons}">
         <li><a th:href="@{'/lessons/' +
    ${#strings.toLowerCase(#strings.replace(chapter.topic.name, ' ', '-'))} + '/' +
    ${#strings.toLowerCase(#strings.replace(chapter.title, ' ', '-'))} + '/' +
    ${#strings.toLowerCase(#strings.replace(lesson.title, ' ', '-'))} }" th:text="${lesson.title}" th:classappend="${lesson.id} == ${activeLessonId} ? 'active' : ''"> </a></li>
        </th:block>
       </ul></li>
     </th:block>
    </ul>
   </div>
   <aside class="sidebar">
    <ul class="sidebar-list">
     <th:block th:each="chapter : ${chapters}">
      <li class="chapter-item" th:classappend="${chapter.id} == ${activeChapterId} ? 'open' : ''">
       <div class="chapter-toggle" onclick="toggleLessons(this)">
        <span th:text="${chapter.title}">Chapter</span>
       </div>
       <ul class="lesson-list hidden">
        <th:block th:each="lesson : ${chapter.lessons}">
         <li><a th:href="@{'/lessons/' +
    ${#strings.toLowerCase(#strings.replace(chapter.topic.name, ' ', '-'))} + '/' +
    ${#strings.toLowerCase(#strings.replace(chapter.title, ' ', '-'))} + '/' +
    ${#strings.toLowerCase(#strings.replace(lesson.title, ' ', '-'))} }" th:text="${lesson.title}" th:classappend="${lesson.id} == ${activeLessonId} ? 'active' : ''"> </a></li>
        </th:block>
       </ul></li>
     </th:block>
    </ul>
   </aside>
   <main class="content">
    <div class="document-container">
     <h1 class="main-title">Operații cu șiruri de caractere</h1>
     <h2 class="subtitle">Unire de șiruri</h2>
     <p class="paragraph">Concatenarea șirurilor sau unirea poate fi realizată atât cu ajutorul operației +, cât și cu metoda Concat:</p>
     <div class="code-inline">
      <pre><code>string&nbsp;s1&nbsp;=&nbsp;"hello";<br>string&nbsp;s2&nbsp;=&nbsp;"world";<br>string&nbsp;s3&nbsp;=&nbsp;s1&nbsp;+&nbsp;"&nbsp;"&nbsp;+&nbsp;s2;&nbsp;//&nbsp;rezultat:&nbsp;șirul&nbsp;"hello&nbsp;world"<br>string&nbsp;s4&nbsp;=&nbsp;string.Concat(s3,&nbsp;"!!!");&nbsp;//&nbsp;rezultat:&nbsp;șirul&nbsp;"hello&nbsp;world!!!"<br><br>Console.WriteLine(s4);</code></pre>
     </div>
     <p class="paragraph">Metoda Concat este o metodă statică a clasei string, care primește ca parametri două șiruri. De asemenea, există și alte versiuni ale metodei care acceptă un număr diferit de parametri.</p>
     <p class="paragraph">Pentru unirea șirurilor poate fi utilizată și metoda Join:</p>
     <div class="code-inline">
      <pre><code>string&nbsp;s5&nbsp;=&nbsp;"apple";<br>string&nbsp;s6&nbsp;=&nbsp;"a&nbsp;day";<br>string&nbsp;s7&nbsp;=&nbsp;"keeps";<br>string&nbsp;s8&nbsp;=&nbsp;"a&nbsp;doctor";<br>string&nbsp;s9&nbsp;=&nbsp;"away";<br>string[]&nbsp;values&nbsp;=&nbsp;new&nbsp;string[]&nbsp;{&nbsp;s5,&nbsp;s6,&nbsp;s7,&nbsp;s8,&nbsp;s9&nbsp;};<br><br>string&nbsp;s10&nbsp;=&nbsp;string.Join("&nbsp;",&nbsp;values);<br>Console.WriteLine(s10);&nbsp;//&nbsp;apple&nbsp;a&nbsp;day&nbsp;keeps&nbsp;a&nbsp;doctor&nbsp;away</code></pre>
     </div>
     <p class="paragraph">Metoda Join este de asemenea statică. Versiunea utilizată mai sus primește doi parametri: un separator de șiruri (în acest caz, spațiu) și un tablou de șiruri care vor fi unite și separate de separator.</p>
     <h2 class="subtitle">Compararea șirurilor</h2>
     <p class="paragraph">Pentru compararea șirurilor se folosește metoda statică Compare:</p>
     <div class="code-inline">
      <pre><code>string&nbsp;s1&nbsp;=&nbsp;"hello";<br>string&nbsp;s2&nbsp;=&nbsp;"world";<br><br>int&nbsp;result&nbsp;=&nbsp;string.Compare(s1,&nbsp;s2);<br>if&nbsp;(result&lt;0)<br>{<br>&nbsp;&nbsp;&nbsp;Console.WriteLine("Șirul&nbsp;s1&nbsp;precede&nbsp;șirul&nbsp;s2");<br>}<br>else&nbsp;if&nbsp;(result&nbsp;&gt;&nbsp;0)<br>{<br>&nbsp;&nbsp;&nbsp;Console.WriteLine("Șirul&nbsp;s1&nbsp;urmează&nbsp;șirului&nbsp;s2");<br>}<br>else<br>{<br>&nbsp;&nbsp;&nbsp;Console.WriteLine("Șirurile&nbsp;s1&nbsp;și&nbsp;s2&nbsp;sunt&nbsp;identice");<br>}<br>//&nbsp;rezultatul&nbsp;va&nbsp;fi&nbsp;"Șirul&nbsp;s1&nbsp;precede&nbsp;șirul&nbsp;s2"</code></pre>
     </div>
     <p class="paragraph">Această versiune a metodei Compare primește două șiruri și returnează un număr. Dacă primul șir este alfabetic înaintea celui de-al doilea, se returnează un număr negativ. În caz contrar, se returnează un număr pozitiv. Și al treilea caz - dacă șirurile sunt egale, se returnează 0.</p>
     <p class="paragraph">În acest caz, deoarece caracterul h este alfabetic înaintea caracterului w, primul șir va fi înaintea celui de-al doilea.</p>
     <h2 class="subtitle">Căutarea într-un șir</h2>
     <p class="paragraph">Cu ajutorul metodei IndexOf putem determina indexul primei apariții a unui caracter sau subșir într-un șir:</p>
     <div class="code-inline">
      <pre><code>string&nbsp;s1&nbsp;=&nbsp;"hello&nbsp;world";<br>char&nbsp;ch&nbsp;=&nbsp;'o';<br>int&nbsp;indexOfChar&nbsp;=&nbsp;s1.IndexOf(ch);&nbsp;//&nbsp;egal&nbsp;cu&nbsp;4<br>Console.WriteLine(indexOfChar);<br><br>string&nbsp;substring&nbsp;=&nbsp;"wor";<br>int&nbsp;indexOfSubstring&nbsp;=&nbsp;s1.IndexOf(substring);&nbsp;//&nbsp;egal&nbsp;cu&nbsp;6<br>Console.WriteLine(indexOfSubstring);</code></pre>
     </div>
     <p class="paragraph">În mod similar, funcționează metoda LastIndexOf, care găsește indexul ultimei apariții a unui caracter sau subșir într-un șir.</p>
     <p class="paragraph">O altă grupă de metode permite verificarea dacă un șir începe sau se termină cu un anumit subșir. Pentru aceasta sunt destinate metodele StartsWith și EndsWith. De exemplu, într-un tablou de șiruri este stocată o listă de fișiere și trebuie să afișăm toate fișierele cu extensia exe:</p>
     <div class="code-inline">
      <pre><code>var&nbsp;files&nbsp;=&nbsp;new&nbsp;string[]<br>{<br>&nbsp;&nbsp;&nbsp;"myapp.exe",<br>&nbsp;&nbsp;&nbsp;"forest.jpg",<br>&nbsp;&nbsp;&nbsp;"main.exe",<br>&nbsp;&nbsp;&nbsp;"book.pdf",<br>&nbsp;&nbsp;&nbsp;"river.png"<br>};<br><br>for&nbsp;(int&nbsp;i&nbsp;=&nbsp;0;&nbsp;i&nbsp;&lt;&nbsp;files.Length;&nbsp;i++)<br>{<br>&nbsp;&nbsp;&nbsp;if&nbsp;(files[i].EndsWith(".exe"))<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Console.WriteLine(files[i]);<br>}</code></pre>
     </div>
     <h2 class="subtitle">Divizarea șirurilor</h2>
     <p class="paragraph">Cu ajutorul funcției Split putem diviza un șir într-un tablou de subșiruri. Ca parametru, funcția Split primește un tablou de caractere sau șiruri care vor servi ca delimitatori. De exemplu, să numărăm câte cuvinte sunt într-un șir, divizându-l după caracterele de spațiu:</p>
     <div class="code-inline">
      <pre><code>string&nbsp;text&nbsp;=&nbsp;"Și&nbsp;de&nbsp;aceea&nbsp;totul&nbsp;s-a&nbsp;întâmplat&nbsp;așa";<br><br>string[]&nbsp;words&nbsp;=&nbsp;text.Split(new&nbsp;char[]&nbsp;{&nbsp;'&nbsp;'&nbsp;});<br><br>foreach&nbsp;(string&nbsp;s&nbsp;in&nbsp;words)<br>{<br>&nbsp;&nbsp;&nbsp;Console.WriteLine(s);<br>}</code></pre>
     </div>
     <p class="paragraph">Acesta nu este cel mai bun mod de a diviza după spații, deoarece în șirul de intrare ar putea fi mai multe spații consecutive și în rezultatul final ar apărea spații. Prin urmare, este mai bine să se utilizeze o altă versiune a metodei:</p>
     <div class="code-inline">
      <pre><code>string[]&nbsp;words&nbsp;=&nbsp;text.Split(new&nbsp;char[]&nbsp;{&nbsp;'&nbsp;'&nbsp;},&nbsp;StringSplitOptions.RemoveEmptyEntries);</code></pre>
     </div>
     <p class="paragraph">Al doilea parametru, StringSplitOptions.RemoveEmptyEntries, indică eliminarea tuturor subșirurilor goale.</p>
     <h2 class="subtitle">Tăierea șirurilor</h2>
     <p class="paragraph">Pentru a tăia caracterele de la începutul sau sfârșitul unui șir se folosește funcția Trim:</p>
     <div class="code-inline">
      <pre><code>string&nbsp;text&nbsp;=&nbsp;"&nbsp;hello&nbsp;world&nbsp;";<br><br>text&nbsp;=&nbsp;text.Trim();&nbsp;//&nbsp;rezultat&nbsp;"hello&nbsp;world"<br>text&nbsp;=&nbsp;text.Trim(new&nbsp;char[]&nbsp;{&nbsp;'d',&nbsp;'h'&nbsp;});&nbsp;//&nbsp;rezultat&nbsp;"ello&nbsp;worl"</code></pre>
     </div>
     <p class="paragraph">Funcția Trim fără parametri taie spațiile de la începutul și sfârșitul șirului și returnează șirul tăiat. Pentru a specifica în mod explicit ce caractere de la începutul și sfârșitul șirului să fie tăiate, putem transmite funcției un tablou al acestor caractere.</p>
     <p class="paragraph">Această funcție are analogi parțiali: funcția TrimStart taie caracterele de la început, iar funcția TrimEnd taie caracterele de la sfârșit.</p>
     <p class="paragraph">Pentru a tăia o anumită parte a unui șir se folosește funcția Substring:</p>
     <div class="code-inline">
      <pre><code>string&nbsp;text&nbsp;=&nbsp;"Zi&nbsp;bună";<br>//&nbsp;tăiem&nbsp;începând&nbsp;cu&nbsp;al&nbsp;treilea&nbsp;caracter<br>text&nbsp;=&nbsp;text.Substring(2);<br>//&nbsp;rezultat&nbsp;"&nbsp;bună"<br>Console.WriteLine(text);<br>//&nbsp;tăiem&nbsp;de&nbsp;la&nbsp;început&nbsp;până&nbsp;la&nbsp;ultimele&nbsp;două&nbsp;caractere<br>text&nbsp;=&nbsp;text.Substring(0,&nbsp;text.Length&nbsp;-&nbsp;2);<br>//&nbsp;rezultat&nbsp;"&nbsp;zi&nbsp;bu"<br>Console.WriteLine(text);</code></pre>
     </div>
     <p class="paragraph">Funcția Substring returnează de asemenea șirul tăiat. Ca parametru, prima versiune folosită aplică indexul de la care să se înceapă tăierea șirului. A doua versiune aplică doi parametri - indexul de început al tăierii și lungimea părții de șir tăiate.</p>
     <h2 class="subtitle">Inserare</h2>
     <p class="paragraph">Pentru a insera un șir în alt șir se folosește funcția Insert:</p>
     <div class="code-inline">
      <pre><code>string&nbsp;text&nbsp;=&nbsp;"Zi&nbsp;bună";<br>string&nbsp;substring&nbsp;=&nbsp;"minunată&nbsp;";<br><br>text&nbsp;=&nbsp;text.Insert(3,&nbsp;substring);<br>Console.WriteLine(text);&nbsp;//&nbsp;Zi&nbsp;minunată&nbsp;bună</code></pre>
     </div>
     <p class="paragraph">Primul parametru în funcția Insert este indexul la care se va insera subșirul, iar al doilea parametru este subșirul propriu-zis.</p>
     <h2 class="subtitle">Ștergerea șirurilor</h2>
     <p class="paragraph">Pentru a șterge o parte a unui șir se folosește metoda Remove:</p>
     <div class="code-inline">
      <pre><code>string&nbsp;text&nbsp;=&nbsp;"Zi&nbsp;bună";<br>//&nbsp;indexul&nbsp;ultimului&nbsp;caracter<br>int&nbsp;ind&nbsp;=&nbsp;text.Length&nbsp;-&nbsp;1;<br>//&nbsp;tăiem&nbsp;ultimul&nbsp;caracter<br>text&nbsp;=&nbsp;text.Remove(ind);<br>Console.WriteLine(text);&nbsp;//&nbsp;Zi&nbsp;bun<br><br>//&nbsp;tăiem&nbsp;primele&nbsp;două&nbsp;caractere<br>text&nbsp;=&nbsp;text.Remove(0,&nbsp;2);<br>Console.WriteLine(text);&nbsp;//&nbsp;bună</code></pre>
     </div>
     <p class="paragraph">Prima versiune a metodei Remove primește indexul în șir de la care să înceapă ștergerea tuturor caracterelor. A doua versiune primește încă un parametru - câte caractere să fie șterse.</p>
     <h2 class="subtitle">Înlocuire</h2>
     <p class="paragraph">Pentru a înlocui un caracter sau un subșir cu altul se folosește metoda Replace:</p>
     <div class="code-inline">
      <pre><code>string&nbsp;text&nbsp;=&nbsp;"zi&nbsp;bună";<br><br>text&nbsp;=&nbsp;text.Replace("zi",&nbsp;"noapte");<br>Console.WriteLine(text);&nbsp;//&nbsp;noapte&nbsp;bună<br><br>text&nbsp;=&nbsp;text.Replace("o",&nbsp;"");<br>Console.WriteLine(text);&nbsp;//&nbsp;napte&nbsp;bună</code></pre>
     </div>
     <p class="paragraph">În al doilea caz de utilizare a funcției Replace, șirul "o" este înlocuit cu un șir gol, adică este efectiv eliminat din text. În acest mod este ușor de eliminat un anumit text din șiruri.</p>
     <h2 class="subtitle">Schimbarea registrului</h2>
     <p class="paragraph">Pentru a transforma un șir în majuscule sau minuscule se folosesc funcțiile ToUpper() și ToLower():</p>
     <div class="code-inline">
      <pre><code>string&nbsp;hello&nbsp;=&nbsp;"Hello&nbsp;world!";<br><br>Console.WriteLine(hello.ToLower());&nbsp;//hello&nbsp;world!<br>Console.WriteLine(hello.ToUpper());&nbsp;//&nbsp;HELLO&nbsp;WORLD!</code></pre>
     </div>
    </div>
   </main>
   <aside class="ad-section">
    <div class="ad-box">
     <p>Google Ad Here</p>
    </div>
    <div class="ad-box">
     <p>Promo: SQL Beginner Guide</p>
    </div>
   </aside>
  </div>
  <div class="lesson-navigation">
   <th:block th:if="${previousLesson != null}">
    <a th:href="@{'/lessons/' +
            ${#strings.toLowerCase(#strings.replace(previousLesson.chapter.topic.name, ' ', '-'))} + '/' +
            ${#strings.toLowerCase(#strings.replace(previousLesson.chapter.title, ' ', '-'))} + '/' +
            ${#strings.toLowerCase(#strings.replace(previousLesson.title, ' ', '-'))} }" class="nav-button">← Lecția anterioară</a>
   </th:block> <th:block th:if="${nextLesson != null}">
    <a th:href="@{'/lessons/' +
            ${#strings.toLowerCase(#strings.replace(nextLesson.chapter.topic.name, ' ', '-'))} + '/' +
            ${#strings.toLowerCase(#strings.replace(nextLesson.chapter.title, ' ', '-'))} + '/' +
            ${#strings.toLowerCase(#strings.replace(nextLesson.title, ' ', '-'))} }" class="nav-button">Lecția următoare →</a>
   </th:block>
  </div>
  <div th:replace="~{fragments/footer :: footer}"></div>
  <script th:src="@{/js/script.js}" defer></script>
 </body>
</html>
