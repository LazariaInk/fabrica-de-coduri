<!doctype html>
<html lang="ro" xmlns:th="http://www.w3.org/1999/xhtml">
 <head>
    <script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-4253419731329045"
            crossorigin="anonymous"></script>


  <link rel="canonical" th:href="${canonicalUrl}" />

    <link rel="icon" type="image/png" href="/nume-aplicatie/images/favicon.png">
    <script async src="https://www.googletagmanager.com/gtag/js?id=G-7Q2536ZKL2"></script>
    <script>
      window.dataLayer = window.dataLayer || [];
      window.gtag = function () { dataLayer.push(arguments); };
      gtag('consent', 'default', {
        'wait_for_update': 500,
        'region': ['RO'],
        'ad_storage': 'denied',
        'analytics_storage': 'denied',
        'ad_user_data': 'denied',
        'ad_personalization': 'denied'
      });
      gtag('js', new Date());
      gtag('config', 'G-7Q2536ZKL2');
    </script>


  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title th:text="${lesson.title}">Lesson</title>
  <link rel="stylesheet" th:href="@{/css/styles.css}">
  <style>
        body {
            background: #ffffff;
        }
    </style>
 </head>
 <body th:with="activeTopic='C-sharp', activeChapter='10.Colectii', activeLesson='9.Clasa Array si Array-urile'">
  <button class="mobile-sidebar-toggle" onclick="toggleMobileSidebar()">☰</button>
  <div th:replace="~{fragments/nav :: nav}"></div>
  <div class="top-nav">
   <th:block th:each="topic : ${topics}">
    <a th:href="@{'/lectii/topic/' + ${topic.id}}" th:text="${topic.name}" th:classappend="${topic.id} == ${activeTopicId} ? 'active' : ''"> </a>
   </th:block>
  </div>
  <div class="layout">
   <div class="mobile-sidebar" id="mobileSidebar">
    <button class="close-btn" onclick="toggleSidebar()">✖</button>
    <ul class="chapter-list">
     <th:block th:each="chapter : ${chapters}">
      <li class="chapter-item" th:classappend="${chapter.id} == ${activeChapterId} ? 'open' : ''">
       <div class="chapter-title" onclick="toggleChapter(this)">
        <strong th:text="${chapter.title}"></strong> <span class="arrow">▼</span>
       </div>
       <ul class="lesson-list">
        <th:block th:each="lesson : ${chapter.lessons}">
         <li><a th:href="@{'/lectii/' +
    ${#strings.toLowerCase(#strings.replace(chapter.topic.name, ' ', '-'))} + '/' +
    ${#strings.toLowerCase(#strings.replace(chapter.title, ' ', '-'))} + '/' +
    ${#strings.toLowerCase(#strings.replace(lesson.title, ' ', '-'))} }" th:text="${lesson.title}" th:classappend="${lesson.id} == ${activeLessonId} ? 'active' : ''"> </a></li>
        </th:block>
       </ul></li>
     </th:block>
    </ul>
   </div>
   <aside class="sidebar">
    <ul class="sidebar-list">
     <th:block th:each="chapter : ${chapters}">
      <li class="chapter-item" th:classappend="${chapter.id} == ${activeChapterId} ? 'open' : ''">
       <div class="chapter-toggle" onclick="toggleLessons(this)">
        <span th:text="${chapter.title}">Chapter</span>
       </div>
       <ul class="lesson-list hidden">
        <th:block th:each="lesson : ${chapter.lessons}">
         <li><a th:href="@{'/lectii/' +
    ${#strings.toLowerCase(#strings.replace(chapter.topic.name, ' ', '-'))} + '/' +
    ${#strings.toLowerCase(#strings.replace(chapter.title, ' ', '-'))} + '/' +
    ${#strings.toLowerCase(#strings.replace(lesson.title, ' ', '-'))} }" th:text="${lesson.title}" th:classappend="${lesson.id} == ${activeLessonId} ? 'active' : ''"> </a></li>
        </th:block>
       </ul></li>
     </th:block>
    </ul>
   </aside>
   <main class="content">
    <div class="document-container">
     <h1 class="main-title">Clasa Array și Array-urile</h1>
     <p class="paragraph">Toate array-urile în C# sunt construite pe baza clasei Array din spațiul de nume System. Această clasă definește o serie de proprietăți și metode pe care le putem folosi la lucrul cu array-uri. Iată principalele proprietăți și metode:</p>
     <ul class="enumeration">
      <li>Length: returnează lungimea array-ului</li>
      <li>Rank: returnează dimensiunea array-ului</li>
      <li>int BinarySearch(Array array, object? value): efectuează o căutare binară într-un array sortat și returnează indexul elementului găsit</li>
      <li>void Clear(Array array): golește array-ul, setând valoarea implicită pentru toate elementele</li>
      <li>void Copy(Array sourceArray, int sourceIndex, Array destinationArray, int destinationIndex, int length): copiază din array-ul sourceArray, începând de la indexul sourceIndex, un număr de length elemente în array-ul destinationArray, începând de la indexul destinationIndex</li>
      <li>bool Exists&lt;T&gt;(T[] array, Predicate&lt;T&gt; match): verifică dacă array-ul conține elemente care satisfac condiția delegatului match</li>
      <li>void Fill&lt;T&gt;(T[] array, T value): umple array-ul cu valoarea value</li>
      <li>T? Find&lt;T&gt;(T[] array, Predicate&lt;T&gt; match): găsește primul element care satisface o anumită condiție specificată de delegatul match. Dacă elementul nu este găsit, returnează null</li>
      <li>T? FindLast&lt;T&gt;(T[] array, Predicate&lt;T&gt; match): găsește ultimul element care satisface o anumită condiție specificată de delegatul match. Dacă elementul nu este găsit, returnează null</li>
      <li>int FindIndex&lt;T&gt;(T[] array, Predicate&lt;T&gt; match): returnează indexul primei apariții a unui element care satisface o anumită condiție specificată de delegatul match</li>
      <li>int FindLastIndex&lt;T&gt;(T[] array, Predicate&lt;T&gt; match): returnează indexul ultimei apariții a unui element care satisface o anumită condiție</li>
      <li>T[] FindAll&lt;T&gt;(T[] array, Predicate&lt;T&gt; match): returnează toate elementele sub formă de array care satisfac o anumită condiție specificată de delegatul match</li>
      <li>int IndexOf(Array array, object? value): returnează indexul primei apariții a unui element în array</li>
      <li>int LastIndexOf(Array array, object? value): returnează indexul ultimei apariții a unui element în array</li>
      <li>void Resize&lt;T&gt;(ref T[]? array, int newSize): modifică dimensiunea unui array unidimensional</li>
      <li>void Reverse(Array array): inversează ordinea elementelor din array</li>
      <li>void Sort(Array array): sortează elementele unui array unidimensional</li>
     </ul>
     <h2 class="subtitle">Sortarea unui array</h2>
     <p class="paragraph">Să sortăm un array folosind metoda Sort():</p>
     <div class="code-inline">
      <pre><code>string[]&nbsp;people&nbsp;=&nbsp;{&nbsp;"Tom",&nbsp;"Sam",&nbsp;"Bob",&nbsp;"Kate",&nbsp;"Tom",&nbsp;"Alice"&nbsp;};<br><br>Array.Sort(people);<br><br>foreach&nbsp;(var&nbsp;person&nbsp;in&nbsp;people)<br>&nbsp;&nbsp;&nbsp;Console.Write($"{person}&nbsp;");<br><br>//&nbsp;Alice&nbsp;Bob&nbsp;Kate&nbsp;Sam&nbsp;Tom&nbsp;Tom</code></pre>
     </div>
     <p class="paragraph">Această metodă are multe suprascrieri. De exemplu, una dintre versiuni permite sortarea doar a unei părți din array:</p>
     <div class="code-inline">
      <pre><code>string[]&nbsp;people&nbsp;=&nbsp;{&nbsp;"Tom",&nbsp;"Sam",&nbsp;"Bob",&nbsp;"Kate",&nbsp;"Tom",&nbsp;"Alice"&nbsp;};<br><br>//&nbsp;sortăm&nbsp;3&nbsp;elemente&nbsp;începând&nbsp;cu&nbsp;indexul&nbsp;1<br>Array.Sort(people,&nbsp;1,&nbsp;3);<br><br>foreach&nbsp;(var&nbsp;person&nbsp;in&nbsp;people)<br>&nbsp;&nbsp;&nbsp;Console.Write($"{person}&nbsp;");<br><br>//&nbsp;Tom&nbsp;Bob&nbsp;Kate&nbsp;Sam&nbsp;Tom&nbsp;Alice</code></pre>
     </div>
     <h2 class="subtitle">Căutarea indexului unui element</h2>
     <div class="code-inline">
      <pre><code><br>string[]&nbsp;people&nbsp;=&nbsp;{&nbsp;"Tom",&nbsp;"Sam",&nbsp;"Bob",&nbsp;"Kate",&nbsp;"Tom",&nbsp;"Alice"&nbsp;};<br><br>//&nbsp;găsim&nbsp;indexul&nbsp;primei&nbsp;apariții&nbsp;a&nbsp;elementului&nbsp;"Tom"<br>int&nbsp;tomFirstIndex&nbsp;=&nbsp;Array.IndexOf(people,&nbsp;"Tom");<br>//&nbsp;găsim&nbsp;indexul&nbsp;ultimei&nbsp;apariții&nbsp;a&nbsp;elementului&nbsp;"Tom"<br>int&nbsp;tomLastIndex&nbsp;=&nbsp;Array.LastIndexOf(people,&nbsp;"Tom");<br>//&nbsp;găsim&nbsp;indexul&nbsp;primei&nbsp;apariții&nbsp;a&nbsp;unui&nbsp;element&nbsp;cu&nbsp;lungimea&nbsp;șirului&nbsp;mai&nbsp;mare&nbsp;de&nbsp;3<br>int&nbsp;lengthFirstIndex&nbsp;=&nbsp;Array.FindIndex(people,&nbsp;person&nbsp;=&gt;&nbsp;person.Length&nbsp;&gt;&nbsp;3);<br>//&nbsp;găsim&nbsp;indexul&nbsp;ultimei&nbsp;apariții&nbsp;a&nbsp;unui&nbsp;element&nbsp;cu&nbsp;lungimea&nbsp;șirului&nbsp;mai&nbsp;mare&nbsp;de&nbsp;3<br>int&nbsp;lengthLastIndex&nbsp;=&nbsp;Array.FindLastIndex(people,&nbsp;person&nbsp;=&gt;&nbsp;person.Length&nbsp;&gt;&nbsp;3);<br><br>Console.WriteLine($"tomFirstIndex:&nbsp;{tomFirstIndex}");&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;0<br>Console.WriteLine($"tomLastIndex:&nbsp;{tomLastIndex}");&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;4<br>Console.WriteLine($"lengthFirstIndex:&nbsp;{lengthFirstIndex}");&nbsp;//&nbsp;3<br>Console.WriteLine($"lengthLastIndex:&nbsp;{lengthLastIndex}");&nbsp;&nbsp;&nbsp;//&nbsp;5<br><br>//&nbsp;găsim&nbsp;indexul&nbsp;elementului&nbsp;"Bob"<br>//&nbsp;pentru&nbsp;căutare&nbsp;binară,&nbsp;colecția&nbsp;trebuie&nbsp;să&nbsp;fie&nbsp;sortată<br>Array.Sort(people);&nbsp;//&nbsp;Alice&nbsp;Bob&nbsp;Kate&nbsp;Sam&nbsp;Tom&nbsp;Tom<br>int&nbsp;bobIndex&nbsp;=&nbsp;Array.BinarySearch(people,&nbsp;"Bob");<br>Console.WriteLine($"bobIndex:&nbsp;{bobIndex}");&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;1</code></pre>
     </div>
     <p class="paragraph">Dacă elementul nu este găsit în array, metodele returnează -1.</p>
     <h2 class="subtitle">Căutarea unui element după o condiție</h2>
     <div class="code-inline">
      <pre><code>string[]&nbsp;people&nbsp;=&nbsp;{&nbsp;"Tom",&nbsp;"Sam",&nbsp;"Bob",&nbsp;"Kate",&nbsp;"Tom",&nbsp;"Alice"&nbsp;};<br><br>//&nbsp;găsim&nbsp;primul&nbsp;și&nbsp;ultimul&nbsp;element&nbsp;unde&nbsp;lungimea&nbsp;șirului&nbsp;este&nbsp;mai&nbsp;mare&nbsp;de&nbsp;3&nbsp;caractere<br>string?&nbsp;first&nbsp;=&nbsp;Array.Find(people,&nbsp;person&nbsp;=&gt;&nbsp;person.Length&nbsp;&gt;&nbsp;3);<br>Console.WriteLine(first);&nbsp;//&nbsp;Kate<br>string?&nbsp;last&nbsp;=&nbsp;Array.FindLast(people,&nbsp;person&nbsp;=&gt;&nbsp;person.Length&nbsp;&gt;&nbsp;3);<br>Console.WriteLine(last);&nbsp;//&nbsp;Alice<br><br>//&nbsp;găsim&nbsp;elementele&nbsp;cu&nbsp;lungimea&nbsp;șirului&nbsp;egală&nbsp;cu&nbsp;3<br>string[]&nbsp;group&nbsp;=&nbsp;Array.FindAll(people,&nbsp;person&nbsp;=&gt;&nbsp;person.Length&nbsp;==&nbsp;3);<br>foreach&nbsp;(var&nbsp;person&nbsp;in&nbsp;group)&nbsp;Console.WriteLine(person);<br>//&nbsp;Tom&nbsp;Sam&nbsp;Bob&nbsp;Tom</code></pre>
     </div>
     <h2 class="subtitle">Modificarea ordinii elementelor din array</h2>
     <p class="paragraph">De exemplu, să inversăm ordinea elementelor:</p>
     <div class="code-inline">
      <pre><code>string[]&nbsp;people&nbsp;=&nbsp;{&nbsp;"Tom",&nbsp;"Sam",&nbsp;"Bob",&nbsp;"Kate",&nbsp;"Tom",&nbsp;"Alice"&nbsp;};<br><br>Array.Reverse(people);<br><br>foreach&nbsp;(var&nbsp;person&nbsp;in&nbsp;people)<br>&nbsp;&nbsp;&nbsp;Console.Write($"{person}&nbsp;");<br>//&nbsp;Alice&nbsp;Tom&nbsp;Kate&nbsp;Bob&nbsp;Sam&nbsp;Tom</code></pre>
     </div>
     <p class="paragraph">De asemenea, putem inversa ordinea doar pentru o parte din elemente:</p>
     <div class="code-inline">
      <pre><code>string[]&nbsp;people&nbsp;=&nbsp;{&nbsp;"Tom",&nbsp;"Sam",&nbsp;"Bob",&nbsp;"Kate",&nbsp;"Tom",&nbsp;"Alice"&nbsp;};<br><br>//&nbsp;inversăm&nbsp;ordinea&nbsp;a&nbsp;3&nbsp;elemente&nbsp;începând&nbsp;cu&nbsp;indexul&nbsp;1<br>Array.Reverse(people,&nbsp;1,&nbsp;3);<br><br>foreach&nbsp;(var&nbsp;person&nbsp;in&nbsp;people)<br>&nbsp;&nbsp;&nbsp;Console.Write($"{person}&nbsp;");<br>//&nbsp;Tom&nbsp;Kate&nbsp;Bob&nbsp;Sam&nbsp;Tom&nbsp;Alice</code></pre>
     </div>
     <h2 class="subtitle">Modificarea dimensiunii array-ului</h2>
     <p class="paragraph">Pentru a modifica dimensiunea unui array, se folosește metoda Resize. Primul parametru este array-ul de modificat, iar al doilea parametru este numărul de elemente care ar trebui să fie în array.</p>
     <p class="paragraph">Dacă al doilea parametru este mai mic decât lungimea array-ului, array-ul va fi trunchiat. Dacă valoarea parametrului este mai mare, array-ul va fi completat cu elemente suplimentare cu valoarea implicită. Primul parametru este transmis prin referință:</p>
     <div class="code-inline">
      <pre><code>string[]&nbsp;people&nbsp;=&nbsp;{&nbsp;"Tom",&nbsp;"Sam",&nbsp;"Bob",&nbsp;"Kate",&nbsp;"Tom",&nbsp;"Alice"&nbsp;};<br><br>//&nbsp;reduc&nbsp;dimensiunea&nbsp;array-ului&nbsp;la&nbsp;4&nbsp;elemente<br>Array.Resize(ref&nbsp;people,&nbsp;4);<br><br>foreach&nbsp;(var&nbsp;person&nbsp;in&nbsp;people)<br>&nbsp;&nbsp;&nbsp;Console.Write($"{person}&nbsp;");<br>//&nbsp;Tom&nbsp;Sam&nbsp;Bob&nbsp;Kate</code></pre>
     </div>
     <h2 class="subtitle">Copierea unui array</h2>
     <p class="paragraph">Metoda Copy copiază o parte dintr-un array în altul:</p>
     <div class="code-inline">
      <pre><code>string[]&nbsp;people&nbsp;=&nbsp;{&nbsp;"Tom",&nbsp;"Sam",&nbsp;"Bob",&nbsp;"Kate",&nbsp;"Tom",&nbsp;"Alice"&nbsp;};<br><br>var&nbsp;employees&nbsp;=&nbsp;new&nbsp;string[3];<br><br>//&nbsp;copiem&nbsp;3&nbsp;elemente&nbsp;din&nbsp;array-ul&nbsp;people&nbsp;începând&nbsp;de&nbsp;la&nbsp;indexul&nbsp;1<br>//&nbsp;și&nbsp;le&nbsp;inserăm&nbsp;în&nbsp;array-ul&nbsp;employees&nbsp;începând&nbsp;de&nbsp;la&nbsp;indexul&nbsp;0<br>Array.Copy(people,&nbsp;1,&nbsp;employees,&nbsp;0,&nbsp;3);<br><br>foreach&nbsp;(var&nbsp;person&nbsp;in&nbsp;employees)<br>&nbsp;&nbsp;&nbsp;Console.Write($"{person}&nbsp;");<br>//&nbsp;Sam&nbsp;Bob&nbsp;Kate</code></pre>
     </div>
     <p class="paragraph">În acest exemplu, copiem 3 elemente din array-ul people începând de la indexul 1 și le inserăm în array-ul employees începând de la indexul 0.</p>
    </div>
   </main>
   <aside class="ad-section">
    <div class="ad-box">
     <p>Google Ad Here</p>
    </div>
    <div class="ad-box">
     <p>Promo: SQL Beginner Guide</p>
    </div>
   </aside>
  </div>
  <div class="lesson-navigation">
   <th:block th:if="${previousLesson != null}">
    <a th:href="@{'/lectii/' +
            ${#strings.toLowerCase(#strings.replace(previousLesson.chapter.topic.name, ' ', '-'))} + '/' +
            ${#strings.toLowerCase(#strings.replace(previousLesson.chapter.title, ' ', '-'))} + '/' +
            ${#strings.toLowerCase(#strings.replace(previousLesson.title, ' ', '-'))} }" class="nav-button">← Lecția anterioară</a>
   </th:block> <th:block th:if="${nextLesson != null}">
    <a th:href="@{'/lectii/' +
            ${#strings.toLowerCase(#strings.replace(nextLesson.chapter.topic.name, ' ', '-'))} + '/' +
            ${#strings.toLowerCase(#strings.replace(nextLesson.chapter.title, ' ', '-'))} + '/' +
            ${#strings.toLowerCase(#strings.replace(nextLesson.title, ' ', '-'))} }" class="nav-button">Lecția următoare →</a>
   </th:block>
  </div>
  <div th:replace="~{fragments/footer :: footer}"></div>
  <script th:src="@{/js/script.js}" defer></script>
 </body>
</html>
