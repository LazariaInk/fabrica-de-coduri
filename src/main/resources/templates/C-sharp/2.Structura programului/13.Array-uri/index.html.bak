<!doctype html>
<html lang="ro" xmlns:th="http://www.w3.org/1999/xhtml">
 <head>
    <script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-4253419731329045"
            crossorigin="anonymous"></script>


  <link rel="canonical" th:href="${canonicalUrl}" />

    <link rel="icon" type="image/png" href="/nume-aplicatie/images/favicon.png">
    <script async src="https://www.googletagmanager.com/gtag/js?id=G-7Q2536ZKL2"></script>
    <script>
      window.dataLayer = window.dataLayer || [];
      window.gtag = function () { dataLayer.push(arguments); };
      gtag('consent', 'default', {
        'wait_for_update': 500,
        'region': ['RO'],
        'ad_storage': 'denied',
        'analytics_storage': 'denied',
        'ad_user_data': 'denied',
        'ad_personalization': 'denied'
      });
      gtag('js', new Date());
      gtag('config', 'G-7Q2536ZKL2');
    </script>


  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title th:text="${lesson.title}">Lesson</title>
  <link rel="stylesheet" th:href="@{/css/styles.css}">
  <style>
        body {
            background: #ffffff;
        }
    </style>
 </head>
 <body th:with="activeTopic='C-sharp', activeChapter='2.Structura programului', activeLesson='13.Array-uri'">
  <button class="mobile-sidebar-toggle" onclick="toggleMobileSidebar()">☰</button>
  <div th:replace="~{fragments/nav :: nav}"></div>
  <div class="top-nav">
   <th:block th:each="topic : ${topics}">
    <a th:href="@{'/lectii/topic/' + ${topic.id}}" th:text="${topic.name}" th:classappend="${topic.id} == ${activeTopicId} ? 'active' : ''"> </a>
   </th:block>
  </div>
  <div class="layout">
   <div class="mobile-sidebar" id="mobileSidebar">
    <button class="close-btn" onclick="toggleSidebar()">✖</button>
    <ul class="chapter-list">
     <th:block th:each="chapter : ${chapters}">
      <li class="chapter-item" th:classappend="${chapter.id} == ${activeChapterId} ? 'open' : ''">
       <div class="chapter-title" onclick="toggleChapter(this)">
        <strong th:text="${chapter.title}"></strong> <span class="arrow">▼</span>
       </div>
       <ul class="lesson-list">
        <th:block th:each="lesson : ${chapter.lessons}">
         <li><a th:href="@{'/lectii/' +
    ${#strings.toLowerCase(#strings.replace(chapter.topic.name, ' ', '-'))} + '/' +
    ${#strings.toLowerCase(#strings.replace(chapter.title, ' ', '-'))} + '/' +
    ${#strings.toLowerCase(#strings.replace(lesson.title, ' ', '-'))} }" th:text="${lesson.title}" th:classappend="${lesson.id} == ${activeLessonId} ? 'active' : ''"> </a></li>
        </th:block>
       </ul></li>
     </th:block>
    </ul>
   </div>
   <aside class="sidebar">
    <ul class="sidebar-list">
     <th:block th:each="chapter : ${chapters}">
      <li class="chapter-item" th:classappend="${chapter.id} == ${activeChapterId} ? 'open' : ''">
       <div class="chapter-toggle" onclick="toggleLessons(this)">
        <span th:text="${chapter.title}">Chapter</span>
       </div>
       <ul class="lesson-list hidden">
        <th:block th:each="lesson : ${chapter.lessons}">
         <li><a th:href="@{'/lectii/' +
    ${#strings.toLowerCase(#strings.replace(chapter.topic.name, ' ', '-'))} + '/' +
    ${#strings.toLowerCase(#strings.replace(chapter.title, ' ', '-'))} + '/' +
    ${#strings.toLowerCase(#strings.replace(lesson.title, ' ', '-'))} }" th:text="${lesson.title}" th:classappend="${lesson.id} == ${activeLessonId} ? 'active' : ''"> </a></li>
        </th:block>
       </ul></li>
     </th:block>
    </ul>
   </aside>
   <main class="content">
    <div class="document-container">
     <h1 class="main-title">Array-uri</h1>
     <p class="paragraph">Array-ul reprezintă un set de date de același tip. Declarația unui array este similară cu declarația unei variabile, cu excepția că după specificarea tipului se folosesc paranteze pătrate:</p>
     <div class="code-inline">
      <pre><code>tip_variabilă[]&nbsp;nume_array;</code></pre>
     </div>
     <p class="paragraph">De exemplu, să definim un array de numere întregi:</p>
     <div class="code-inline">
      <pre><code>int[]&nbsp;numbers;</code></pre>
     </div>
     <p class="paragraph">După definirea variabilei array, îi putem atribui o anumită valoare:</p>
     <div class="code-inline">
      <pre><code>int[]&nbsp;nums&nbsp;=&nbsp;new&nbsp;int[4];</code></pre>
     </div>
     <p class="paragraph">Aici am declarat array-ul nums, care va stoca date de tip int. Apoi, folosind operația new, am alocat memorie pentru 4 elemente ale array-ului: new int[4]. Numărul 4 este numit lungimea array-ului. În cazul unei astfel de declarații, toate elementele primesc valoarea implicită prevăzută pentru tipul lor. Pentru tipul int, valoarea implicită este 0.</p>
     <p class="paragraph">De asemenea, putem specifica imediat valorile pentru aceste elemente:</p>
     <div class="code-inline">
      <pre><code>int[]&nbsp;nums2&nbsp;=&nbsp;new&nbsp;int[4]&nbsp;{&nbsp;1,&nbsp;2,&nbsp;3,&nbsp;5&nbsp;};<br>int[]&nbsp;nums3&nbsp;=&nbsp;new&nbsp;int[]&nbsp;{&nbsp;1,&nbsp;2,&nbsp;3,&nbsp;5&nbsp;};<br>int[]&nbsp;nums4&nbsp;=&nbsp;new[]&nbsp;{&nbsp;1,&nbsp;2,&nbsp;3,&nbsp;5&nbsp;};<br>int[]&nbsp;nums5&nbsp;=&nbsp;{&nbsp;1,&nbsp;2,&nbsp;3,&nbsp;5&nbsp;};</code></pre>
     </div>
     <p class="paragraph">Toate metodele menționate mai sus sunt echivalente.</p>
     <p class="paragraph">În mod similar, putem defini array-uri de alte tipuri, de exemplu, un array de valori de tip string:</p>
     <div class="code-inline">
      <pre><code>string[]&nbsp;people&nbsp;=&nbsp;{&nbsp;"Tom",&nbsp;"Sam",&nbsp;"Bob"&nbsp;};</code></pre>
     </div>
     <p class="paragraph">Începând cu versiunea C# 12, pentru definirea array-urilor se pot folosi expresii de colecții, care presupun plasarea elementelor array-ului între paranteze pătrate:</p>
     <div class="code-inline">
      <pre><code>int[]&nbsp;nums1&nbsp;=&nbsp;[&nbsp;1,&nbsp;2,&nbsp;3,&nbsp;5&nbsp;];<br>int[]&nbsp;nums2&nbsp;=&nbsp;[];&nbsp;&nbsp;&nbsp;//&nbsp;array&nbsp;gol</code></pre>
     </div>
     <h2 class="subtitle">Indexuri și obținerea elementelor din array</h2>
     <p class="paragraph">Pentru accesarea elementelor din array se folosesc indexuri. Indexul reprezintă numărul elementului în array, iar numerotarea începe de la zero, astfel încât indexul primului element va fi 0, indexul celui de-al patrulea element - 3.</p>
     <p class="paragraph">Folosind indexuri, putem obține elementele array-ului:</p>
     <div class="code-inline">
      <pre><code>int[]&nbsp;numbers&nbsp;=&nbsp;{&nbsp;1,&nbsp;2,&nbsp;3,&nbsp;5&nbsp;};<br><br>//&nbsp;obținerea&nbsp;unui&nbsp;element&nbsp;din&nbsp;array<br>Console.WriteLine(numbers[3]);&nbsp;&nbsp;//&nbsp;5<br><br>//&nbsp;obținerea&nbsp;unui&nbsp;element&nbsp;din&nbsp;array&nbsp;într-o&nbsp;variabilă<br>var&nbsp;n&nbsp;=&nbsp;numbers[1];&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;2<br>Console.WriteLine(n);&nbsp;&nbsp;//&nbsp;2</code></pre>
     </div>
     <p class="paragraph">De asemenea, putem modifica un element din array folosind indexul:</p>
     <div class="code-inline">
      <pre><code>int[]&nbsp;numbers&nbsp;=&nbsp;{&nbsp;1,&nbsp;2,&nbsp;3,&nbsp;5&nbsp;};<br><br>//&nbsp;modificăm&nbsp;al&nbsp;doilea&nbsp;element&nbsp;din&nbsp;array<br>numbers[1]&nbsp;=&nbsp;505;<br><br>Console.WriteLine(numbers[1]);&nbsp;&nbsp;//&nbsp;505</code></pre>
     </div>
     <p class="paragraph">Și, deoarece array-ul nostru este definit doar pentru 4 elemente, nu putem accesa, de exemplu, al șaselea element. Dacă încercăm să facem acest lucru, vom primi o eroare în timpul execuției:</p>
     <div class="code-inline">
      <pre><code>int[]&nbsp;numbers&nbsp;=&nbsp;{&nbsp;1,&nbsp;2,&nbsp;3,&nbsp;5&nbsp;};<br><br>Console.WriteLine(numbers[6]);&nbsp;&nbsp;//&nbsp;!&nbsp;Eroare&nbsp;-&nbsp;în&nbsp;array&nbsp;sunt&nbsp;doar&nbsp;4&nbsp;elemente</code></pre>
     </div>
     <h2 class="subtitle">Proprietatea Length și lungimea array-ului</h2>
     <p class="paragraph">Fiecare array are proprietatea Length, care stochează lungimea array-ului. De exemplu, să obținem lungimea array-ului numbers:</p>
     <div class="code-inline">
      <pre><code>int[]&nbsp;numbers&nbsp;=&nbsp;{&nbsp;1,&nbsp;2,&nbsp;3,&nbsp;5&nbsp;};<br><br>Console.WriteLine(numbers.Length);&nbsp;&nbsp;//&nbsp;4</code></pre>
     </div>
     <p class="paragraph">Pentru obținerea lungimii array-ului, după numele array-ului se folosește punctul urmat de proprietatea Length: numbers.Length.</p>
     <h2 class="subtitle">Obținerea elementelor de la sfârșitul array-ului</h2>
     <p class="paragraph">Datorită existenței proprietății Length, putem calcula indexul ultimului element al array-ului - aceasta este lungimea array-ului minus 1. De exemplu, dacă lungimea array-ului este 4 (adică array-ul are 4 elemente), indexul ultimului element va fi 3. Și, folosind proprietatea Length, putem obține cu ușurință elementele de la sfârșitul array-ului:</p>
     <div class="code-inline">
      <pre><code>int[]&nbsp;numbers&nbsp;=&nbsp;{&nbsp;1,&nbsp;2,&nbsp;3,&nbsp;5&nbsp;};<br><br>Console.WriteLine(numbers[numbers.Length&nbsp;-&nbsp;1]);&nbsp;&nbsp;//&nbsp;5&nbsp;-&nbsp;primul&nbsp;de&nbsp;la&nbsp;sfârșit&nbsp;sau&nbsp;ultimul&nbsp;element<br>Console.WriteLine(numbers[numbers.Length&nbsp;-&nbsp;2]);&nbsp;&nbsp;//&nbsp;3&nbsp;-&nbsp;al&nbsp;doilea&nbsp;de&nbsp;la&nbsp;sfârșit&nbsp;sau&nbsp;penultimul&nbsp;element<br>Console.WriteLine(numbers[numbers.Length&nbsp;-&nbsp;3]);&nbsp;&nbsp;//&nbsp;2&nbsp;-&nbsp;al&nbsp;treilea&nbsp;element&nbsp;de&nbsp;la&nbsp;sfârșit</code></pre>
     </div>
     <p class="paragraph">Totuși, în acest mod, expresiile de tipul numbers.Length - 1, al căror scop este să obțină un anumit element de la sfârșitul array-ului, îngreunează codul. Și, începând cu versiunea C# 8.0, a fost adăugat un operator special ^, care permite specificarea indexului relativ la sfârșitul colecției.</p>
     <p class="paragraph">Să rescriem exemplul anterior folosind operatorul ^:</p>
     <div class="code-inline">
      <pre><code>int[]&nbsp;numbers&nbsp;=&nbsp;{&nbsp;1,&nbsp;2,&nbsp;3,&nbsp;5&nbsp;};<br><br>Console.WriteLine(numbers[^1]);&nbsp;&nbsp;//&nbsp;5&nbsp;-&nbsp;primul&nbsp;de&nbsp;la&nbsp;sfârșit&nbsp;sau&nbsp;ultimul&nbsp;element<br>Console.WriteLine(numbers[^2]);&nbsp;&nbsp;//&nbsp;3&nbsp;-&nbsp;al&nbsp;doilea&nbsp;de&nbsp;la&nbsp;sfârșit&nbsp;sau&nbsp;penultimul&nbsp;element<br>Console.WriteLine(numbers[^3]);&nbsp;&nbsp;//&nbsp;2&nbsp;-&nbsp;al&nbsp;treilea&nbsp;element&nbsp;de&nbsp;la&nbsp;sfârșit</code></pre>
     </div>
     <h2 class="subtitle">Parcurgerea array-urilor</h2>
     <p class="paragraph">Pentru parcurgerea array-urilor putem folosi diferite tipuri de cicluri. De exemplu, ciclul foreach:</p>
     <div class="code-inline">
      <pre><code>int[]&nbsp;numbers&nbsp;=&nbsp;{&nbsp;1,&nbsp;2,&nbsp;3,&nbsp;4,&nbsp;5&nbsp;};<br>foreach&nbsp;(int&nbsp;i&nbsp;în&nbsp;numbers)<br>{<br>&nbsp;&nbsp;&nbsp;Console.WriteLine(i);<br>}</code></pre>
     </div>
     <p class="paragraph">Aici, array-ul de date de tip int acționează ca un container. Prin urmare, declarăm o variabilă de tip int.</p>
     <p class="paragraph">Acțiuni similare putem face și folosind ciclul for:</p>
     <div class="code-inline">
      <pre><code>int[]&nbsp;numbers&nbsp;=&nbsp;{&nbsp;1,&nbsp;2,&nbsp;3,&nbsp;4,&nbsp;5&nbsp;};<br>for&nbsp;(int&nbsp;i&nbsp;=&nbsp;0;&nbsp;i&nbsp;&lt;&nbsp;numbers.Length;&nbsp;i++)<br>{<br>&nbsp;&nbsp;&nbsp;Console.WriteLine(numbers[i]);<br>}</code></pre>
     </div>
     <p class="paragraph">În același timp, ciclul for este mai flexibil în comparație cu foreach. Dacă foreach extrage secvențial elementele containerului și doar pentru citire, în ciclul for putem sărim peste câteva elemente înainte, în funcție de incrementul contorului, și putem modifica elementele:</p>
     <div class="code-inline">
      <pre><code>int[]&nbsp;numbers&nbsp;=&nbsp;{&nbsp;1,&nbsp;2,&nbsp;3,&nbsp;4,&nbsp;5&nbsp;};<br>for&nbsp;(int&nbsp;i&nbsp;=&nbsp;0;&nbsp;i&nbsp;&lt;&nbsp;numbers.Length;&nbsp;i++)<br>{<br>&nbsp;&nbsp;&nbsp;numbers[i]&nbsp;=&nbsp;numbers[i]&nbsp;*&nbsp;2;<br>&nbsp;&nbsp;&nbsp;Console.WriteLine(numbers[i]);<br>}</code></pre>
     </div>
     <p class="paragraph">De asemenea, putem folosi și alte tipuri de cicluri, de exemplu, while:</p>
     <div class="code-inline">
      <pre><code>int[]&nbsp;numbers&nbsp;=&nbsp;{&nbsp;1,&nbsp;2,&nbsp;3,&nbsp;4,&nbsp;5&nbsp;};<br>int&nbsp;i&nbsp;=&nbsp;0;<br>while&nbsp;(i&nbsp;&lt;&nbsp;numbers.Length)<br>{<br>&nbsp;&nbsp;&nbsp;Console.WriteLine(numbers[i]);<br>&nbsp;&nbsp;&nbsp;i++;<br>}</code></pre>
     </div>
     <h2 class="subtitle">Array-uri multidimensionale</h2>
     <p class="paragraph">Array-urile sunt caracterizate de un concept numit rang sau numărul de dimensiuni. Mai sus, am discutat despre array-uri care au o singură dimensiune (adică rangul lor este 1) - astfel de array-uri pot fi reprezentate ca un rând (linie sau coloană) de elemente. Dar array-urile pot fi și multidimensionale. Astfel de array-uri au un număr de dimensiuni (adică rangul) mai mare de 1.</p>
     <p class="paragraph">Array-urile care au două dimensiuni (rangul este 2) sunt numite bidimensionale. De exemplu, să creăm array-uri unidimensionale și bidimensionale, care au aceleași elemente:</p>
     <div class="code-inline">
      <pre><code>int[]&nbsp;nums1&nbsp;=&nbsp;new&nbsp;int[]&nbsp;{&nbsp;0,&nbsp;1,&nbsp;2,&nbsp;3,&nbsp;4,&nbsp;5&nbsp;};<br>int[,]&nbsp;nums2&nbsp;=&nbsp;{&nbsp;{&nbsp;0,&nbsp;1,&nbsp;2&nbsp;},&nbsp;{&nbsp;3,&nbsp;4,&nbsp;5&nbsp;}&nbsp;};</code></pre>
     </div>
     <p class="paragraph">Vizual, ambele array-uri pot fi reprezentate astfel:</p>
     <ul class="enumeration">
      <li>Array unidimensional nums1:</li>
     </ul>
     <div class="image-container">
      <img th:src="@{/images/2.Structura%20programului/13.Array-uri/images/image1.png}" alt="" class="responsive-image">
     </div>
     <ul class="enumeration">
      <li>Array bidimensional nums2:</li>
     </ul>
     <div class="image-container">
      <img th:src="@{/images/2.Structura%20programului/13.Array-uri/images/image2.png}" alt="" class="responsive-image">
     </div>
     <p class="paragraph">Deoarece array-ul nums2 este bidimensional, el reprezintă un tabel simplu. Toate metodele posibile de definire a array-urilor bidimensionale:</p>
     <div class="code-inline">
      <pre><code>int[,]&nbsp;nums1;<br>int[,]&nbsp;nums2&nbsp;=&nbsp;new&nbsp;int[2,&nbsp;3];<br>int[,]&nbsp;nums3&nbsp;=&nbsp;new&nbsp;int[2,&nbsp;3]&nbsp;{&nbsp;{&nbsp;0,&nbsp;1,&nbsp;2&nbsp;},&nbsp;{&nbsp;3,&nbsp;4,&nbsp;5&nbsp;}&nbsp;};<br>int[,]&nbsp;nums4&nbsp;=&nbsp;new&nbsp;int[,]&nbsp;{&nbsp;{&nbsp;0,&nbsp;1,&nbsp;2&nbsp;},&nbsp;{&nbsp;3,&nbsp;4,&nbsp;5&nbsp;}&nbsp;};<br>int[,]&nbsp;nums5&nbsp;=&nbsp;new&nbsp;[,]{&nbsp;{&nbsp;0,&nbsp;1,&nbsp;2&nbsp;},&nbsp;{&nbsp;3,&nbsp;4,&nbsp;5&nbsp;}&nbsp;};<br>int[,]&nbsp;nums6&nbsp;=&nbsp;{&nbsp;{&nbsp;0,&nbsp;1,&nbsp;2&nbsp;},&nbsp;{&nbsp;3,&nbsp;4,&nbsp;5&nbsp;}&nbsp;};</code></pre>
     </div>
     <p class="paragraph">Array-urile pot avea și mai multe dimensiuni. Declarația unui array tridimensional ar putea arăta astfel:</p>
     <div class="code-inline">
      <pre><code>int[,,]&nbsp;nums3&nbsp;=&nbsp;new&nbsp;int[2,&nbsp;3,&nbsp;4];</code></pre>
     </div>
     <p class="paragraph">Prin urmare, pot exista array-uri cu patru dimensiuni și array-uri cu un număr mai mare de dimensiuni. Dar în practică, de obicei sunt folosite array-uri unidimensionale și bidimensionale.</p>
     <p class="paragraph">O anumită dificultate poate fi reprezentată de parcurgerea unui array multidimensional. În primul rând, trebuie să ținem cont că lungimea unui astfel de array este numărul total de elemente.</p>
     <div class="code-inline">
      <pre><code>int[,]&nbsp;numbers&nbsp;=&nbsp;{&nbsp;{&nbsp;1,&nbsp;2,&nbsp;3&nbsp;},&nbsp;{&nbsp;4,&nbsp;5,&nbsp;6&nbsp;}&nbsp;};<br>foreach&nbsp;(int&nbsp;i&nbsp;în&nbsp;numbers)<br>&nbsp;&nbsp;&nbsp;Console.Write($"{i}&nbsp;");</code></pre>
     </div>
     <p class="paragraph">În acest caz, lungimea array-ului numbers este 6. Și ciclul foreach afișează toate elementele array-ului într-un rând:</p>
     <div class="code-inline">
      <pre><code>1&nbsp;2&nbsp;3&nbsp;4&nbsp;5&nbsp;6</code></pre>
     </div>
     <p class="paragraph">Dar ce se întâmplă dacă dorim să parcurgem fiecare rând al tabelului separat? În acest caz, trebuie să obținem numărul de elemente din dimensiune. În special, fiecare array are metoda GetUpperBound(număr_dimensiune), care returnează indexul ultimului element dintr-o anumită dimensiune. Și dacă vorbim despre un array bidimensional, prima dimensiune (cu indexul 0) este de fapt tabelul. Și cu ajutorul expresiei:</p>
     <div class="code-inline">
      <pre><code>numbers.GetUpperBound(0)&nbsp;+&nbsp;1</code></pre>
     </div>
     <p class="paragraph">Putem obține numărul de rânduri ale tabelului reprezentat de array-ul bidimensional. Iar prin:</p>
     <div class="code-inline">
      <pre><code>numbers.Length&nbsp;/&nbsp;număr_rânduri</code></pre>
     </div>
     <p class="paragraph">P utem obține numărul de elemente din fiecare rând:</p>
     <div class="code-inline">
      <pre><code>int[,]&nbsp;numbers&nbsp;=&nbsp;{&nbsp;{&nbsp;1,&nbsp;2,&nbsp;3&nbsp;},&nbsp;{&nbsp;4,&nbsp;5,&nbsp;6&nbsp;}&nbsp;};<br><br>int&nbsp;rows&nbsp;=&nbsp;numbers.GetUpperBound(0)&nbsp;+&nbsp;1;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;numărul&nbsp;de&nbsp;rânduri<br>int&nbsp;columns&nbsp;=&nbsp;numbers.Length&nbsp;/&nbsp;rows;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;numărul&nbsp;de&nbsp;coloane<br>//&nbsp;sau&nbsp;așa<br>//&nbsp;int&nbsp;columns&nbsp;=&nbsp;numbers.GetUpperBound(1)&nbsp;+&nbsp;1;<br><br>for&nbsp;(int&nbsp;i&nbsp;=&nbsp;0;&nbsp;i&nbsp;&lt;&nbsp;rows;&nbsp;i++)<br>{<br>&nbsp;&nbsp;&nbsp;for&nbsp;(int&nbsp;j&nbsp;=&nbsp;0;&nbsp;j&nbsp;&lt;&nbsp;columns;&nbsp;j++)<br>&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Console.Write($"{numbers[i,&nbsp;j]}&nbsp;\t");<br>&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;Console.WriteLine();<br>}</code></pre>
     </div>
     <div class="code-inline">
      <pre><code>1&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;2&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;3<br>4&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;5&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;6</code></pre>
     </div>
     <h2 class="subtitle">Array de array-uri</h2>
     <p class="paragraph">Array-urile multidimensionale trebuie deosebite de array-urile de array-uri sau așa-numitele "array-uri zimțate":</p>
     <div class="code-inline">
      <pre><code>int[][]&nbsp;nums&nbsp;=&nbsp;new&nbsp;int[3][];<br>nums[0]&nbsp;=&nbsp;new&nbsp;int[2]&nbsp;{&nbsp;1,&nbsp;2&nbsp;};&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;alocăm&nbsp;memorie&nbsp;pentru&nbsp;primul&nbsp;subarray<br>nums[1]&nbsp;=&nbsp;new&nbsp;int[3]&nbsp;{&nbsp;1,&nbsp;2,&nbsp;3&nbsp;};&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;alocăm&nbsp;memorie&nbsp;pentru&nbsp;al&nbsp;doilea&nbsp;subarray<br>nums[2]&nbsp;=&nbsp;new&nbsp;int[5]&nbsp;{&nbsp;1,&nbsp;2,&nbsp;3,&nbsp;4,&nbsp;5&nbsp;};&nbsp;//&nbsp;alocăm&nbsp;memorie&nbsp;pentru&nbsp;al&nbsp;treilea&nbsp;subarray</code></pre>
     </div>
     <p class="paragraph">Aici, două grupuri de paranteze pătrate indică faptul că este un array de array-uri, adică un astfel de array care, la rândul său, conține alte array-uri. Lungimea array-ului este specificată doar în primele paranteze pătrate, toate celelalte paranteze pătrate trebuie să fie goale: new int[3][]. În acest caz, array-ul nums conține trei array-uri. Dimensiunea fiecăruia dintre aceste array-uri poate să nu coincidă.</p>
     <p class="paragraph">Definirea alternativă a unui array de array-uri:</p>
     <div class="code-inline">
      <pre><code>int[][]&nbsp;numbers&nbsp;=&nbsp;{<br>&nbsp;&nbsp;&nbsp;new&nbsp;int[]&nbsp;{&nbsp;1,&nbsp;2&nbsp;},<br>&nbsp;&nbsp;&nbsp;new&nbsp;int[]&nbsp;{&nbsp;1,&nbsp;2,&nbsp;3&nbsp;},<br>&nbsp;&nbsp;&nbsp;new&nbsp;int[]&nbsp;{&nbsp;1,&nbsp;2,&nbsp;3,&nbsp;4,&nbsp;5&nbsp;}<br>};</code></pre>
     </div>
     <ul class="enumeration">
      <li>Array zimțat nums:</li>
     </ul>
     <div class="image-container">
      <img th:src="@{/images/2.Structura%20programului/13.Array-uri/images/image3.png}" alt="" class="responsive-image">
     </div>
     <p class="paragraph">Folosind cicluri imbricate, putem parcurge array-uri zimțate. De exemplu:</p>
     <div class="code-inline">
      <pre><code>int[][]&nbsp;numbers&nbsp;=&nbsp;new&nbsp;int[3][];<br>numbers[0]&nbsp;=&nbsp;new&nbsp;int[]&nbsp;{&nbsp;1,&nbsp;2&nbsp;};<br>numbers[1]&nbsp;=&nbsp;new&nbsp;int[]&nbsp;{&nbsp;1,&nbsp;2,&nbsp;3&nbsp;};<br>numbers[2]&nbsp;=&nbsp;new&nbsp;int[]&nbsp;{&nbsp;1,&nbsp;2,&nbsp;3,&nbsp;4,&nbsp;5&nbsp;};<br>foreach&nbsp;(int[]&nbsp;row&nbsp;în&nbsp;numbers)<br>{<br>&nbsp;&nbsp;&nbsp;foreach&nbsp;(int&nbsp;number&nbsp;în&nbsp;row)<br>&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Console.Write($"{number}&nbsp;\t");<br>&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;Console.WriteLine();<br>}<br><br>//&nbsp;parcurgerea&nbsp;folosind&nbsp;ciclul&nbsp;for<br>for&nbsp;(int&nbsp;i&nbsp;=&nbsp;0;&nbsp;i&nbsp;&lt;&nbsp;numbers.Length;&nbsp;i++)<br>{<br>&nbsp;&nbsp;&nbsp;for&nbsp;(int&nbsp;j&nbsp;=&nbsp;0;&nbsp;j&nbsp;&lt;&nbsp;numbers[i].Length;&nbsp;j++)<br>&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Console.Write($"{numbers[i][j]}&nbsp;\t");<br>&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;Console.WriteLine();<br>}</code></pre>
     </div>
     <h2 class="subtitle">Principalele concepte ale array-urilor</h2>
     <p class="paragraph">Să sumarizăm principalele concepte ale array-urilor:</p>
     <ul class="enumeration">
      <li>Rang (rank): numărul de dimensiuni ale array-ului</li>
      <li>Lungimea dimensiunii (dimension length): lungimea unei dimensiuni a array-ului</li>
      <li>Lungimea array-ului (array length): numărul total de elemente ale array-ului</li>
     </ul>
     <p class="paragraph">De exemplu, să luăm array-ul:</p>
     <div class="code-inline">
      <pre><code>int[,]&nbsp;numbers&nbsp;=&nbsp;new&nbsp;int[3,&nbsp;4];</code></pre>
     </div>
     <p class="paragraph">Array-ul numbers este bidimensional, adică are două dimensiuni, astfel că rangul său este 2. Lungimea primei dimensiuni este 3, lungimea celei de-a doua dimensiuni este 4. Lungimea array-ului (adică numărul total de elemente) este 12.</p>
    </div>
   </main>
   <aside class="ad-section">
    <div class="ad-box">
     <p>Google Ad Here</p>
    </div>
    <div class="ad-box">
     <p>Promo: SQL Beginner Guide</p>
    </div>
   </aside>
  </div>
  <div class="lesson-navigation">
   <th:block th:if="${previousLesson != null}">
    <a th:href="@{'/lectii/' +
            ${#strings.toLowerCase(#strings.replace(previousLesson.chapter.topic.name, ' ', '-'))} + '/' +
            ${#strings.toLowerCase(#strings.replace(previousLesson.chapter.title, ' ', '-'))} + '/' +
            ${#strings.toLowerCase(#strings.replace(previousLesson.title, ' ', '-'))} }" class="nav-button">← Lecția anterioară</a>
   </th:block> <th:block th:if="${nextLesson != null}">
    <a th:href="@{'/lectii/' +
            ${#strings.toLowerCase(#strings.replace(nextLesson.chapter.topic.name, ' ', '-'))} + '/' +
            ${#strings.toLowerCase(#strings.replace(nextLesson.chapter.title, ' ', '-'))} + '/' +
            ${#strings.toLowerCase(#strings.replace(nextLesson.title, ' ', '-'))} }" class="nav-button">Lecția următoare →</a>
   </th:block>
  </div>
  <div th:replace="~{fragments/footer :: footer}"></div>
  <script th:src="@{/js/script.js}" defer></script>
 </body>
</html>
