<!doctype html>
<html lang="ro" xmlns:th="http://www.w3.org/1999/xhtml">
 <head>
    <link rel="icon" type="image/png" href="/nume-aplicatie/images/favicon.png">
    <script async src="https://www.googletagmanager.com/gtag/js?id=G-7Q2536ZKL2"></script>
    <script>
      window.dataLayer = window.dataLayer || [];
      window.gtag = function () { dataLayer.push(arguments); };
      gtag('consent', 'default', {
        'wait_for_update': 500,
        'region': ['RO'],
        'ad_storage': 'denied',
        'analytics_storage': 'denied',
        'ad_user_data': 'denied',
        'ad_personalization': 'denied'
      });
      gtag('js', new Date());
      gtag('config', 'G-7Q2536ZKL2');
    </script>


  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title th:text="${lesson.title}">Lesson</title>
  <link rel="stylesheet" th:href="@{/css/styles.css}">
  <style>
        body {
            background: #ffffff;
        }
    </style>
 </head>
 <body th:with="activeTopic='C-sharp', activeChapter='2.Structura programului', activeLesson='12.Cicluri'">
  <button class="mobile-sidebar-toggle" onclick="toggleMobileSidebar()">☰</button>
  <div th:replace="~{fragments/nav :: nav}"></div>
  <div class="top-nav">
   <th:block th:each="topic : ${topics}">
    <a th:href="@{'/lectii/topic/' + ${topic.id}}" th:text="${topic.name}" th:classappend="${topic.id} == ${activeTopicId} ? 'active' : ''"> </a>
   </th:block>
  </div>
  <div class="layout">
   <div class="mobile-sidebar" id="mobileSidebar">
    <button class="close-btn" onclick="toggleSidebar()">✖</button>
    <ul class="chapter-list">
     <th:block th:each="chapter : ${chapters}">
      <li class="chapter-item" th:classappend="${chapter.id} == ${activeChapterId} ? 'open' : ''">
       <div class="chapter-title" onclick="toggleChapter(this)">
        <strong th:text="${chapter.title}"></strong> <span class="arrow">▼</span>
       </div>
       <ul class="lesson-list">
        <th:block th:each="lesson : ${chapter.lessons}">
         <li><a th:href="@{'/lessons/' +
    ${#strings.toLowerCase(#strings.replace(chapter.topic.name, ' ', '-'))} + '/' +
    ${#strings.toLowerCase(#strings.replace(chapter.title, ' ', '-'))} + '/' +
    ${#strings.toLowerCase(#strings.replace(lesson.title, ' ', '-'))} }" th:text="${lesson.title}" th:classappend="${lesson.id} == ${activeLessonId} ? 'active' : ''"> </a></li>
        </th:block>
       </ul></li>
     </th:block>
    </ul>
   </div>
   <aside class="sidebar">
    <ul class="sidebar-list">
     <th:block th:each="chapter : ${chapters}">
      <li class="chapter-item" th:classappend="${chapter.id} == ${activeChapterId} ? 'open' : ''">
       <div class="chapter-toggle" onclick="toggleLessons(this)">
        <span th:text="${chapter.title}">Chapter</span>
       </div>
       <ul class="lesson-list hidden">
        <th:block th:each="lesson : ${chapter.lessons}">
         <li><a th:href="@{'/lessons/' +
    ${#strings.toLowerCase(#strings.replace(chapter.topic.name, ' ', '-'))} + '/' +
    ${#strings.toLowerCase(#strings.replace(chapter.title, ' ', '-'))} + '/' +
    ${#strings.toLowerCase(#strings.replace(lesson.title, ' ', '-'))} }" th:text="${lesson.title}" th:classappend="${lesson.id} == ${activeLessonId} ? 'active' : ''"> </a></li>
        </th:block>
       </ul></li>
     </th:block>
    </ul>
   </aside>
   <main class="content">
    <div class="document-container">
     <h1 class="main-title">Cicluri</h1>
     <p class="paragraph">Ciclurile sunt construcții de control care permit, în funcție de anumite condiții, executarea unei acțiuni de mai multe ori. În C# există următoarele tipuri de cicluri:</p>
     <ul class="enumeration">
      <li>for</li>
      <li>foreach</li>
      <li>while</li>
      <li>do...while</li>
     </ul>
     <h2 class="subtitle">Ciclu for</h2>
     <p class="paragraph">Ciclul for are următoarea definiție formală:</p>
     <div class="code-inline">
      <pre><code>for&nbsp;([acțiuni&nbsp;înainte&nbsp;de&nbsp;execuția&nbsp;ciclului];&nbsp;[condiție];&nbsp;[acțiuni&nbsp;după&nbsp;execuție])<br>{<br>&nbsp;&nbsp;&nbsp;//&nbsp;acțiuni<br>}</code></pre>
     </div>
     <p class="paragraph">Declarația ciclului for constă din trei părți. Prima parte a declarației ciclului - unele acțiuni care se execută o singură dată înainte de execuția ciclului. De obicei, aici se definesc variabilele care vor fi utilizate în ciclu.</p>
     <p class="paragraph">A doua parte - condiția la care va rula ciclul. Atâta timp cât condiția este adevărată, ciclul va rula.</p>
     <p class="paragraph">Și a treia parte - unele acțiuni care se execută după terminarea blocului ciclului. Aceste acțiuni se execută de fiecare dată la terminarea blocului ciclului.</p>
     <p class="paragraph">După declarația ciclului, în acolade se plasează acțiunile ciclului.</p>
     <p class="paragraph">Să luăm în considerare un ciclu for standard:</p>
     <div class="code-inline">
      <pre><code>for&nbsp;(int&nbsp;i&nbsp;=&nbsp;1;&nbsp;i&nbsp;&lt;&nbsp;4;&nbsp;i++)<br>{<br>&nbsp;&nbsp;&nbsp;Console.WriteLine(i);<br>}</code></pre>
     </div>
     <p class="paragraph">Aici prima parte a declarației ciclului - int i = 1 - creează și inițializează variabila i.</p>
     <p class="paragraph">A doua parte - condiția i &lt; 4. Adică, atâta timp cât variabila i este mai mică decât 4, ciclul se va executa.</p>
     <p class="paragraph">Și a treia parte - acțiunile care se execută după terminarea acțiunilor din blocul ciclului - incrementarea variabilei i cu o unitate.</p>
     <p class="paragraph">Întregul proces al ciclului poate fi prezentat astfel:</p>
     <ul class="enumeration">
      <li>Se definește variabila int i = 1</li>
      <li>Se verifică condiția i &lt; 4. Este adevărată (deoarece 1 este mai mic decât 4), deci se execută blocul ciclului, și anume instrucțiunea Console.WriteLine(i), care afișează pe consolă valoarea variabilei i</li>
      <li>Blocul ciclului a terminat execuția, deci se execută a treia parte a declarației ciclului - i++. După aceasta, variabila i va fi egală cu 2</li>
      <li>Se verifică din nou condiția i &lt; 4. Este adevărată (deoarece 2 este mai mic decât 4), deci se execută din nou blocul ciclului - Console.WriteLine(i)</li>
      <li>Blocul ciclului a terminat execuția, deci se execută din nou expresia i++. După aceasta, variabila i va fi egală cu 3</li>
      <li>Se verifică din nou condiția i &lt; 4. Este adevărată (deoarece 3 este mai mic decât 4), deci se execută din nou blocul ciclului - Console.WriteLine(i)</li>
      <li>Blocul ciclului a terminat execuția, deci se execută din nou expresia i++. După aceasta, variabila i va fi egală cu 4</li>
      <li>Se verifică din nou condiția i &lt; 4. Acum returnează false, deoarece valoarea variabilei i NU este mai mică decât 4, deci ciclul se încheie. Se execută restul programului, care urmează după ciclu</li>
     </ul>
     <p class="paragraph">În final, blocul ciclului se va executa de 3 ori, până când valoarea i devine egală cu 4. Și de fiecare dată această valoare va fi incrementată cu 1. O singură execuție a blocului ciclului se numește iterație. Astfel, aici ciclul va efectua trei iterații. Rezultatul programului:</p>
     <div class="code-inline">
      <pre><code>1<br>2<br>3</code></pre>
     </div>
     <p class="paragraph">Dacă blocul ciclului for conține o singură instrucțiune, atunci putem să-l scurtăm, eliminând acoladele:</p>
     <div class="code-inline">
      <pre><code><br>for&nbsp;(int&nbsp;i&nbsp;=&nbsp;1;&nbsp;i&nbsp;&lt;&nbsp;4;&nbsp;i++)<br>&nbsp;&nbsp;&nbsp;Console.WriteLine(i);<br><br>//&nbsp;sau&nbsp;așa<br>for&nbsp;(int&nbsp;i&nbsp;=&nbsp;1;&nbsp;i&nbsp;&lt;&nbsp;4;&nbsp;i++)&nbsp;Console.WriteLine(i);</code></pre>
     </div>
     <p class="paragraph">Nu este obligatoriu ca în prima parte a ciclului să declarăm variabila, iar în a treia parte să îi schimbăm valoarea - acestea pot fi orice acțiuni. De exemplu:</p>
     <div class="code-inline">
      <pre><code>var&nbsp;i&nbsp;=&nbsp;1;<br><br>for&nbsp;(Console.WriteLine("Începutul&nbsp;execuției&nbsp;ciclului");&nbsp;i&nbsp;&lt;&nbsp;4;&nbsp;Console.WriteLine($"i&nbsp;=&nbsp;{i}"))<br>{<br>&nbsp;&nbsp;&nbsp;i++;<br>}</code></pre>
     </div>
     <p class="paragraph">Aici din nou ciclul se execută atâta timp cât variabila i este mai mică de 4, doar că incrementarea variabilei i are loc în blocul ciclului. Ieșirea pe consolă a acestui program:</p>
     <div class="code-inline">
      <pre><code>Începutul&nbsp;execuției&nbsp;ciclului<br>i&nbsp;=&nbsp;2<br>i&nbsp;=&nbsp;3<br>i&nbsp;=&nbsp;4</code></pre>
     </div>
     <p class="paragraph">Nu este obligatoriu să specificăm toate condițiile în declarația ciclului. De exemplu, putem scrie astfel:</p>
     <div class="code-inline">
      <pre><code>int&nbsp;i&nbsp;=&nbsp;1;<br>for&nbsp;(;&nbsp;;)<br>{<br>&nbsp;&nbsp;&nbsp;Console.WriteLine($"i&nbsp;=&nbsp;{i}");<br>&nbsp;&nbsp;&nbsp;i++;<br>}<br><br></code></pre>
     </div>
     <p class="paragraph">Declarația formală a ciclului a rămas aceeași, doar că acum blocurile din declarație sunt goale: for (; ;). Nu avem o variabilă inițializată, nu avem o condiție, deci ciclul va rula la infinit - ciclu infinit.</p>
     <p class="paragraph">Putem de asemenea să omitem unele blocuri:</p>
     <div class="code-inline">
      <pre><code>int&nbsp;i&nbsp;=&nbsp;1;<br>for&nbsp;(;&nbsp;i&nbsp;&lt;&nbsp;4;)<br>{<br>&nbsp;&nbsp;&nbsp;Console.WriteLine($"i&nbsp;=&nbsp;{i}");<br>&nbsp;&nbsp;&nbsp;i++;<br>}<br><br></code></pre>
     </div>
     <p class="paragraph">Acest exemplu este echivalent cu primul exemplu: avem de asemenea o variabilă contor, doar că este definită în afara ciclului. Avem o condiție de execuție a ciclului. Și avem incrementarea variabilei deja în blocul for.</p>
     <p class="paragraph">De asemenea, putem defini mai multe variabile în declarația ciclului:</p>
     <div class="code-inline">
      <pre><code>for&nbsp;(int&nbsp;i&nbsp;=&nbsp;1,&nbsp;j&nbsp;=&nbsp;1;&nbsp;i&nbsp;&lt;&nbsp;10;&nbsp;i++,&nbsp;j++)<br>&nbsp;&nbsp;&nbsp;Console.WriteLine($"{i&nbsp;*&nbsp;j}");</code></pre>
     </div>
     <p class="paragraph">Aici, în prima parte a declarației ciclului, sunt definite două variabile: i și j. Ciclul se execută până când i va fi egală cu 10. După fiecare iterație, variabilele i și j sunt incrementate cu o unitate. Ieșirea pe consolă a programului:</p>
     <div class="code-inline">
      <pre><code>1<br>4<br>9<br>16<br>25<br>36<br>49<br>64<br>81</code></pre>
     </div>
     <h2 class="subtitle">Ciclu do..while</h2>
     <p class="paragraph">În ciclul do, mai întâi se execută codul ciclului, apoi se verifică condiția în instrucțiunea while. Și atâta timp cât această condiție este adevărată, ciclul se repetă.</p>
     <div class="code-inline">
      <pre><code>do<br>{<br>&nbsp;&nbsp;&nbsp;acțiuni&nbsp;ale&nbsp;ciclului<br>}<br>while&nbsp;(condiție)</code></pre>
     </div>
     <p class="paragraph">De exemplu:</p>
     <div class="code-inline">
      <pre><code>int&nbsp;i&nbsp;=&nbsp;6;<br>do<br>{<br>&nbsp;&nbsp;&nbsp;Console.WriteLine(i);<br>&nbsp;&nbsp;&nbsp;i--;<br>}<br>while&nbsp;(i&nbsp;&gt;&nbsp;0);</code></pre>
     </div>
     <p class="paragraph">Aici codul ciclului se va executa de 6 ori, până când i devine egal cu zero. Dar este important de menționat că ciclul do garantează cel puțin o execuție a acțiunilor, chiar dacă condiția din instrucțiunea while nu este adevărată. Adică putem scrie:</p>
     <div class="code-inline">
      <pre><code>int&nbsp;i&nbsp;=&nbsp;-1;<br>do<br>{<br>&nbsp;&nbsp;&nbsp;Console.WriteLine(i);<br>&nbsp;&nbsp;&nbsp;i--;<br>}<br>while&nbsp;(i&nbsp;&gt;&nbsp;0);</code></pre>
     </div>
     <p class="paragraph">Deși variabila i este mai mică decât 0, ciclul se va executa totuși o dată.</p>
     <h2 class="subtitle">Ciclu while</h2>
     <p class="paragraph">Spre deosebire de ciclul do, ciclul while verifică imediat veridicitatea unei condiții și, dacă condiția este adevărată, codul ciclului se execută:</p>
     <div class="code-inline">
      <pre><code>while&nbsp;(condiție)<br>{<br>&nbsp;&nbsp;&nbsp;acțiuni&nbsp;ale&nbsp;ciclului<br>}</code></pre>
     </div>
     <p class="paragraph">De exemplu:</p>
     <div class="code-inline">
      <pre><code>int&nbsp;i&nbsp;=&nbsp;6;<br>while&nbsp;(i&nbsp;&gt;&nbsp;0)<br>{<br>&nbsp;&nbsp;&nbsp;Console.WriteLine(i);<br>&nbsp;&nbsp;&nbsp;i--;<br>}</code></pre>
     </div>
     <h2 class="subtitle">Ciclu foreach</h2>
     <p class="paragraph">Ciclul foreach este destinat pentru parcurgerea unui set sau colecții de elemente. Definiția sa generală:</p>
     <div class="code-inline">
      <pre><code>foreach&nbsp;(tip_date&nbsp;variabilă&nbsp;in&nbsp;colecție)<br>{<br>&nbsp;&nbsp;&nbsp;//&nbsp;acțiuni&nbsp;ale&nbsp;ciclului<br>}</code></pre>
     </div>
     <p class="paragraph">După operatorul foreach, în paranteze, mai întâi se face definiția variabilei. Apoi cuvântul cheie in și ulterior colecția, ale cărei elemente trebuie parcurse.</p>
     <p class="paragraph">La execuție, ciclul parcurge secvențial elementele colecției și le plasează în variabilă, și astfel, în blocul ciclului putem efectua unele acțiuni cu ele.</p>
     <p class="paragraph">De exemplu, să luăm un șir. Un șir, în esență, este o colecție de caractere. Și .NET permite parcurgerea tuturor elementelor șirului - a caracterelor sale, folosind ciclul foreach.</p>
     <div class="code-inline">
      <pre><code>foreach&nbsp;(char&nbsp;c&nbsp;in&nbsp;"Tom")<br>{<br>&nbsp;&nbsp;&nbsp;Console.WriteLine(c);<br>}</code></pre>
     </div>
     <p class="paragraph">Aici ciclul foreach parcurge toate caracterele șirului "Tom" și plasează fiecare caracter în variabila de tip char c. În blocul ciclului, valoarea variabilei c este afișată pe consolă. Deoarece șirul "Tom" are trei caractere, ciclul se va executa de trei ori. Ieșirea pe consolă a programului:</p>
     <div class="code-inline">
      <pre><code>T<br>o<br>m</code></pre>
     </div>
     <p class="paragraph">Este important de menționat că variabila definită în declarația ciclului trebuie să corespundă tipului de date al elementelor colecției parcurse. Astfel, elementele șirului - sunt valori de tip char - caractere. De aceea, variabila c este de tip char. Totuși, în realitate, nu este întotdeauna evident ce tip reprezintă elementele colecției. În acest caz, putem defini variabila folosind operatorul var:</p>
     <div class="code-inline">
      <pre><code>foreach&nbsp;(var&nbsp;c&nbsp;in&nbsp;"Tom")<br>{<br>&nbsp;&nbsp;&nbsp;Console.WriteLine(c);<br>}</code></pre>
     </div>
     <p class="paragraph">În continuare, vom analiza mai detaliat ce sunt colecțiile în .NET și ce colecții pot fi parcurse folosind ciclul foreach.</p>
     <h2 class="subtitle">Operatorii continue și break</h2>
     <p class="paragraph">Uneori apare situația în care trebuie să ieșim din ciclu fără a aștepta terminarea acestuia. În acest caz, putem folosi operatorul break.</p>
     <p class="paragraph">De exemplu:</p>
     <div class="code-inline">
      <pre><code>for&nbsp;(int&nbsp;i&nbsp;=&nbsp;0;&nbsp;i&nbsp;&lt;&nbsp;9;&nbsp;i++)<br>{<br>&nbsp;&nbsp;&nbsp;if&nbsp;(i&nbsp;==&nbsp;5)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;break;<br>&nbsp;&nbsp;&nbsp;Console.WriteLine(i);<br>}</code></pre>
     </div>
     <p class="paragraph">Deși în condiția ciclului se spune că ciclul va rula până când contorul i va atinge valoarea 9, în realitate ciclul se va executa de 5 ori. Deoarece când contorul i atinge valoarea 5, se va executa operatorul break și ciclul se va încheia.</p>
     <div class="code-inline">
      <pre><code>0<br>1<br>2<br>3<br>4</code></pre>
     </div>
     <p class="paragraph">Acum să ne propunem altă sarcină. Ce se întâmplă dacă dorim ca la verificare ciclul să nu se încheie, ci doar să sară peste iterația curentă. Pentru aceasta putem folosi operatorul continue:</p>
     <div class="code-inline">
      <pre><code>for&nbsp;(int&nbsp;i&nbsp;=&nbsp;0;&nbsp;i&nbsp;&lt;&nbsp;9;&nbsp;i++)<br>{<br>&nbsp;&nbsp;&nbsp;if&nbsp;(i&nbsp;==&nbsp;5)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;continue;<br>&nbsp;&nbsp;&nbsp;Console.WriteLine(i);<br>}</code></pre>
     </div>
     <p class="paragraph">În acest caz, ciclul, când ajunge la numărul 5, care nu satisface condiția de verificare, doar va sări peste acest număr și va trece la iterația următoare:</p>
     <div class="code-inline">
      <pre><code>0<br>1<br>2<br>3<br>4<br>6<br>7<br>8</code></pre>
     </div>
     <p class="paragraph">Este important de menționat că operatorii break și continue pot fi aplicați în orice tip de ciclu.</p>
     <h2 class="subtitle">Cicluri imbricate</h2>
     <p class="paragraph">Un ciclu poate fi imbricat într-alt ciclu. De exemplu:</p>
     <div class="code-inline">
      <pre><code>for&nbsp;(int&nbsp;i&nbsp;=&nbsp;1;&nbsp;i&nbsp;&lt;&nbsp;10;&nbsp;i++)<br>{<br>&nbsp;&nbsp;&nbsp;for&nbsp;(int&nbsp;j&nbsp;=&nbsp;1;&nbsp;j&nbsp;&lt;&nbsp;10;&nbsp;j++)<br>&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Console.Write($"{i&nbsp;*&nbsp;j}&nbsp;\t");<br>&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;Console.WriteLine();<br>}</code></pre>
     </div>
     <p class="paragraph">În acest caz, ciclul for (int i = 1; i &lt; 10; i++) se execută de 9 ori, adică are 9 iterații. Dar în cadrul fiecărei iterații se execută de 9 ori ciclul imbricat for (int j = 1; j &lt; 10; j++). În final, acest program va afișa tabla înmulțirii.</p>
    </div>
   </main>
   <aside class="ad-section">
    <div class="ad-box">
     <p>Google Ad Here</p>
    </div>
    <div class="ad-box">
     <p>Promo: SQL Beginner Guide</p>
    </div>
   </aside>
  </div>
  <div class="lesson-navigation">
   <th:block th:if="${previousLesson != null}">
    <a th:href="@{'/lessons/' +
            ${#strings.toLowerCase(#strings.replace(previousLesson.chapter.topic.name, ' ', '-'))} + '/' +
            ${#strings.toLowerCase(#strings.replace(previousLesson.chapter.title, ' ', '-'))} + '/' +
            ${#strings.toLowerCase(#strings.replace(previousLesson.title, ' ', '-'))} }" class="nav-button">← Lecția anterioară</a>
   </th:block> <th:block th:if="${nextLesson != null}">
    <a th:href="@{'/lessons/' +
            ${#strings.toLowerCase(#strings.replace(nextLesson.chapter.topic.name, ' ', '-'))} + '/' +
            ${#strings.toLowerCase(#strings.replace(nextLesson.chapter.title, ' ', '-'))} + '/' +
            ${#strings.toLowerCase(#strings.replace(nextLesson.title, ' ', '-'))} }" class="nav-button">Lecția următoare →</a>
   </th:block>
  </div>
  <div th:replace="~{fragments/footer :: footer}"></div>
  <script th:src="@{/js/script.js}" defer></script>
 </body>
</html>
