<!doctype html>
<html lang="ro" xmlns:th="http://www.w3.org/1999/xhtml">
 <head>
    <script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-4253419731329045"
            crossorigin="anonymous"></script>


  <link rel="canonical" th:href="${canonicalUrl}" />

    <link rel="icon" type="image/png" href="/nume-aplicatie/images/favicon.png">
    <script async src="https://www.googletagmanager.com/gtag/js?id=G-7Q2536ZKL2"></script>
    <script>
      window.dataLayer = window.dataLayer || [];
      window.gtag = function () { dataLayer.push(arguments); };
      gtag('consent', 'default', {
        'wait_for_update': 500,
        'region': ['RO'],
        'ad_storage': 'denied',
        'analytics_storage': 'denied',
        'ad_user_data': 'denied',
        'ad_personalization': 'denied'
      });
      gtag('js', new Date());
      gtag('config', 'G-7Q2536ZKL2');
    </script>


  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title th:text="${lesson.title}">Lesson</title>
  <link rel="stylesheet" th:href="@{/css/styles.css}">
  <style>
        body {
            background: #ffffff;
        }
    </style>
 </head>
 <body th:with="activeTopic='C-sharp', activeChapter='2.Structura programului', activeLesson='23.Enumeratii in C-sharp'">
  <button class="mobile-sidebar-toggle" onclick="toggleMobileSidebar()">☰</button>
  <div th:replace="~{fragments/nav :: nav}"></div>
  <div class="top-nav">
   <th:block th:each="topic : ${topics}">
    <a th:href="@{'/lectii/topic/' + ${topic.id}}" th:text="${topic.name}" th:classappend="${topic.id} == ${activeTopicId} ? 'active' : ''"> </a>
   </th:block>
  </div>
  <div class="layout">
   <div class="mobile-sidebar" id="mobileSidebar">
    <button class="close-btn" onclick="toggleSidebar()">✖</button>
    <ul class="chapter-list">
     <th:block th:each="chapter : ${chapters}">
      <li class="chapter-item" th:classappend="${chapter.id} == ${activeChapterId} ? 'open' : ''">
       <div class="chapter-title" onclick="toggleChapter(this)">
        <strong th:text="${chapter.title}"></strong> <span class="arrow">▼</span>
       </div>
       <ul class="lesson-list">
        <th:block th:each="lesson : ${chapter.lessons}">
         <li><a th:href="@{'/lectii/' +
    ${#strings.toLowerCase(#strings.replace(chapter.topic.name, ' ', '-'))} + '/' +
    ${#strings.toLowerCase(#strings.replace(chapter.title, ' ', '-'))} + '/' +
    ${#strings.toLowerCase(#strings.replace(lesson.title, ' ', '-'))} }" th:text="${lesson.title}" th:classappend="${lesson.id} == ${activeLessonId} ? 'active' : ''"> </a></li>
        </th:block>
       </ul></li>
     </th:block>
    </ul>
   </div>
   <aside class="sidebar">
    <ul class="sidebar-list">
     <th:block th:each="chapter : ${chapters}">
      <li class="chapter-item" th:classappend="${chapter.id} == ${activeChapterId} ? 'open' : ''">
       <div class="chapter-toggle" onclick="toggleLessons(this)">
        <span th:text="${chapter.title}">Chapter</span>
       </div>
       <ul class="lesson-list hidden">
        <th:block th:each="lesson : ${chapter.lessons}">
         <li><a th:href="@{'/lectii/' +
    ${#strings.toLowerCase(#strings.replace(chapter.topic.name, ' ', '-'))} + '/' +
    ${#strings.toLowerCase(#strings.replace(chapter.title, ' ', '-'))} + '/' +
    ${#strings.toLowerCase(#strings.replace(lesson.title, ' ', '-'))} }" th:text="${lesson.title}" th:classappend="${lesson.id} == ${activeLessonId} ? 'active' : ''"> </a></li>
        </th:block>
       </ul></li>
     </th:block>
    </ul>
   </aside>
   <main class="content">
    <div class="document-container">
     <h1 class="main-title">Enumerații în C#</h1>
     <p class="paragraph">În afară de tipurile de date primitive, în limbajul de programare C# există tipul enum sau enumerare. Enumerațiile reprezintă un set de constante logic legate.</p>
     <p class="paragraph">Declarația unei enumerații se face folosind operatorul enum:</p>
     <div class="code-inline">
      <pre><code>enum&nbsp;NumeEnumeratie<br>{<br>&nbsp;&nbsp;&nbsp;Valoare1,<br>&nbsp;&nbsp;&nbsp;Valoare2,<br>&nbsp;&nbsp;&nbsp;//&nbsp;.......<br>&nbsp;&nbsp;&nbsp;ValoareN<br>}</code></pre>
     </div>
     <p class="paragraph">După cuvântul cheie enum urmează numele enumerației. Apoi, în acolade, sunt enumerate constantel.</p>
     <p class="paragraph">Declarația unei enumerații simple:</p>
     <div class="code-inline">
      <pre><code>enum&nbsp;DayTime<br>{<br>&nbsp;&nbsp;&nbsp;Morning,<br>&nbsp;&nbsp;&nbsp;Afternoon,<br>&nbsp;&nbsp;&nbsp;Evening,<br>&nbsp;&nbsp;&nbsp;Night<br>}</code></pre>
     </div>
     <p class="paragraph">Aici este definită enumerația DayTime, care are patru valori: Morning, Afternoon, Evening și Night.</p>
     <p class="paragraph">Fiecare enumerație definește de fapt un nou tip de date, cu ajutorul căruia putem declara variabile, constante, parametri de metodă etc. Valoarea unei variabile, constante sau parametru de metodă care reprezintă o enumerație trebuie să fie una dintre constantele acestei enumerații:</p>
     <div class="code-inline">
      <pre><code>const&nbsp;DayTime&nbsp;dayTime&nbsp;=&nbsp;DayTime.Morning;</code></pre>
     </div>
     <p class="paragraph">În program, putem folosi astfel de variabile/constante/parametri ca orice alte tipuri:</p>
     <div class="code-inline">
      <pre><code>DayTime&nbsp;dayTime&nbsp;=&nbsp;DayTime.Morning;<br><br>if(dayTime&nbsp;==&nbsp;DayTime.Morning)<br>&nbsp;&nbsp;&nbsp;Console.WriteLine("Bună&nbsp;dimineața");<br>else<br>&nbsp;&nbsp;&nbsp;Console.WriteLine("Salut");<br><br>enum&nbsp;DayTime<br>{<br>&nbsp;&nbsp;&nbsp;Morning,<br>&nbsp;&nbsp;&nbsp;Afternoon,<br>&nbsp;&nbsp;&nbsp;Evening,<br>&nbsp;&nbsp;&nbsp;Night<br>}</code></pre>
     </div>
     <h2 class="subtitle">Stocarea stării</h2>
     <p class="paragraph">Adesea, o variabilă de tip enumerație acționează ca un depozit de stare, în funcție de care se efectuează anumite acțiuni:</p>
     <div class="code-inline">
      <pre><code>DayTime&nbsp;now&nbsp;=&nbsp;DayTime.Evening;<br><br>PrintMessage(now);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;Bună&nbsp;seara<br>PrintMessage(DayTime.Afternoon);&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;Bună&nbsp;ziua<br>PrintMessage(DayTime.Night);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;Noapte&nbsp;bună<br><br>void&nbsp;PrintMessage(DayTime&nbsp;dayTime)<br>{<br>&nbsp;&nbsp;&nbsp;switch&nbsp;(dayTime)<br>&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;case&nbsp;DayTime.Morning:<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Console.WriteLine("Bună&nbsp;dimineața");<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;break;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;case&nbsp;DayTime.Afternoon:<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Console.WriteLine("Bună&nbsp;ziua");<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;break;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;case&nbsp;DayTime.Evening:<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Console.WriteLine("Bună&nbsp;seara");<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;break;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;case&nbsp;DayTime.Night:<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Console.WriteLine("Noapte&nbsp;bună");<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;break;<br>&nbsp;&nbsp;&nbsp;}<br>}<br><br>enum&nbsp;DayTime<br>{<br>&nbsp;&nbsp;&nbsp;Morning,<br>&nbsp;&nbsp;&nbsp;Afternoon,<br>&nbsp;&nbsp;&nbsp;Evening,<br>&nbsp;&nbsp;&nbsp;Night<br>}</code></pre>
     </div>
     <p class="paragraph">Aici metoda PrintMessage() primește ca parametru o valoare de tipul enumerației DayTime și, în funcție de această valoare, afișează un mesaj corespunzător.</p>
     <p class="paragraph">Alt exemplu:</p>
     <div class="code-inline">
      <pre><code>DoOperation(10,&nbsp;5,&nbsp;Operation.Add);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;15<br>DoOperation(10,&nbsp;5,&nbsp;Operation.Subtract);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;5<br>DoOperation(10,&nbsp;5,&nbsp;Operation.Multiply);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;50<br>DoOperation(10,&nbsp;5,&nbsp;Operation.Divide);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;2<br><br>void&nbsp;DoOperation(double&nbsp;x,&nbsp;double&nbsp;y,&nbsp;Operation&nbsp;op)<br>{<br>&nbsp;&nbsp;&nbsp;double&nbsp;result&nbsp;=&nbsp;op&nbsp;switch<br>&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Operation.Add&nbsp;=&gt;&nbsp;x&nbsp;+&nbsp;y,<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Operation.Subtract&nbsp;=&gt;&nbsp;x&nbsp;-&nbsp;y,<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Operation.Multiply&nbsp;=&gt;&nbsp;x&nbsp;*&nbsp;y,<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Operation.Divide&nbsp;=&gt;&nbsp;x&nbsp;/&nbsp;y,<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;_&nbsp;=&gt;&nbsp;0<br>&nbsp;&nbsp;&nbsp;};<br>&nbsp;&nbsp;&nbsp;Console.WriteLine(result);<br>}<br><br>enum&nbsp;Operation<br>{<br>&nbsp;&nbsp;&nbsp;Add,<br>&nbsp;&nbsp;&nbsp;Subtract,<br>&nbsp;&nbsp;&nbsp;Multiply,<br>&nbsp;&nbsp;&nbsp;Divide<br>}</code></pre>
     </div>
     <p class="paragraph">Aici este definită enumerația Operation, care reprezintă operațiile aritmetice. Fiecare tip de operație este definit ca una dintre constantele enumerației. De asemenea, este definită metoda DoOperation(), care primește doi operanzi și un tip de operație și, în funcție de acest tip, returnează rezultatul operației respective.</p>
     <h2 class="subtitle">Tipul și valorile constantelor enumerației</h2>
     <p class="paragraph">Constantele enumerației pot avea un tip specific. Tipul este specificat după numele enumerației, folosind două puncte:</p>
     <div class="code-inline">
      <pre><code>enum&nbsp;Time&nbsp;:&nbsp;byte<br>{<br>&nbsp;&nbsp;&nbsp;Morning,<br>&nbsp;&nbsp;&nbsp;Afternoon,<br>&nbsp;&nbsp;&nbsp;Evening,<br>&nbsp;&nbsp;&nbsp;Night<br>}</code></pre>
     </div>
     <p class="paragraph">Tipul enumerației trebuie să fie un tip întreg (byte, sbyte, short, ushort, int, uint, long, ulong). Dacă tipul nu este specificat explicit, implicit este int.</p>
     <p class="paragraph">Tipul afectează valorile pe care le pot avea constantele. Implicit, fiecărui element al enumerației i se atribuie o valoare întreagă, primul element având valoarea 0, al doilea - 1 și așa mai departe. De exemplu, să luăm enumerația DayTime definită anterior:</p>
     <div class="code-inline">
      <pre><code>DayTime&nbsp;now&nbsp;=&nbsp;DayTime.Morning;<br><br>Console.WriteLine((int)&nbsp;now);&nbsp;&nbsp;//&nbsp;0<br>Console.WriteLine((int)&nbsp;DayTime.Night);&nbsp;&nbsp;//&nbsp;3<br><br>enum&nbsp;DayTime<br>{<br>&nbsp;&nbsp;&nbsp;Morning,<br>&nbsp;&nbsp;&nbsp;Afternoon,<br>&nbsp;&nbsp;&nbsp;Evening,<br>&nbsp;&nbsp;&nbsp;Night<br>}</code></pre>
     </div>
     <p class="paragraph">Putem folosi operația de conversie pentru a obține valoarea întreagă a unei constante din enumerație:</p>
     <div class="code-inline">
      <pre><code>(int)&nbsp;DayTime.Night&nbsp;//&nbsp;3</code></pre>
     </div>
     <p class="paragraph">Cu toate acestea, nu putem atribui o valoare numerică direct unei variabile de tip enumerație:</p>
     <div class="code-inline">
      <pre><code>DayTime&nbsp;now&nbsp;=&nbsp;2;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;!&nbsp;Eroare</code></pre>
     </div>
     <p class="paragraph">Putem specifica explicit valorile elementelor, fie specificând valoarea primului element:</p>
     <div class="code-inline">
      <pre><code>enum&nbsp;DayTime<br>{<br>&nbsp;&nbsp;&nbsp;Morning&nbsp;=&nbsp;3,&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;fiecare&nbsp;element&nbsp;următor&nbsp;crește&nbsp;automat&nbsp;cu&nbsp;unu<br>&nbsp;&nbsp;&nbsp;Afternoon,&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;acest&nbsp;element&nbsp;are&nbsp;valoarea&nbsp;4<br>&nbsp;&nbsp;&nbsp;Evening,&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;5<br>&nbsp;&nbsp;&nbsp;Night&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;6<br>}</code></pre>
     </div>
     <p class="paragraph">Sau putem specifica valorile pentru toate elementele:</p>
     <div class="code-inline">
      <pre><code>enum&nbsp;DayTime<br>{<br>&nbsp;&nbsp;&nbsp;Morning&nbsp;=&nbsp;2,<br>&nbsp;&nbsp;&nbsp;Afternoon&nbsp;=&nbsp;4,<br>&nbsp;&nbsp;&nbsp;Evening&nbsp;=&nbsp;8,<br>&nbsp;&nbsp;&nbsp;Night&nbsp;=&nbsp;16<br>}</code></pre>
     </div>
     <p class="paragraph">Constantele enumerației pot avea aceleași valori sau putem atribui unei constante valoarea alteia:</p>
     <div class="code-inline">
      <pre><code>enum&nbsp;DayTime<br>{<br>&nbsp;&nbsp;&nbsp;Morning&nbsp;=&nbsp;1,<br>&nbsp;&nbsp;&nbsp;Afternoon&nbsp;=&nbsp;Morning,<br>&nbsp;&nbsp;&nbsp;Evening&nbsp;=&nbsp;2,<br>&nbsp;&nbsp;&nbsp;Night&nbsp;=&nbsp;2<br>}</code></pre>
     </div>
    </div>
   </main>
   <aside class="ad-section">
    <div class="ad-box">
     <p>Google Ad Here</p>
    </div>
    <div class="ad-box">
     <p>Promo: SQL Beginner Guide</p>
    </div>
   </aside>
  </div>
  <div class="lesson-navigation">
   <th:block th:if="${previousLesson != null}">
    <a th:href="@{'/lectii/' +
            ${#strings.toLowerCase(#strings.replace(previousLesson.chapter.topic.name, ' ', '-'))} + '/' +
            ${#strings.toLowerCase(#strings.replace(previousLesson.chapter.title, ' ', '-'))} + '/' +
            ${#strings.toLowerCase(#strings.replace(previousLesson.title, ' ', '-'))} }" class="nav-button">← Lecția anterioară</a>
   </th:block> <th:block th:if="${nextLesson != null}">
    <a th:href="@{'/lectii/' +
            ${#strings.toLowerCase(#strings.replace(nextLesson.chapter.topic.name, ' ', '-'))} + '/' +
            ${#strings.toLowerCase(#strings.replace(nextLesson.chapter.title, ' ', '-'))} + '/' +
            ${#strings.toLowerCase(#strings.replace(nextLesson.title, ' ', '-'))} }" class="nav-button">Lecția următoare →</a>
   </th:block>
  </div>
  <div th:replace="~{fragments/footer :: footer}"></div>
  <script th:src="@{/js/script.js}" defer></script>
 </body>
</html>
