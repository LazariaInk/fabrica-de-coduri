<!doctype html>
<html lang="ro" xmlns:th="http://www.w3.org/1999/xhtml">
 <head>
    <link rel="icon" type="image/png" href="/nume-aplicatie/images/favicon.png">
    <script async src="https://www.googletagmanager.com/gtag/js?id=G-7Q2536ZKL2"></script>
    <script>
      window.dataLayer = window.dataLayer || [];
      window.gtag = function () { dataLayer.push(arguments); };
      gtag('consent', 'default', {
        'wait_for_update': 500,
        'region': ['RO'],
        'ad_storage': 'denied',
        'analytics_storage': 'denied',
        'ad_user_data': 'denied',
        'ad_personalization': 'denied'
      });
      gtag('js', new Date());
      gtag('config', 'G-7Q2536ZKL2');
    </script>


  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title th:text="${lesson.title}">Lesson</title>
  <link rel="stylesheet" th:href="@{/css/styles.css}">
  <style>
        body {
            background: #ffffff;
        }
    </style>
 </head>
 <body th:with="activeTopic='C-sharp', activeChapter='2.Structura programului', activeLesson='1.Executarea programului'">
  <button class="mobile-sidebar-toggle" onclick="toggleMobileSidebar()">☰</button>
  <div th:replace="~{fragments/nav :: nav}"></div>
  <div class="top-nav">
   <th:block th:each="topic : ${topics}">
    <a th:href="@{'/lectii/topic/' + ${topic.id}}" th:text="${topic.name}" th:classappend="${topic.id} == ${activeTopicId} ? 'active' : ''"> </a>
   </th:block>
  </div>
  <div class="layout">
   <div class="mobile-sidebar" id="mobileSidebar">
    <button class="close-btn" onclick="toggleSidebar()">✖</button>
    <ul class="chapter-list">
     <th:block th:each="chapter : ${chapters}">
      <li class="chapter-item" th:classappend="${chapter.id} == ${activeChapterId} ? 'open' : ''">
       <div class="chapter-title" onclick="toggleChapter(this)">
        <strong th:text="${chapter.title}"></strong> <span class="arrow">▼</span>
       </div>
       <ul class="lesson-list">
        <th:block th:each="lesson : ${chapter.lessons}">
         <li><a th:href="@{'/lessons/' +
    ${#strings.toLowerCase(#strings.replace(chapter.topic.name, ' ', '-'))} + '/' +
    ${#strings.toLowerCase(#strings.replace(chapter.title, ' ', '-'))} + '/' +
    ${#strings.toLowerCase(#strings.replace(lesson.title, ' ', '-'))} }" th:text="${lesson.title}" th:classappend="${lesson.id} == ${activeLessonId} ? 'active' : ''"> </a></li>
        </th:block>
       </ul></li>
     </th:block>
    </ul>
   </div>
   <aside class="sidebar">
    <ul class="sidebar-list">
     <th:block th:each="chapter : ${chapters}">
      <li class="chapter-item" th:classappend="${chapter.id} == ${activeChapterId} ? 'open' : ''">
       <div class="chapter-toggle" onclick="toggleLessons(this)">
        <span th:text="${chapter.title}">Chapter</span>
       </div>
       <ul class="lesson-list hidden">
        <th:block th:each="lesson : ${chapter.lessons}">
         <li><a th:href="@{'/lessons/' +
    ${#strings.toLowerCase(#strings.replace(chapter.topic.name, ' ', '-'))} + '/' +
    ${#strings.toLowerCase(#strings.replace(chapter.title, ' ', '-'))} + '/' +
    ${#strings.toLowerCase(#strings.replace(lesson.title, ' ', '-'))} }" th:text="${lesson.title}" th:classappend="${lesson.id} == ${activeLessonId} ? 'active' : ''"> </a></li>
        </th:block>
       </ul></li>
     </th:block>
    </ul>
   </aside>
   <main class="content">
    <div class="document-container">
     <h1 class="main-title">Executarea programului</h1>
     <p class="paragraph">Întregul cod al programului în limbajul C# este plasat în fișiere cu extensia .cs. Implicit, în proiectul creat în Visual Studio (precum și atunci când se utilizează .NET CLI) există deja un fișier cu codul C# - fișierul Program.cs cu următorul conținut:</p>
     <div class="image-container">
      <img th:src="@{/images/2.Structura%20programului/1.Executarea%20programului/images/image1.png}" alt="" class="responsive-image">
     </div>
     <p class="paragraph">Codul din fișierul Program.cs este executat implicit atunci când lansăm proiectul. Cu toate acestea, putem adăuga și alte fișiere cu cod C# dacă este necesar.</p>
     <h2 class="subtitle">Instrucțiuni</h2>
     <p class="paragraph">Blocul de bază al unui program este instrucțiunea (statement). O instrucțiune reprezintă o acțiune, cum ar fi o operațiune aritmetică, un apel de metodă, declararea unei variabile și atribuirea unei valori. Fiecare instrucțiune în C# se termină cu punct și virgulă (;).</p>
     <p class="paragraph">Acest semn indică compilatorului sfârșitul instrucțiunii. De exemplu, în proiectul aplicației de consolă creat implicit, există următoarea linie:</p>
     <div class="code-inline">
      <pre><code>Console.WriteLine("Hello,&nbsp;World!");</code></pre>
     </div>
     <p class="paragraph">Această linie reprezintă apelul metodei Console.WriteLine, care afișează pe consolă un șir de caractere. În acest caz, apelul metodei este o instrucțiune și, prin urmare, se termină cu punct și virgulă.</p>
     <p class="paragraph">Un set de instrucțiuni poate fi combinat într-un bloc de cod. Blocul de cod este delimitat de acolade, iar instrucțiunile sunt plasate între acoladele deschise și închise. De exemplu, schimbăm codul din fișierul Program.cs astfel:</p>
     <div class="code-inline">
      <pre><code>{<br>&nbsp;&nbsp;&nbsp;Console.WriteLine("Salut");<br>&nbsp;&nbsp;&nbsp;Console.WriteLine("Bun&nbsp;venit&nbsp;în&nbsp;C#");<br>}</code></pre>
     </div>
     <div class="image-container">
      <img th:src="@{/images/2.Structura%20programului/1.Executarea%20programului/images/image2.png}" alt="" class="responsive-image">
     </div>
     <p class="paragraph">Aici, blocul de cod conține două instrucțiuni. La executarea acestui cod, consola va afișa două linii:</p>
     <div class="image-container">
      <img th:src="@{/images/2.Structura%20programului/1.Executarea%20programului/images/image3.png}" alt="" class="responsive-image">
     </div>
     <p class="paragraph">În acest bloc de cod, cele două instrucțiuni afișează pe consolă un anumit șir de caractere.</p>
     <p class="paragraph">Blocurile de cod pot conține alte blocuri:</p>
     <div class="code-inline">
      <pre><code>{<br>&nbsp;&nbsp;&nbsp;Console.WriteLine("Primul&nbsp;bloc");<br>&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Console.WriteLine("Al&nbsp;doilea&nbsp;bloc");<br>&nbsp;&nbsp;&nbsp;}<br>}</code></pre>
     </div>
     <h2 class="subtitle">Sensibilitatea la majuscule</h2>
     <p class="paragraph">C# este un limbaj sensibil la majuscule. Aceasta înseamnă că, în funcție de majuscule, anumite denumiri pot reprezenta clase, metode, variabile diferite etc. De exemplu, pentru afișarea pe consolă se utilizează metoda WriteLine - numele ei începe cu literă mare: "WriteLine". Dacă, în loc de "Console.WriteLine", scriem "Console.writeline", programul nu se va compila, deoarece metoda trebuie să se numească exact "WriteLine", nu "writeline" sau "WRITELINE" sau altfel.</p>
     <h2 class="subtitle">Comentarii</h2>
     <p class="paragraph">O parte importantă a codului programului sunt comentariile. Ele nu fac parte propriu-zis din program, la compilare sunt ignorate. Totuși, comentariile fac codul programului mai ușor de înțeles, ajutând la înțelegerea anumitor părți ale acestuia.</p>
     <p class="paragraph">Există două tipuri de comentarii: comentariu pe o singură linie și comentariu pe mai multe linii. Comentariul pe o singură linie este plasat pe o linie după două slash-uri //. Iar comentariul pe mai multe linii este delimitat de simbolurile /* textul comentariului */. Acesta poate fi plasat pe mai multe linii. De exemplu:</p>
     <div class="code-inline">
      <pre><code>/*<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;primul&nbsp;program&nbsp;în&nbsp;C#,<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;care&nbsp;afișează&nbsp;un&nbsp;mesaj&nbsp;de&nbsp;salut&nbsp;pe&nbsp;consolă<br>*/<br>Console.WriteLine("Salut");&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;Afișăm&nbsp;șirul&nbsp;"Salut"<br>Console.WriteLine("Bun&nbsp;venit&nbsp;în&nbsp;C#");&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;Afișăm&nbsp;șirul&nbsp;"Bun&nbsp;venit&nbsp;în&nbsp;C#"</code></pre>
     </div>
     <h2 class="subtitle">Fișierul proiectului</h2>
     <p class="paragraph">În fiecare proiect C# există un fișier care răspunde de configurația generală a proiectului. Implicit, acest fișier se numește Numele_proiectului.csproj. Să deschidem acest fișier. Pentru aceasta, fie dăm dublu click pe numele proiectului, fie facem click dreapta pe numele proiectului și în meniul care apare selectăm Edit Project File.</p>
     <div class="image-container">
      <img th:src="@{/images/2.Structura%20programului/1.Executarea%20programului/images/image4.png}" alt="" class="responsive-image">
     </div>
     <p class="paragraph">După aceasta, Visual Studio ne va deschide fișierul proiectului, care va arăta astfel:</p>
     <div class="code-inline">
      <pre><code>xml<br>&lt;Project&nbsp;Sdk="Microsoft.NET.Sdk"&gt;<br><br>&nbsp;&lt;PropertyGroup&gt;<br>&nbsp;&nbsp;&nbsp;&lt;OutputType&gt;Exe&lt;/OutputType&gt;<br>&nbsp;&nbsp;&nbsp;&lt;TargetFramework&gt;net6.0&lt;/TargetFramework&gt;<br>&nbsp;&nbsp;&nbsp;&lt;ImplicitUsings&gt;enable&lt;/ImplicitUsings&gt;<br>&nbsp;&nbsp;&nbsp;&lt;Nullable&gt;enable&lt;/Nullable&gt;<br>&nbsp;&lt;/PropertyGroup&gt;<br><br>&lt;/Project&gt;</code></pre>
     </div>
     <p class="paragraph">Acest fișier, în format XML, definește configurația proiectului și poate conține numeroase elemente. Mă voi opri doar la două elemente principale:</p>
     <ul class="enumeration">
      <li>OutputType: definește tipul de ieșire al proiectului. Acesta poate fi o aplicație executabilă în format .exe, care se lansează prin dublu click. De asemenea, poate fi un fișier cu extensia .dll - un set de funcționalități utilizat de alte proiecte. Implicit, aici este setată valoarea "Exe", ceea ce înseamnă că creăm o aplicație executabilă</li>
      <li>TargetFramework: definește versiunea framework-ului .NET utilizată pentru compilare. În acest caz, valoarea este "net6.0", adică se utilizează .NET 6.0</li>
     </ul>
     <p class="paragraph">În stadiile incipiente, acest fișier poate să nu fie necesar, însă ulterior poate fi nevoie să faceți unele modificări în configurație, și atunci poate apărea necesitatea de a apela la acest fișier.</p>
    </div>
   </main>
   <aside class="ad-section">
    <div class="ad-box">
     <p>Google Ad Here</p>
    </div>
    <div class="ad-box">
     <p>Promo: SQL Beginner Guide</p>
    </div>
   </aside>
  </div>
  <div class="lesson-navigation">
   <th:block th:if="${previousLesson != null}">
    <a th:href="@{'/lessons/' +
            ${#strings.toLowerCase(#strings.replace(previousLesson.chapter.topic.name, ' ', '-'))} + '/' +
            ${#strings.toLowerCase(#strings.replace(previousLesson.chapter.title, ' ', '-'))} + '/' +
            ${#strings.toLowerCase(#strings.replace(previousLesson.title, ' ', '-'))} }" class="nav-button">← Lecția anterioară</a>
   </th:block> <th:block th:if="${nextLesson != null}">
    <a th:href="@{'/lessons/' +
            ${#strings.toLowerCase(#strings.replace(nextLesson.chapter.topic.name, ' ', '-'))} + '/' +
            ${#strings.toLowerCase(#strings.replace(nextLesson.chapter.title, ' ', '-'))} + '/' +
            ${#strings.toLowerCase(#strings.replace(nextLesson.title, ' ', '-'))} }" class="nav-button">Lecția următoare →</a>
   </th:block>
  </div>
  <div th:replace="~{fragments/footer :: footer}"></div>
  <script th:src="@{/js/script.js}" defer></script>
 </body>
</html>
