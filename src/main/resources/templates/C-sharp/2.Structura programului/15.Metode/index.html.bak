<!doctype html>
<html lang="ro" xmlns:th="http://www.w3.org/1999/xhtml">
 <head>
    <link rel="icon" type="image/png" href="/nume-aplicatie/images/favicon.png">
    <script async src="https://www.googletagmanager.com/gtag/js?id=G-7Q2536ZKL2"></script>
    <script>
      window.dataLayer = window.dataLayer || [];
      window.gtag = function () { dataLayer.push(arguments); };
      gtag('consent', 'default', {
        'wait_for_update': 500,
        'region': ['RO'],
        'ad_storage': 'denied',
        'analytics_storage': 'denied',
        'ad_user_data': 'denied',
        'ad_personalization': 'denied'
      });
      gtag('js', new Date());
      gtag('config', 'G-7Q2536ZKL2');
    </script>


  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title th:text="${lesson.title}">Lesson</title>
  <link rel="stylesheet" th:href="@{/css/styles.css}">
  <style>
        body {
            background: #ffffff;
        }
    </style>
 </head>
 <body th:with="activeTopic='C-sharp', activeChapter='2.Structura programului', activeLesson='15.Metode'">
  <button class="mobile-sidebar-toggle" onclick="toggleMobileSidebar()">☰</button>
  <div th:replace="~{fragments/nav :: nav}"></div>
  <div class="top-nav">
   <th:block th:each="topic : ${topics}">
    <a th:href="@{'/lectii/topic/' + ${topic.id}}" th:text="${topic.name}" th:classappend="${topic.id} == ${activeTopicId} ? 'active' : ''"> </a>
   </th:block>
  </div>
  <div class="layout">
   <div class="mobile-sidebar" id="mobileSidebar">
    <button class="close-btn" onclick="toggleSidebar()">✖</button>
    <ul class="chapter-list">
     <th:block th:each="chapter : ${chapters}">
      <li class="chapter-item" th:classappend="${chapter.id} == ${activeChapterId} ? 'open' : ''">
       <div class="chapter-title" onclick="toggleChapter(this)">
        <strong th:text="${chapter.title}"></strong> <span class="arrow">▼</span>
       </div>
       <ul class="lesson-list">
        <th:block th:each="lesson : ${chapter.lessons}">
         <li><a th:href="@{'/lessons/' +
    ${#strings.toLowerCase(#strings.replace(chapter.topic.name, ' ', '-'))} + '/' +
    ${#strings.toLowerCase(#strings.replace(chapter.title, ' ', '-'))} + '/' +
    ${#strings.toLowerCase(#strings.replace(lesson.title, ' ', '-'))} }" th:text="${lesson.title}" th:classappend="${lesson.id} == ${activeLessonId} ? 'active' : ''"> </a></li>
        </th:block>
       </ul></li>
     </th:block>
    </ul>
   </div>
   <aside class="sidebar">
    <ul class="sidebar-list">
     <th:block th:each="chapter : ${chapters}">
      <li class="chapter-item" th:classappend="${chapter.id} == ${activeChapterId} ? 'open' : ''">
       <div class="chapter-toggle" onclick="toggleLessons(this)">
        <span th:text="${chapter.title}">Chapter</span>
       </div>
       <ul class="lesson-list hidden">
        <th:block th:each="lesson : ${chapter.lessons}">
         <li><a th:href="@{'/lessons/' +
    ${#strings.toLowerCase(#strings.replace(chapter.topic.name, ' ', '-'))} + '/' +
    ${#strings.toLowerCase(#strings.replace(chapter.title, ' ', '-'))} + '/' +
    ${#strings.toLowerCase(#strings.replace(lesson.title, ' ', '-'))} }" th:text="${lesson.title}" th:classappend="${lesson.id} == ${activeLessonId} ? 'active' : ''"> </a></li>
        </th:block>
       </ul></li>
     </th:block>
    </ul>
   </aside>
   <main class="content">
    <div class="document-container">
     <h1 class="main-title">Metode</h1>
     <p class="paragraph">Dacă variabilele stochează anumite valori, metodele conțin un set de instrucțiuni care îndeplinesc acțiuni specifice. În esență, o metodă este un bloc de cod denumit care îndeplinește anumite acțiuni.</p>
     <p class="paragraph">Definiția generală a metodelor arată astfel:</p>
     <div class="code-inline">
      <pre><code>[modificatori]&nbsp;tip_returnat&nbsp;nume_metodă&nbsp;([parametri])<br>{<br>&nbsp;&nbsp;&nbsp;//&nbsp;corpul&nbsp;metodei<br>}</code></pre>
     </div>
     <p class="paragraph">Modificatorii și parametrii sunt opționali.</p>
     <p class="paragraph">Anterior, am folosit cel puțin o metodă - Console.WriteLine(), care afișează informații pe consolă. Acum să vedem cum putem crea propriile noastre metode.</p>
     <h2 class="subtitle">Definirea unei metode</h2>
     <p class="paragraph">Să definim o metodă:</p>
     <div class="code-inline">
      <pre><code>void&nbsp;SayHello()<br>{<br>&nbsp;&nbsp;&nbsp;Console.WriteLine("Hello");<br>}</code></pre>
     </div>
     <p class="paragraph">Aici este definită metoda SayHello, care afișează un mesaj. Denumirile metodelor trebuie să respecte aceleași reguli ca și denumirile variabilelor. Totuși, de obicei, denumirile metodelor încep cu literă mare.</p>
     <p class="paragraph">Înainte de numele metodei apare tipul de returnare. Aici este tipul void, care indică faptul că metoda nu returnează nimic, ea doar execută anumite acțiuni.</p>
     <p class="paragraph">După numele metodei, în paranteze, urmează lista de parametri. În acest caz, parantezele sunt goale, ceea ce înseamnă că metoda nu primește niciun parametru.</p>
     <p class="paragraph">După lista de parametri, în acolade, se află blocul de cod care reprezintă setul de instrucțiuni executate de metodă. În acest caz, blocul metodei SayHello conține o singură instrucțiune care afișează un șir pe consolă:</p>
     <div class="code-inline">
      <pre><code>Console.WriteLine("Hello");</code></pre>
     </div>
     <p class="paragraph">Dar dacă rulăm acest proiect, nu vom vedea niciun șir afișat de metoda SayHello. Pentru că, după definire, metoda trebuie să fie apelată pentru a-și îndeplini funcția.</p>
     <h2 class="subtitle">Apelarea metodelor</h2>
     <p class="paragraph">Pentru a folosi metoda SayHello, trebuie să o apelăm. Pentru apelarea unei metode, se specifică numele acesteia, urmat de paranteze care conțin valorile parametrilor (dacă metoda primește parametri).</p>
     <div class="code-inline">
      <pre><code>nume_metodă&nbsp;(valori_parametri_metodă);</code></pre>
     </div>
     <p class="paragraph">De exemplu, apelul metodei SayHello arată astfel:</p>
     <div class="code-inline">
      <pre><code>SayHello();</code></pre>
     </div>
     <p class="paragraph">Deoarece metoda nu primește niciun parametru, după numele metodei urmează paranteze goale.</p>
     <p class="paragraph">Să combinăm definirea și apelul metodei:</p>
     <div class="code-inline">
      <pre><code>void&nbsp;SayHello()<br>{<br>&nbsp;&nbsp;&nbsp;Console.WriteLine("Hello");<br>}<br><br>SayHello();&nbsp;//&nbsp;Hello<br>SayHello();&nbsp;//&nbsp;Hello</code></pre>
     </div>
     <div class="image-container">
      <img th:src="@{/images/2.Structura%20programului/15.Metode/images/image1.png}" alt="" class="responsive-image">
     </div>
     <p class="paragraph">Ieșirea pe consolă a programului:</p>
     <div class="code-inline">
      <pre><code>Hello<br>Hello</code></pre>
     </div>
     <p class="paragraph">Avantajul metodelor este că pot fi apelate de mai multe ori în diferite părți ale programului. De exemplu, în exemplul de mai sus, metoda SayHello este apelată de două ori.</p>
     <p class="paragraph">În acest caz, nu contează dacă metoda este definită înainte sau după apelare. De exemplu, am putea scrie și astfel:</p>
     <div class="code-inline">
      <pre><code>SayHello();&nbsp;//&nbsp;Hello<br>SayHello();&nbsp;//&nbsp;Hello<br><br>void&nbsp;SayHello()<br>{<br>&nbsp;&nbsp;&nbsp;Console.WriteLine("Hello");<br>}</code></pre>
     </div>
     <p class="paragraph">Să definim și să apelăm alte câteva metode:</p>
     <div class="code-inline">
      <pre><code>void&nbsp;SayHelloRo()<br>{<br>&nbsp;&nbsp;&nbsp;Console.WriteLine("Salut");<br>}<br>void&nbsp;SayHelloEn()<br>{<br>&nbsp;&nbsp;&nbsp;Console.WriteLine("Hello");<br>}<br>void&nbsp;SayHelloFr()<br>{<br>&nbsp;&nbsp;&nbsp;Console.WriteLine("Salut");<br>}<br><br>string&nbsp;language&nbsp;=&nbsp;"en";<br><br>switch&nbsp;(language)<br>{<br>&nbsp;&nbsp;&nbsp;case&nbsp;"en":<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;SayHelloEn();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;break;<br>&nbsp;&nbsp;&nbsp;case&nbsp;"ro":<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;SayHelloRo();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;break;<br>&nbsp;&nbsp;&nbsp;case&nbsp;"fr":<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;SayHelloFr();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;break;<br>}</code></pre>
     </div>
     <p class="paragraph">Aici sunt definite trei metode: SayHelloRo(), SayHelloEn() și SayHelloFr(), care au de asemenea tipul void, nu primesc niciun parametru și afișează un șir pe consolă. Aceste metode afișează un mesaj de salut în limbi diferite.</p>
     <p class="paragraph">În construcția switch, se verifică valoarea variabilei language, care stochează codul limbii, și, în funcție de valoarea acesteia, este apelată metoda corespunzătoare. Astfel, în acest caz, pe consolă va fi afișat:</p>
     <div class="code-inline">
      <pre><code>Hello</code></pre>
     </div>
     <h2 class="subtitle">Sintaxa prescurtată a metodelor</h2>
     <p class="paragraph">Dacă metoda are în corpul său doar o singură instrucțiune, putem scurta definiția metodei. De exemplu, dacă avem metoda:</p>
     <div class="code-inline">
      <pre><code>void&nbsp;SayHello()<br>{<br>&nbsp;&nbsp;&nbsp;Console.WriteLine("Hello");<br>}</code></pre>
     </div>
     <p class="paragraph">Putem să o scurtăm astfel:</p>
     <div class="code-inline">
      <pre><code>void&nbsp;SayHello()&nbsp;=&gt;&nbsp;Console.WriteLine("Hello");</code></pre>
     </div>
     <p class="paragraph">După lista de parametri se pune operatorul =&gt;, urmat de instrucțiunea executată.</p>
    </div>
   </main>
   <aside class="ad-section">
    <div class="ad-box">
     <p>Google Ad Here</p>
    </div>
    <div class="ad-box">
     <p>Promo: SQL Beginner Guide</p>
    </div>
   </aside>
  </div>
  <div class="lesson-navigation">
   <th:block th:if="${previousLesson != null}">
    <a th:href="@{'/lessons/' +
            ${#strings.toLowerCase(#strings.replace(previousLesson.chapter.topic.name, ' ', '-'))} + '/' +
            ${#strings.toLowerCase(#strings.replace(previousLesson.chapter.title, ' ', '-'))} + '/' +
            ${#strings.toLowerCase(#strings.replace(previousLesson.title, ' ', '-'))} }" class="nav-button">← Lecția anterioară</a>
   </th:block> <th:block th:if="${nextLesson != null}">
    <a th:href="@{'/lessons/' +
            ${#strings.toLowerCase(#strings.replace(nextLesson.chapter.topic.name, ' ', '-'))} + '/' +
            ${#strings.toLowerCase(#strings.replace(nextLesson.chapter.title, ' ', '-'))} + '/' +
            ${#strings.toLowerCase(#strings.replace(nextLesson.title, ' ', '-'))} }" class="nav-button">Lecția următoare →</a>
   </th:block>
  </div>
  <div th:replace="~{fragments/footer :: footer}"></div>
  <script th:src="@{/js/script.js}" defer></script>
 </body>
</html>
