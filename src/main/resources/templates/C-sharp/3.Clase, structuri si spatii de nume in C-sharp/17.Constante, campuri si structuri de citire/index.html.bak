<!doctype html>
<html lang="ro" xmlns:th="http://www.w3.org/1999/xhtml">
 <head>
    <script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-4253419731329045"
            crossorigin="anonymous"></script>


  <link rel="canonical" th:href="${canonicalUrl}" />

    <link rel="icon" type="image/png" href="/nume-aplicatie/images/favicon.png">
    <script async src="https://www.googletagmanager.com/gtag/js?id=G-7Q2536ZKL2"></script>
    <script>
      window.dataLayer = window.dataLayer || [];
      window.gtag = function () { dataLayer.push(arguments); };
      gtag('consent', 'default', {
        'wait_for_update': 500,
        'region': ['RO'],
        'ad_storage': 'denied',
        'analytics_storage': 'denied',
        'ad_user_data': 'denied',
        'ad_personalization': 'denied'
      });
      gtag('js', new Date());
      gtag('config', 'G-7Q2536ZKL2');
    </script>


  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title th:text="${lesson.title}">Lesson</title>
  <link rel="stylesheet" th:href="@{/css/styles.css}">
  <style>
        body {
            background: #ffffff;
        }
    </style>
 </head>
 <body th:with="activeTopic='C-sharp', activeChapter='3.Clase, structuri si spatii de nume in C-sharp', activeLesson='17.Constante, campuri si structuri de citire'">
  <button class="mobile-sidebar-toggle" onclick="toggleMobileSidebar()">☰</button>
  <div th:replace="~{fragments/nav :: nav}"></div>
  <div class="top-nav">
   <th:block th:each="topic : ${topics}">
    <a th:href="@{'/lectii/topic/' + ${topic.id}}" th:text="${topic.name}" th:classappend="${topic.id} == ${activeTopicId} ? 'active' : ''"> </a>
   </th:block>
  </div>
  <div class="layout">
   <div class="mobile-sidebar" id="mobileSidebar">
    <button class="close-btn" onclick="toggleSidebar()">✖</button>
    <ul class="chapter-list">
     <th:block th:each="chapter : ${chapters}">
      <li class="chapter-item" th:classappend="${chapter.id} == ${activeChapterId} ? 'open' : ''">
       <div class="chapter-title" onclick="toggleChapter(this)">
        <strong th:text="${chapter.title}"></strong> <span class="arrow">▼</span>
       </div>
       <ul class="lesson-list">
        <th:block th:each="lesson : ${chapter.lessons}">
         <li><a th:href="@{'/lectii/' +
    ${#strings.toLowerCase(#strings.replace(chapter.topic.name, ' ', '-'))} + '/' +
    ${#strings.toLowerCase(#strings.replace(chapter.title, ' ', '-'))} + '/' +
    ${#strings.toLowerCase(#strings.replace(lesson.title, ' ', '-'))} }" th:text="${lesson.title}" th:classappend="${lesson.id} == ${activeLessonId} ? 'active' : ''"> </a></li>
        </th:block>
       </ul></li>
     </th:block>
    </ul>
   </div>
   <aside class="sidebar">
    <ul class="sidebar-list">
     <th:block th:each="chapter : ${chapters}">
      <li class="chapter-item" th:classappend="${chapter.id} == ${activeChapterId} ? 'open' : ''">
       <div class="chapter-toggle" onclick="toggleLessons(this)">
        <span th:text="${chapter.title}">Chapter</span>
       </div>
       <ul class="lesson-list hidden">
        <th:block th:each="lesson : ${chapter.lessons}">
         <li><a th:href="@{'/lectii/' +
    ${#strings.toLowerCase(#strings.replace(chapter.topic.name, ' ', '-'))} + '/' +
    ${#strings.toLowerCase(#strings.replace(chapter.title, ' ', '-'))} + '/' +
    ${#strings.toLowerCase(#strings.replace(lesson.title, ' ', '-'))} }" th:text="${lesson.title}" th:classappend="${lesson.id} == ${activeLessonId} ? 'active' : ''"> </a></li>
        </th:block>
       </ul></li>
     </th:block>
    </ul>
   </aside>
   <main class="content">
    <div class="document-container">
     <h1 class="main-title">Constante, câmpuri și structuri de citire</h1>
     <h2 class="subtitle">Constantele claselor</h2>
     <p class="paragraph">Pe lângă câmpuri, o clasă poate defini constante pentru stocarea datelor. Spre deosebire de câmpuri, valoarea constantelor se stabilește o singură dată, direct la declararea lor, și ulterior nu poate fi modificată. În plus, constantele stochează anumite date care nu se referă la un singur obiect, ci la întreaga clasă. Și pentru a accesa constantele nu se folosește numele obiectului, ci numele clasei:</p>
     <div class="code-inline">
      <pre><code>Person&nbsp;tom&nbsp;=&nbsp;new&nbsp;Person();<br>tom.name&nbsp;=&nbsp;"Tom";<br>tom.Print();&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;Person:&nbsp;Tom<br><br>Console.WriteLine(Person.type);&nbsp;//&nbsp;Person<br>//&nbsp;Person.type&nbsp;=&nbsp;"User";&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;!Eroare:&nbsp;nu&nbsp;se&nbsp;poate&nbsp;modifica&nbsp;o&nbsp;constantă<br><br>class&nbsp;Person<br>{<br>&nbsp;&nbsp;&nbsp;public&nbsp;const&nbsp;string&nbsp;type&nbsp;=&nbsp;"Person";<br>&nbsp;&nbsp;&nbsp;public&nbsp;string&nbsp;name&nbsp;=&nbsp;"Undefined";<br>&nbsp;&nbsp;&nbsp;public&nbsp;void&nbsp;Print()&nbsp;=&gt;&nbsp;Console.WriteLine($"{type}:&nbsp;{name}");<br>}</code></pre>
     </div>
     <p class="paragraph">Aici, în clasa Person, este definită constanta type, care stochează denumirea clasei:</p>
     <div class="code-inline">
      <pre><code>public&nbsp;const&nbsp;string&nbsp;type&nbsp;=&nbsp;"Person";</code></pre>
     </div>
     <p class="paragraph">Numele clasei nu depinde de obiect. Putem crea multe obiecte Person, dar numele clasei nu trebuie să se schimbe - se referă la toate obiectele Person și nu trebuie să se modifice. De aceea, numele tipului poate fi stocat sub formă de constantă.</p>
     <p class="paragraph">Trebuie menționat că unei constante trebuie să i se atribuie o valoare imediat la definire.</p>
     <p class="paragraph">Similar câmpurilor obișnuite, putem accesa constantele clasei în interiorul acestei clase. De exemplu, în metoda Print, valoarea constantei este afișată pe consolă.</p>
     <p class="paragraph">Totuși, dacă dorim să accesăm constanta în afara clasei sale, trebuie să folosim numele clasei:</p>
     <div class="code-inline">
      <pre><code>Console.WriteLine(Person.type);&nbsp;//&nbsp;Person</code></pre>
     </div>
     <p class="paragraph">Astfel, dacă este necesar să stocăm date care se referă la întreaga clasă, putem folosi constante.</p>
     <h2 class="subtitle">Câmpuri de citire și modificatorul readonly</h2>
     <p class="paragraph">Câmpurile de citire sunt acele câmpuri ale unei clase sau structuri a căror valoare nu poate fi modificată. Acestor câmpuri li se poate atribui o valoare fie direct la declarare, fie în constructor. În alte locuri din program nu se poate atribui valoare acestor câmpuri, se poate doar citi valoarea lor.</p>
     <p class="paragraph">Un câmp de citire este declarat cu cuvântul cheie readonly:</p>
     <div class="code-inline">
      <pre><code>Person&nbsp;tom&nbsp;=&nbsp;new&nbsp;Person("Tom");<br>Console.WriteLine(tom.name);<br><br>//tom.name&nbsp;=&nbsp;"Sam";&nbsp;//&nbsp;!Eroare:&nbsp;nu&nbsp;se&nbsp;poate&nbsp;modifica<br>class&nbsp;Person<br>{<br>&nbsp;&nbsp;&nbsp;public&nbsp;readonly&nbsp;string&nbsp;name&nbsp;=&nbsp;"Undefined";&nbsp;//&nbsp;poate&nbsp;fi&nbsp;inițializat&nbsp;așa<br>&nbsp;&nbsp;&nbsp;public&nbsp;Person(string&nbsp;name)<br>&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this.name&nbsp;=&nbsp;name;&nbsp;//&nbsp;în&nbsp;constructor&nbsp;se&nbsp;poate&nbsp;atribui&nbsp;valoare&nbsp;câmpului&nbsp;de&nbsp;citire<br>&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;public&nbsp;void&nbsp;ChangeName(string&nbsp;otherName)<br>&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//this.name&nbsp;=&nbsp;otherName;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;nu&nbsp;se&nbsp;poate<br>&nbsp;&nbsp;&nbsp;}<br>}</code></pre>
     </div>
     <p class="paragraph">Aici, câmpul name stochează numele utilizatorului și este un câmp de citire. I se poate atribui o valoare direct la declarare:</p>
     <div class="code-inline">
      <pre><code>public&nbsp;readonly&nbsp;string&nbsp;name&nbsp;=&nbsp;"Undefined";</code></pre>
     </div>
     <p class="paragraph">Sau i se poate atribui o valoare în constructor:</p>
     <div class="code-inline">
      <pre><code>public&nbsp;Person(string&nbsp;name)<br>{<br>&nbsp;&nbsp;&nbsp;this.name&nbsp;=&nbsp;name;<br>}</code></pre>
     </div>
     <p class="paragraph">În alte locuri din program, inclusiv în clasa Person, nu se poate atribui valoare câmpului de citire.</p>
     <h2 class="subtitle">Compararea constantelor</h2>
     <ul class="enumeration">
      <li>Constantele trebuie definite în timpul compilării, în timp ce câmpurile de citire pot fi definite în timpul execuției programului</li>
     </ul>
     <p class="paragraph">Valoarea unei constante poate fi stabilită doar la definirea ei.</p>
     <p class="paragraph">Un câmp de citire poate fi inițializat fie la definirea lui, fie în constructorul clasei.</p>
     <ul class="enumeration">
      <li>Constantele nu pot folosi modificatorul static, deoarece sunt implicit statice. Câmpurile de citire pot fi fie statice, fie nestatice.</li>
     </ul>
     <h2 class="subtitle">Structuri de citire</h2>
     <p class="paragraph">Pe lângă câmpurile de citire, în C# putem defini structuri de citire. Pentru aceasta, ele sunt precedate de modificatorul readonly:</p>
     <div class="code-inline">
      <pre><code>readonly&nbsp;struct&nbsp;Person&nbsp;{&nbsp;}</code></pre>
     </div>
     <p class="paragraph">Particularitatea acestor structuri este că toate câmpurile lor trebuie să fie de asemenea câmpuri de citire:</p>
     <div class="code-inline">
      <pre><code>readonly&nbsp;struct&nbsp;Person<br>{<br>&nbsp;&nbsp;&nbsp;public&nbsp;readonly&nbsp;string&nbsp;name;<br>&nbsp;&nbsp;&nbsp;public&nbsp;Person(string&nbsp;name)<br>&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this.name&nbsp;=&nbsp;name;<br>&nbsp;&nbsp;&nbsp;}<br>}</code></pre>
     </div>
     <p class="paragraph">Același lucru se aplică și proprietăților, care trebuie să fie disponibile doar pentru citire:</p>
     <div class="code-inline">
      <pre><code>readonly&nbsp;struct&nbsp;Person<br>{<br>&nbsp;&nbsp;&nbsp;public&nbsp;readonly&nbsp;string&nbsp;Name&nbsp;{&nbsp;get;&nbsp;}&nbsp;//&nbsp;nu&nbsp;este&nbsp;necesar&nbsp;să&nbsp;specificăm&nbsp;readonly<br>&nbsp;&nbsp;&nbsp;public&nbsp;int&nbsp;Age&nbsp;{&nbsp;get;&nbsp;}&nbsp;//&nbsp;proprietate&nbsp;doar&nbsp;pentru&nbsp;citire<br>&nbsp;&nbsp;&nbsp;public&nbsp;Person(string&nbsp;name,&nbsp;int&nbsp;age)<br>&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Name&nbsp;=&nbsp;name;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Age&nbsp;=&nbsp;age;<br>&nbsp;&nbsp;&nbsp;}<br>}</code></pre>
     </div>
    </div>
   </main>
   <aside class="ad-section">
    <div class="ad-box">
     <p>Google Ad Here</p>
    </div>
    <div class="ad-box">
     <p>Promo: SQL Beginner Guide</p>
    </div>
   </aside>
  </div>
  <div class="lesson-navigation">
   <th:block th:if="${previousLesson != null}">
    <a th:href="@{'/lectii/' +
            ${#strings.toLowerCase(#strings.replace(previousLesson.chapter.topic.name, ' ', '-'))} + '/' +
            ${#strings.toLowerCase(#strings.replace(previousLesson.chapter.title, ' ', '-'))} + '/' +
            ${#strings.toLowerCase(#strings.replace(previousLesson.title, ' ', '-'))} }" class="nav-button">← Lecția anterioară</a>
   </th:block> <th:block th:if="${nextLesson != null}">
    <a th:href="@{'/lectii/' +
            ${#strings.toLowerCase(#strings.replace(nextLesson.chapter.topic.name, ' ', '-'))} + '/' +
            ${#strings.toLowerCase(#strings.replace(nextLesson.chapter.title, ' ', '-'))} + '/' +
            ${#strings.toLowerCase(#strings.replace(nextLesson.title, ' ', '-'))} }" class="nav-button">Lecția următoare →</a>
   </th:block>
  </div>
  <div th:replace="~{fragments/footer :: footer}"></div>
  <script th:src="@{/js/script.js}" defer></script>
 </body>
</html>
