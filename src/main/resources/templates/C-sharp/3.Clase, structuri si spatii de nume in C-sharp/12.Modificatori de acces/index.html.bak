<!doctype html>
<html lang="ro" xmlns:th="http://www.w3.org/1999/xhtml">
 <head>
    <link rel="icon" type="image/png" href="/nume-aplicatie/images/favicon.png">
    <script async src="https://www.googletagmanager.com/gtag/js?id=G-7Q2536ZKL2"></script>
    <script>
      window.dataLayer = window.dataLayer || [];
      window.gtag = function () { dataLayer.push(arguments); };
      gtag('consent', 'default', {
        'wait_for_update': 500,
        'region': ['RO'],
        'ad_storage': 'denied',
        'analytics_storage': 'denied',
        'ad_user_data': 'denied',
        'ad_personalization': 'denied'
      });
      gtag('js', new Date());
      gtag('config', 'G-7Q2536ZKL2');
    </script>


  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title th:text="${lesson.title}">Lesson</title>
  <link rel="stylesheet" th:href="@{/css/styles.css}">
  <style>
        body {
            background: #ffffff;
        }
    </style>
 </head>
 <body th:with="activeTopic='C-sharp', activeChapter='3.Clase, structuri si spatii de nume in C-sharp', activeLesson='12.Modificatori de acces'">
  <button class="mobile-sidebar-toggle" onclick="toggleMobileSidebar()">☰</button>
  <div th:replace="~{fragments/nav :: nav}"></div>
  <div class="top-nav">
   <th:block th:each="topic : ${topics}">
    <a th:href="@{'/lectii/topic/' + ${topic.id}}" th:text="${topic.name}" th:classappend="${topic.id} == ${activeTopicId} ? 'active' : ''"> </a>
   </th:block>
  </div>
  <div class="layout">
   <div class="mobile-sidebar" id="mobileSidebar">
    <button class="close-btn" onclick="toggleSidebar()">✖</button>
    <ul class="chapter-list">
     <th:block th:each="chapter : ${chapters}">
      <li class="chapter-item" th:classappend="${chapter.id} == ${activeChapterId} ? 'open' : ''">
       <div class="chapter-title" onclick="toggleChapter(this)">
        <strong th:text="${chapter.title}"></strong> <span class="arrow">▼</span>
       </div>
       <ul class="lesson-list">
        <th:block th:each="lesson : ${chapter.lessons}">
         <li><a th:href="@{'/lessons/' +
    ${#strings.toLowerCase(#strings.replace(chapter.topic.name, ' ', '-'))} + '/' +
    ${#strings.toLowerCase(#strings.replace(chapter.title, ' ', '-'))} + '/' +
    ${#strings.toLowerCase(#strings.replace(lesson.title, ' ', '-'))} }" th:text="${lesson.title}" th:classappend="${lesson.id} == ${activeLessonId} ? 'active' : ''"> </a></li>
        </th:block>
       </ul></li>
     </th:block>
    </ul>
   </div>
   <aside class="sidebar">
    <ul class="sidebar-list">
     <th:block th:each="chapter : ${chapters}">
      <li class="chapter-item" th:classappend="${chapter.id} == ${activeChapterId} ? 'open' : ''">
       <div class="chapter-toggle" onclick="toggleLessons(this)">
        <span th:text="${chapter.title}">Chapter</span>
       </div>
       <ul class="lesson-list hidden">
        <th:block th:each="lesson : ${chapter.lessons}">
         <li><a th:href="@{'/lessons/' +
    ${#strings.toLowerCase(#strings.replace(chapter.topic.name, ' ', '-'))} + '/' +
    ${#strings.toLowerCase(#strings.replace(chapter.title, ' ', '-'))} + '/' +
    ${#strings.toLowerCase(#strings.replace(lesson.title, ' ', '-'))} }" th:text="${lesson.title}" th:classappend="${lesson.id} == ${activeLessonId} ? 'active' : ''"> </a></li>
        </th:block>
       </ul></li>
     </th:block>
    </ul>
   </aside>
   <main class="content">
    <div class="document-container">
     <h1 class="main-title">Modificatori de acces</h1>
     <p class="paragraph">Toate câmpurile, metodele și celelalte componente ale unei clase au modificatori de acces. Modificatorii de acces permit definirea domeniului de vizibilitate pentru componentele unei clase. Adică, modificatorii de acces determină contextul în care o variabilă sau o metodă poate fi utilizată.</p>
     <p class="paragraph">În limbajul C# se folosesc următorii modificatori de acces:</p>
     <ul class="enumeration">
      <li>private: componentă închisă sau privată a unei clase sau structuri. Componenta privată este accesibilă doar în cadrul clasei sau structurii sale</li>
      <li>private protected: componenta clasei este accesibilă din orice loc în clasa sa sau în clasele derivate definite în aceeași asamblare.</li>
      <li>file: adăugat în versiunea C# 11 și se aplică tipurilor, de exemplu, claselor și structurilor. O clasă sau structură cu acest modificator este accesibilă doar din fișierul de cod curent</li>
      <li>protected: această componentă a clasei este accesibilă din orice loc în clasa sa sau în clasele derivate. Clasele derivate pot fi situate în alte asamblări</li>
      <li>internal: componentele unei clase sau structuri sunt accesibile din orice loc din aceeași asamblare, dar nu sunt accesibile pentru alte programe și asamblări</li>
      <li>protected internal: combină funcționalitatea modificatorilor protected și internal. O astfel de componentă a clasei este accesibilă din orice loc din asamblarea curentă și din clasele derivate care pot fi situate în alte asamblări</li>
      <li>public: componentă publică, accesibilă a unei clase sau structuri. O astfel de componentă este accesibilă din orice loc din cod, precum și din alte programe și asamblări</li>
     </ul>
     <div class="image-container">
      <img th:src="@{/images/C-sharp/3.Clase,%20structuri%20si%20spatii%20de%20nume%20in%20C-sharp/12.Modificatori%20de%20acces/images/image1.png}" alt="" class="responsive-image">
     </div>
     <p class="paragraph">Trebuie menționat că acești modificatori pot fi aplicați atât componentelor unei clase, cât și componentelor unei structuri, cu excepția faptului că structurile nu pot folosi modificatorii private protected, protected și protected internal, deoarece structurile nu pot fi moștenite.</p>
     <p class="paragraph">Toate clasele și structurile definite direct în afara altor tipuri (clase și structuri) pot avea doar modificatorii public, file sau internal.</p>
     <p class="paragraph">Putem defini explicit un modificator de acces sau putem să nu-l specificăm:</p>
     <div class="code-inline">
      <pre><code>public&nbsp;class&nbsp;Person<br>{<br>&nbsp;&nbsp;&nbsp;string&nbsp;name;<br>&nbsp;&nbsp;&nbsp;public&nbsp;Person(string&nbsp;name)<br>&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this.name&nbsp;=&nbsp;name;<br>&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;public&nbsp;void&nbsp;Print()&nbsp;=&gt;&nbsp;Console.WriteLine($"Name:&nbsp;{name}");<br>}</code></pre>
     </div>
     <p class="paragraph">Dacă pentru componente nu este definit un modificator de acces, implicit se aplică modificatorul private. De exemplu, în exemplul de mai sus, variabila name va avea implicit modificatorul private.</p>
     <p class="paragraph">Clasele și structurile declarate fără modificator și care sunt situate în afara altor tipuri au implicit acces internal, iar clasele și structurile imbricate, precum și celelalte componente ale claselor/structurilor, au implicit modificatorul private. De exemplu:</p>
     <div class="code-inline">
      <pre><code>class&nbsp;Phone<br>{<br>&nbsp;&nbsp;&nbsp;struct&nbsp;Camera<br>&nbsp;&nbsp;&nbsp;{<br><br>&nbsp;&nbsp;&nbsp;}<br>}</code></pre>
     </div>
     <p class="paragraph">Aici clasa Phone nu este imbricată în nicio altă clasă/structură, deci are implicit modificatorul internal. Structura Camera este imbricată, deci, ca și celelalte componente ale clasei, are implicit modificatorul private.</p>
     <h2 class="subtitle">Modificatori în cadrul proiectului curent</h2>
     <p class="paragraph">Să vedem un exemplu și să creăm următoarea clasă State:</p>
     <div class="code-inline">
      <pre><code>class&nbsp;State<br>{<br>&nbsp;&nbsp;&nbsp;//&nbsp;este&nbsp;similar&nbsp;cu&nbsp;private&nbsp;string&nbsp;defaultVar;<br>&nbsp;&nbsp;&nbsp;string&nbsp;defaultVar&nbsp;="default";<br>&nbsp;&nbsp;&nbsp;//&nbsp;câmpul&nbsp;este&nbsp;accesibil&nbsp;doar&nbsp;din&nbsp;clasa&nbsp;curentă<br>&nbsp;&nbsp;&nbsp;private&nbsp;string&nbsp;privateVar&nbsp;=&nbsp;"private";<br>&nbsp;&nbsp;&nbsp;//&nbsp;accesibil&nbsp;din&nbsp;clasa&nbsp;curentă&nbsp;și&nbsp;din&nbsp;clasele&nbsp;derivate&nbsp;definite&nbsp;în&nbsp;acest&nbsp;proiect<br>&nbsp;&nbsp;&nbsp;private&nbsp;protected&nbsp;string&nbsp;protectedPrivateVar&nbsp;=&nbsp;"protected&nbsp;private";<br>&nbsp;&nbsp;&nbsp;//&nbsp;accesibil&nbsp;din&nbsp;clasa&nbsp;curentă&nbsp;și&nbsp;din&nbsp;clasele&nbsp;derivate<br>&nbsp;&nbsp;&nbsp;protected&nbsp;string&nbsp;protectedVar&nbsp;=&nbsp;"protected";<br>&nbsp;&nbsp;&nbsp;//&nbsp;accesibil&nbsp;în&nbsp;orice&nbsp;loc&nbsp;din&nbsp;proiectul&nbsp;curent<br>&nbsp;&nbsp;&nbsp;internal&nbsp;string&nbsp;internalVar&nbsp;=&nbsp;"internal";<br>&nbsp;&nbsp;&nbsp;//&nbsp;accesibil&nbsp;în&nbsp;orice&nbsp;loc&nbsp;din&nbsp;proiectul&nbsp;curent&nbsp;și&nbsp;din&nbsp;clasele&nbsp;derivate&nbsp;în&nbsp;alte&nbsp;proiecte<br>&nbsp;&nbsp;&nbsp;protected&nbsp;internal&nbsp;string&nbsp;protectedInternalVar&nbsp;=&nbsp;"protected&nbsp;internal";<br>&nbsp;&nbsp;&nbsp;//&nbsp;accesibil&nbsp;în&nbsp;orice&nbsp;loc&nbsp;din&nbsp;cod,&nbsp;precum&nbsp;și&nbsp;din&nbsp;alte&nbsp;programe&nbsp;și&nbsp;asamblări<br>&nbsp;&nbsp;&nbsp;public&nbsp;string&nbsp;publicVar&nbsp;=&nbsp;"public";<br><br>&nbsp;&nbsp;&nbsp;//&nbsp;implicit&nbsp;are&nbsp;modificatorul&nbsp;private<br>&nbsp;&nbsp;&nbsp;void&nbsp;Print()&nbsp;=&gt;&nbsp;Console.WriteLine(defaultVar);<br><br>&nbsp;&nbsp;&nbsp;//&nbsp;metoda&nbsp;este&nbsp;accesibilă&nbsp;doar&nbsp;din&nbsp;clasa&nbsp;curentă<br>&nbsp;&nbsp;&nbsp;private&nbsp;void&nbsp;PrintPrivate()&nbsp;=&gt;&nbsp;Console.WriteLine(privateVar);<br><br>&nbsp;&nbsp;&nbsp;//&nbsp;accesibilă&nbsp;din&nbsp;clasa&nbsp;curentă&nbsp;și&nbsp;din&nbsp;clasele&nbsp;derivate&nbsp;definite&nbsp;în&nbsp;acest&nbsp;proiect<br>&nbsp;&nbsp;&nbsp;private&nbsp;protected&nbsp;void&nbsp;PrintProtectedPrivate()&nbsp;=&gt;&nbsp;Console.WriteLine(protectedPrivateVar);<br><br>&nbsp;&nbsp;&nbsp;//&nbsp;accesibilă&nbsp;din&nbsp;clasa&nbsp;curentă&nbsp;și&nbsp;din&nbsp;clasele&nbsp;derivate<br>&nbsp;&nbsp;&nbsp;protected&nbsp;void&nbsp;PrintProtected()&nbsp;=&gt;&nbsp;Console.WriteLine(protectedVar);<br><br>&nbsp;&nbsp;&nbsp;//&nbsp;accesibilă&nbsp;în&nbsp;orice&nbsp;loc&nbsp;din&nbsp;proiectul&nbsp;curent<br>&nbsp;&nbsp;&nbsp;internal&nbsp;void&nbsp;PrintInternal()&nbsp;=&gt;&nbsp;Console.WriteLine(internalVar);<br><br>&nbsp;&nbsp;&nbsp;//&nbsp;accesibilă&nbsp;în&nbsp;orice&nbsp;loc&nbsp;din&nbsp;proiectul&nbsp;curent&nbsp;și&nbsp;din&nbsp;clasele&nbsp;derivate&nbsp;în&nbsp;alte&nbsp;proiecte<br>&nbsp;&nbsp;&nbsp;protected&nbsp;internal&nbsp;void&nbsp;PrintProtectedInternal()&nbsp;=&gt;&nbsp;Console.WriteLine(protectedInternalVar);<br><br>&nbsp;&nbsp;&nbsp;//&nbsp;accesibilă&nbsp;în&nbsp;orice&nbsp;loc&nbsp;din&nbsp;cod,&nbsp;precum&nbsp;și&nbsp;din&nbsp;alte&nbsp;programe&nbsp;și&nbsp;asamblări<br>&nbsp;&nbsp;&nbsp;public&nbsp;void&nbsp;PrintPublic()&nbsp;=&gt;&nbsp;Console.WriteLine(publicVar);<br>}</code></pre>
     </div>
     <p class="paragraph">Deoarece clasa State nu are un modificator explicit, implicit are modificatorul internal, astfel că va fi accesibilă din orice loc al acestui proiect, dar nu va fi accesibilă din alte programe și asamblări.</p>
     <p class="paragraph">Clasa State are șase câmpuri pentru fiecare nivel de acces. Plus o variabilă fără modificator, care implicit este private. De asemenea, sunt definite șapte metode cu diferiți modificatori, care afișează valorile variabilelor corespunzătoare în consolă.</p>
     <p class="paragraph">Deoarece toți modificatorii permit utilizarea componentelor clasei în cadrul clasei respective, toate variabilele clasei, inclusiv cele private, sunt accesibile tuturor metodelor sale, deoarece toate se află în contextul clasei State.</p>
     <p class="paragraph">Acum să vedem cum putem folosi variabilele clasei State într-o altă clasă, să zicem că se numește StateConsumer și este situată în același proiect:</p>
     <div class="code-inline">
      <pre><code>class&nbsp;StateConsumer<br>{<br>&nbsp;&nbsp;&nbsp;public&nbsp;void&nbsp;PrintState()<br>&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;State&nbsp;state&nbsp;=&nbsp;new&nbsp;State();<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;nu&nbsp;putem&nbsp;accesa&nbsp;variabila&nbsp;defaultVar,<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;deoarece&nbsp;are&nbsp;modificatorul&nbsp;private&nbsp;și&nbsp;clasa&nbsp;StateConsumer&nbsp;nu&nbsp;o&nbsp;vede<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Console.WriteLine(state.defaultVar);&nbsp;//&nbsp;Eroare,&nbsp;nu&nbsp;se&nbsp;poate&nbsp;accesa<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;același&nbsp;lucru&nbsp;este&nbsp;valabil&nbsp;și&nbsp;pentru&nbsp;variabila&nbsp;privateVar<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Console.WriteLine(state.privateVar);&nbsp;//&nbsp;Eroare,&nbsp;nu&nbsp;se&nbsp;poate&nbsp;accesa<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;nu&nbsp;putem&nbsp;accesa&nbsp;variabila&nbsp;protectedPrivateVar,<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;deoarece&nbsp;clasa&nbsp;StateConsumer&nbsp;nu&nbsp;este&nbsp;o&nbsp;clasă&nbsp;derivată&nbsp;din&nbsp;clasa&nbsp;State<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Console.WriteLine(state.protectedPrivateVar);&nbsp;//&nbsp;Eroare,&nbsp;nu&nbsp;se&nbsp;poate&nbsp;accesa<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;nu&nbsp;putem&nbsp;accesa&nbsp;variabila&nbsp;protectedVar,<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;deoarece&nbsp;clasa&nbsp;StateConsumer&nbsp;nu&nbsp;este&nbsp;o&nbsp;clasă&nbsp;derivată&nbsp;din&nbsp;clasa&nbsp;State<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Console.WriteLine(state.protectedVar);&nbsp;//&nbsp;Eroare,&nbsp;nu&nbsp;se&nbsp;poate&nbsp;accesa<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;variabila&nbsp;internalVar&nbsp;cu&nbsp;modificatorul&nbsp;internal&nbsp;este&nbsp;accesibilă&nbsp;din&nbsp;orice&nbsp;loc&nbsp;din&nbsp;proiectul&nbsp;curent,<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;deci&nbsp;putem&nbsp;obține&nbsp;sau&nbsp;modifica&nbsp;valoarea&nbsp;sa<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Console.WriteLine(state.internalVar);<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;variabila&nbsp;protectedInternalVar&nbsp;este&nbsp;de&nbsp;asemenea&nbsp;accesibilă&nbsp;din&nbsp;orice&nbsp;loc&nbsp;din&nbsp;proiectul&nbsp;curent<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Console.WriteLine(state.protectedInternalVar);<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;variabila&nbsp;publicVar&nbsp;este&nbsp;accesibilă&nbsp;public<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Console.WriteLine(state.publicVar);<br>&nbsp;&nbsp;&nbsp;}<br>}</code></pre>
     </div>
     <p class="paragraph">Astfel, în clasa StateConsumer am putut accesa doar variabilele internalVar, protectedInternalVar și publicVar, deoarece modificatorii lor permit utilizarea în acest context.</p>
     <p class="paragraph">La fel stau lucrurile și cu metodele:</p>
     <div class="code-inline">
      <pre><code>class&nbsp;StateConsumer<br>{<br>&nbsp;&nbsp;&nbsp;public&nbsp;void&nbsp;PrintState()<br>&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;State&nbsp;state&nbsp;=&nbsp;new&nbsp;State();<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;state.Print();&nbsp;//&nbsp;Eroare,&nbsp;nu&nbsp;se&nbsp;poate&nbsp;accesa<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;state.PrintPrivate();&nbsp;//&nbsp;Eroare,&nbsp;nu&nbsp;se&nbsp;poate&nbsp;accesa<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;state.PrintProtectedPrivate();&nbsp;//&nbsp;Eroare,&nbsp;nu&nbsp;se&nbsp;poate&nbsp;accesa<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;state.PrintProtected();&nbsp;//&nbsp;Eroare,&nbsp;nu&nbsp;se<br><br>poate&nbsp;accesa<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;state.PrintInternal();&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;corect<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;state.PrintProtectedInternal();&nbsp;&nbsp;//&nbsp;corect<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;state.PrintPublic();&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;corect<br>&nbsp;&nbsp;&nbsp;}<br>}</code></pre>
     </div>
     <p class="paragraph">Aici am avut acces doar la trei metode: PrintInternal, PrintProtectedInternal și PrintPublic, care au modificatorii internal, protected internal și public, respectiv.</p>
     <h2 class="subtitle">Modificatori în cadrul asamblărilor</h2>
     <p class="paragraph">Să presupunem că avem un proiect (și respectiv o asamblare) MyLib, în care sunt definite trei clase:</p>
     <div class="code-inline">
      <pre><code>namespace&nbsp;MyLib;<br>//&nbsp;clasa&nbsp;este&nbsp;accesibilă&nbsp;din&nbsp;alte&nbsp;asamblări<br>public&nbsp;class&nbsp;PublicState<br>{<br>&nbsp;&nbsp;&nbsp;internal&nbsp;void&nbsp;PrintInternal()&nbsp;=&gt;&nbsp;Console.WriteLine("internal");<br>&nbsp;&nbsp;&nbsp;protected&nbsp;internal&nbsp;void&nbsp;PrintProtectedInternal()&nbsp;=&gt;&nbsp;Console.WriteLine("protected&nbsp;internal");<br>&nbsp;&nbsp;&nbsp;public&nbsp;void&nbsp;PrintPublic()&nbsp;=&gt;&nbsp;Console.WriteLine("public");<br><br>}<br><br>//&nbsp;clasa&nbsp;este&nbsp;accesibilă&nbsp;doar&nbsp;în&nbsp;asamblarea&nbsp;curentă&nbsp;-&nbsp;implicit&nbsp;internal<br>class&nbsp;DefaultState&nbsp;{&nbsp;}<br>//&nbsp;clasa&nbsp;este&nbsp;accesibilă&nbsp;doar&nbsp;în&nbsp;asamblarea&nbsp;curentă<br>internal&nbsp;class&nbsp;InternalState{&nbsp;&nbsp;}</code></pre>
     </div>
     <p class="paragraph">Aici clasele DefaultState și InternalState au modificatorul internal, deci sunt accesibile doar în proiectul curent.</p>
     <p class="paragraph">Clasa PublicState cu modificatorul public este accesibilă din alte proiecte. Totuși, metoda sa PrintInternal() este accesibilă doar în proiectul curent. În afara proiectului curent, sunt accesibile doar metodele PrintPublic și PrintProtectedInternal() (accesibile în alt proiect doar în clasele derivate).</p>
     <p class="paragraph">Să presupunem că conectăm asamblarea acestui proiect MyLib la un alt proiect, unde există clasa StateConsumer:</p>
     <div class="code-inline">
      <pre><code>using&nbsp;MyLib;<br>class&nbsp;StateConsumer<br>{<br>&nbsp;&nbsp;&nbsp;public&nbsp;void&nbsp;PrintState()<br>&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;Eroare&nbsp;DefaultState&nbsp;-&nbsp;implicit&nbsp;internal,&nbsp;deci&nbsp;nu&nbsp;este&nbsp;accesibil<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;DefaultState&nbsp;defaultState&nbsp;=&nbsp;new&nbsp;DefaultState();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;Eroare&nbsp;InternalState&nbsp;-&nbsp;internal,&nbsp;deci&nbsp;nu&nbsp;este&nbsp;accesibil<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;InternalState&nbsp;internalState&nbsp;=&nbsp;new&nbsp;InternalState();<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;corect,&nbsp;PublicState&nbsp;-&nbsp;public,&nbsp;accesibil&nbsp;din&nbsp;alte&nbsp;programe<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;PublicState&nbsp;publicState&nbsp;=&nbsp;new&nbsp;PublicState();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;Eroare,&nbsp;nu&nbsp;este&nbsp;accesibil&nbsp;-&nbsp;metoda&nbsp;este&nbsp;accesibilă&nbsp;doar&nbsp;în&nbsp;propria&nbsp;asamblare<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;publicState.PrintInternal();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;Eroare,&nbsp;nu&nbsp;este&nbsp;accesibil&nbsp;-&nbsp;StateConsumer&nbsp;NU&nbsp;este&nbsp;o&nbsp;clasă&nbsp;derivată&nbsp;din&nbsp;clasa&nbsp;PublicState,<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;deci&nbsp;metoda&nbsp;nu&nbsp;este&nbsp;accesibilă<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;publicState.PrintProtectedInternal();&nbsp;&nbsp;//&nbsp;nu&nbsp;este&nbsp;accesibilă<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;corect&nbsp;-&nbsp;metodă&nbsp;publică&nbsp;accesibilă<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;publicState.PrintPublic();&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;corect<br>&nbsp;&nbsp;&nbsp;}<br>}</code></pre>
     </div>
     <p class="paragraph">În clasa StateConsumer avem acces doar la clasa PublicState și metoda sa PrintPublic, deoarece acestea au modificatorul public. Restul funcționalității din asamblarea conectată nu este accesibilă pentru StateConsumer.</p>
     <p class="paragraph">Datorită acestei scheme de modificatori de acces, putem ascunde anumite detalii de implementare ale clasei de alte părți ale programului.</p>
     <h2 class="subtitle">Fișier ca domeniu de vizibilitate</h2>
     <p class="paragraph">C# 11 a adăugat un alt modificator de vizibilitate - file, care se aplică claselor, structurilor, delegatelor, enumerațiilor și interfețelor. Tipurile cu acest modificator pot fi folosite doar în fișierul de cod curent.</p>
     <div class="code-inline">
      <pre><code>file&nbsp;class&nbsp;Person<br>{<br>}</code></pre>
     </div>
     <p class="paragraph">Acest modificator nu poate fi folosit împreună cu alți modificatori.</p>
    </div>
   </main>
   <aside class="ad-section">
    <div class="ad-box">
     <p>Google Ad Here</p>
    </div>
    <div class="ad-box">
     <p>Promo: SQL Beginner Guide</p>
    </div>
   </aside>
  </div>
  <div class="lesson-navigation">
   <th:block th:if="${previousLesson != null}">
    <a th:href="@{'/lessons/' +
            ${#strings.toLowerCase(#strings.replace(previousLesson.chapter.topic.name, ' ', '-'))} + '/' +
            ${#strings.toLowerCase(#strings.replace(previousLesson.chapter.title, ' ', '-'))} + '/' +
            ${#strings.toLowerCase(#strings.replace(previousLesson.title, ' ', '-'))} }" class="nav-button">← Lecția anterioară</a>
   </th:block> <th:block th:if="${nextLesson != null}">
    <a th:href="@{'/lessons/' +
            ${#strings.toLowerCase(#strings.replace(nextLesson.chapter.topic.name, ' ', '-'))} + '/' +
            ${#strings.toLowerCase(#strings.replace(nextLesson.chapter.title, ' ', '-'))} + '/' +
            ${#strings.toLowerCase(#strings.replace(nextLesson.title, ' ', '-'))} }" class="nav-button">Lecția următoare →</a>
   </th:block>
  </div>
  <div th:replace="~{fragments/footer :: footer}"></div>
  <script th:src="@{/js/script.js}" defer></script>
 </body>
</html>
