<!doctype html>
<html lang="ro" xmlns:th="http://www.w3.org/1999/xhtml">
 <head>
    <link rel="icon" type="image/png" href="/nume-aplicatie/images/favicon.png">
    <script async src="https://www.googletagmanager.com/gtag/js?id=G-7Q2536ZKL2"></script>
    <script>
      window.dataLayer = window.dataLayer || [];
      window.gtag = function () { dataLayer.push(arguments); };
      gtag('consent', 'default', {
        'wait_for_update': 500,
        'region': ['RO'],
        'ad_storage': 'denied',
        'analytics_storage': 'denied',
        'ad_user_data': 'denied',
        'ad_personalization': 'denied'
      });
      gtag('js', new Date());
      gtag('config', 'G-7Q2536ZKL2');
    </script>


  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title th:text="${lesson.title}">Lesson</title>
  <link rel="stylesheet" th:href="@{/css/styles.css}">
  <style>
        body {
            background: #ffffff;
        }
    </style>
 </head>
 <body th:with="activeTopic='C-sharp', activeChapter='3.Clase, structuri si spatii de nume in C-sharp', activeLesson='1.Clase si obiecte in C-sharp'">
  <button class="mobile-sidebar-toggle" onclick="toggleMobileSidebar()">☰</button>
  <div th:replace="~{fragments/nav :: nav}"></div>
  <div class="top-nav">
   <th:block th:each="topic : ${topics}">
    <a th:href="@{'/lectii/topic/' + ${topic.id}}" th:text="${topic.name}" th:classappend="${topic.id} == ${activeTopicId} ? 'active' : ''"> </a>
   </th:block>
  </div>
  <div class="layout">
   <div class="mobile-sidebar" id="mobileSidebar">
    <button class="close-btn" onclick="toggleSidebar()">✖</button>
    <ul class="chapter-list">
     <th:block th:each="chapter : ${chapters}">
      <li class="chapter-item" th:classappend="${chapter.id} == ${activeChapterId} ? 'open' : ''">
       <div class="chapter-title" onclick="toggleChapter(this)">
        <strong th:text="${chapter.title}"></strong> <span class="arrow">▼</span>
       </div>
       <ul class="lesson-list">
        <th:block th:each="lesson : ${chapter.lessons}">
         <li><a th:href="@{'/lessons/' +
    ${#strings.toLowerCase(#strings.replace(chapter.topic.name, ' ', '-'))} + '/' +
    ${#strings.toLowerCase(#strings.replace(chapter.title, ' ', '-'))} + '/' +
    ${#strings.toLowerCase(#strings.replace(lesson.title, ' ', '-'))} }" th:text="${lesson.title}" th:classappend="${lesson.id} == ${activeLessonId} ? 'active' : ''"> </a></li>
        </th:block>
       </ul></li>
     </th:block>
    </ul>
   </div>
   <aside class="sidebar">
    <ul class="sidebar-list">
     <th:block th:each="chapter : ${chapters}">
      <li class="chapter-item" th:classappend="${chapter.id} == ${activeChapterId} ? 'open' : ''">
       <div class="chapter-toggle" onclick="toggleLessons(this)">
        <span th:text="${chapter.title}">Chapter</span>
       </div>
       <ul class="lesson-list hidden">
        <th:block th:each="lesson : ${chapter.lessons}">
         <li><a th:href="@{'/lessons/' +
    ${#strings.toLowerCase(#strings.replace(chapter.topic.name, ' ', '-'))} + '/' +
    ${#strings.toLowerCase(#strings.replace(chapter.title, ' ', '-'))} + '/' +
    ${#strings.toLowerCase(#strings.replace(lesson.title, ' ', '-'))} }" th:text="${lesson.title}" th:classappend="${lesson.id} == ${activeLessonId} ? 'active' : ''"> </a></li>
        </th:block>
       </ul></li>
     </th:block>
    </ul>
   </aside>
   <main class="content">
    <div class="document-container">
     <h1 class="main-title">Clase și obiecte în C#</h1>
     <p class="paragraph">C# este un limbaj de programare orientat pe obiecte, ceea ce înseamnă că putem reprezenta o aplicație C# ca un set de obiecte interconectate care interacționează între ele. Un obiect este o instanță a unei clase, iar clasa este un tip de date definit de utilizator care descrie structura și comportamentul obiectelor.</p>
     <p class="paragraph">O clasă în C# este un șablon pentru obiecte, care definește datele și comportamentele pe care obiectele de acest tip le vor avea. O analogie ar fi aceea că toți avem o anumită reprezentare a unui om, care are un nume, o vârstă și alte caracteristici. Acest șablon poate fi numit clasă. Un om concret, cu un anumit nume și o anumită vârstă, este un obiect (sau instanță) al acestei clase.</p>
     <p class="paragraph">Anterior, am folosit deja clase. De exemplu, tipul string, care reprezintă un șir de caractere, este de fapt o clasă. Sau, de exemplu, clasa Console, care are metoda WriteLine() ce afișează informații în consolă. Acum vom vedea cum putem defini propriile noastre clase.</p>
     <p class="paragraph">Clasele sunt definite folosind cuvântul cheie class, urmat de numele clasei și apoi de un set de acolade care conțin definițiile membrilor clasei (câmpuri, metode etc.).</p>
     <div class="code-inline">
      <pre><code>class&nbsp;nume_clasă<br>{<br>&nbsp;&nbsp;&nbsp;//&nbsp;conținutul&nbsp;clasei<br>}</code></pre>
     </div>
     <p class="paragraph">După cuvântul class urmează numele clasei, iar apoi, între acolade, se definește conținutul clasei.</p>
     <p class="paragraph">De exemplu, să definim în fișierul Program.cs clasa Person, care va reprezenta o persoană:</p>
     <div class="code-inline">
      <pre><code>class&nbsp;Person<br>{<br>&nbsp;<br>}</code></pre>
     </div>
     <div class="image-container">
      <img th:src="@{/images/C-sharp/3.Clase,%20structuri%20si%20spatii%20de%20nume%20in%20C-sharp/1.Clase%20si%20obiecte%20in%20C-sharp/images/image1.png}" alt="" class="responsive-image">
     </div>
     <p class="paragraph">Începând cu versiunea C# 12, dacă o clasă are o definiție goală, atunci acoladele după numele tipului pot fi omise:</p>
     <div class="code-inline">
      <pre><code>class&nbsp;Person;</code></pre>
     </div>
     <p class="paragraph">Cu toate acestea, o astfel de clasă nu este foarte relevantă, așa că vom adăuga în ea ceva funcționalitate.</p>
     <h2 class="subtitle">Câmpuri și metode ale clasei</h2>
     <p class="paragraph">Clasa poate stoca anumite date. Pentru stocarea datelor în clasă se folosesc câmpurile. Practic, câmpurile clasei sunt variabile definite la nivel de clasă.</p>
     <p class="paragraph">În plus, clasa poate defini un anumit comportament sau acțiuni executabile. Pentru definirea comportamentului în clasă se folosesc metodele.</p>
     <p class="paragraph">Așadar, să adăugăm în clasa Person câmpuri și metode:</p>
     <div class="code-inline">
      <pre><code>class&nbsp;Person&nbsp;<br>{<br>&nbsp;&nbsp;&nbsp;public&nbsp;string&nbsp;name&nbsp;=&nbsp;"Undefined";&nbsp;&nbsp;&nbsp;//&nbsp;nume<br>&nbsp;&nbsp;&nbsp;public&nbsp;int&nbsp;age;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;varsta<br><br>&nbsp;&nbsp;&nbsp;public&nbsp;void&nbsp;Print()<br>&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Console.WriteLine($"Nume:&nbsp;{name}&nbsp;&nbsp;Varsta:&nbsp;{age}");<br>&nbsp;&nbsp;&nbsp;}<br>}</code></pre>
     </div>
     <p class="paragraph">În acest caz, în clasa Person este definit un câmp name, care stochează numele, și un câmp age, care stochează vârsta persoanei. Spre deosebire de variabilele definite în metode, câmpurile clasei pot avea modificatori, care sunt indicați înaintea câmpului. Astfel, în acest caz, pentru ca toate câmpurile să fie accesibile în afara clasei Person, câmpurile sunt definite cu modificatorul public.</p>
     <p class="paragraph">La definirea câmpurilor putem să le atribuim anumite valori, ca în exemplul de mai sus în cazul variabilei name. Dacă câmpurile clasei nu sunt inițializate, atunci ele primesc valori implicite. Pentru variabilele de tip numeric, aceasta este valoarea 0.</p>
     <p class="paragraph">De asemenea, în clasa Person este definită metoda Print(). Metodele clasei au acces la câmpurile acesteia, iar în acest caz ne referim la câmpurile clasei name și age pentru a le afișa valorile pe consolă. Și pentru ca această metodă să fie vizibilă în afara clasei, ea este de asemenea definită cu modificatorul public.</p>
     <h2 class="subtitle">Crearea unui obiect al clasei</h2>
     <p class="paragraph">După definirea clasei putem crea obiecte ale acesteia. Pentru crearea obiectului se folosesc constructorii. De fapt, constructorii reprezintă metode speciale, care se numesc la fel ca și clasa și care sunt apelate la crearea unui nou obiect al clasei și realizează inițializarea obiectului. Sintaxa generală a apelului constructorului:</p>
     <div class="code-inline">
      <pre><code>new&nbsp;constructor_clasă(parametri_constructor);</code></pre>
     </div>
     <p class="paragraph">Mai întâi vine operatorul new, care alocă memorie pentru obiect, iar după el urmează apelul constructorului.</p>
     <p class="paragraph">Dacă în clasă nu este definit niciun constructor (ca în cazul clasei noastre Person), atunci pentru această clasă se creează automat un constructor implicit gol, care nu acceptă niciun parametru.</p>
     <p class="paragraph">Acum să creăm un obiect al clasei Person:</p>
     <div class="code-inline">
      <pre><code>Person&nbsp;tom&nbsp;=&nbsp;new&nbsp;Person();&nbsp;&nbsp;//&nbsp;crearea&nbsp;unui&nbsp;obiect&nbsp;al&nbsp;clasei&nbsp;Person<br><br>//&nbsp;definirea&nbsp;clasei&nbsp;Person<br>class&nbsp;Person&nbsp;<br>{<br>&nbsp;&nbsp;&nbsp;public&nbsp;string&nbsp;name&nbsp;=&nbsp;"Undefined";<br>&nbsp;&nbsp;&nbsp;public&nbsp;int&nbsp;age;<br><br>&nbsp;&nbsp;&nbsp;public&nbsp;void&nbsp;Print()<br>&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Console.WriteLine($"Nume:&nbsp;{name}&nbsp;&nbsp;Vârsta:&nbsp;{age}");<br>&nbsp;&nbsp;&nbsp;}<br>}</code></pre>
     </div>
     <div class="image-container">
      <img th:src="@{/images/C-sharp/3.Clase,%20structuri%20si%20spatii%20de%20nume%20in%20C-sharp/1.Clase%20si%20obiecte%20in%20C-sharp/images/image2.png}" alt="" class="responsive-image">
     </div>
     <p class="paragraph">Pentru crearea obiectului Person se folosește expresia new Person(). În final, după executarea acestei expresii, în memorie va fi alocată o zonă unde vor fi stocate toate datele obiectului Person. Iar variabila tom va primi o referință la obiectul creat și prin această variabilă putem utiliza obiectul și să accesăm funcționalitatea acestuia.</p>
     <h2 class="subtitle">Accesarea funcționalității clasei</h2>
     <p class="paragraph">Pentru accesarea funcționalității clasei - câmpuri, metode (precum și alte elemente ale clasei) se folosește notația prin punct - după obiectul clasei se pune un punct, iar apoi elementul clasei:</p>
     <div class="code-inline">
      <pre><code>obiect.câmp_clasă<br>obiect.metodă_clasă(parametri_metodă)</code></pre>
     </div>
     <p class="paragraph">De exemplu, să ne referim la câmpurile și metodele obiectului Person:</p>
     <div class="code-inline">
      <pre><code>Person&nbsp;tom&nbsp;=&nbsp;new&nbsp;Person();&nbsp;&nbsp;//&nbsp;crearea&nbsp;unui&nbsp;obiect&nbsp;al&nbsp;clasei&nbsp;Person<br><br>//&nbsp;Obținem&nbsp;valorile&nbsp;câmpurilor&nbsp;în&nbsp;variabile<br>string&nbsp;personName&nbsp;=&nbsp;tom.name;<br>int&nbsp;personAge&nbsp;=&nbsp;tom.age;<br>Console.WriteLine($"Nume:&nbsp;{personName}&nbsp;&nbsp;Vârsta{personAge}");&nbsp;&nbsp;&nbsp;//&nbsp;Nume:&nbsp;Undefined&nbsp;&nbsp;Vârsta:&nbsp;0<br><br>//&nbsp;setăm&nbsp;noi&nbsp;valori&nbsp;pentru&nbsp;câmpuri<br>tom.name&nbsp;=&nbsp;"Tom";<br>tom.age&nbsp;=&nbsp;37;<br><br>//&nbsp;ne&nbsp;referim&nbsp;la&nbsp;metoda&nbsp;Print<br>tom.Print();&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;Nume:&nbsp;Tom&nbsp;&nbsp;Vârsta:&nbsp;37<br><br>class&nbsp;Person&nbsp;<br>{<br>&nbsp;&nbsp;&nbsp;public&nbsp;string&nbsp;name&nbsp;=&nbsp;"Undefined";<br>&nbsp;&nbsp;&nbsp;public&nbsp;int&nbsp;age;<br><br>&nbsp;&nbsp;&nbsp;public&nbsp;void&nbsp;Print()<br>&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Console.WriteLine($"Nume:&nbsp;{name}&nbsp;&nbsp;Vârsta:&nbsp;{age}");<br>&nbsp;&nbsp;&nbsp;}<br>}</code></pre>
     </div>
     <p class="paragraph">Output-ul consolei acestui program:</p>
     <div class="code-inline">
      <pre><code>Nume:&nbsp;Undefined&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Vârsta:&nbsp;0<br>Nume:&nbsp;Tom&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Vârsta:&nbsp;37</code></pre>
     </div>
     <h2 class="subtitle">Adăugarea unei clase</h2>
     <p class="paragraph">De obicei, clasele sunt plasate în fișiere separate. Adesea, pentru o clasă este destinat un singur fișier. Dacă lucrăm la un proiect în afara mediului Visual Studio, utilizând .NET CLI, atunci este suficient să adăugăm un nou fișier de clasă în folderul proiectului. De exemplu, să adăugăm un nou fișier, pe care îl numim Person.cs și în care definim următorul cod:</p>
     <div class="code-inline">
      <pre><code><br>class&nbsp;Person<br>{<br>&nbsp;&nbsp;&nbsp;public&nbsp;string&nbsp;name&nbsp;=&nbsp;"Undefined";<br>&nbsp;&nbsp;&nbsp;public&nbsp;void&nbsp;Print()<br>&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Console.WriteLine($"Person&nbsp;{name}");<br>&nbsp;&nbsp;&nbsp;}<br>}</code></pre>
     </div>
     <p class="paragraph">Aici este definită clasa Person cu un câmp name și o metodă Print.</p>
     <p class="paragraph">În fișierul Program.cs, care reprezintă fișierul principal al programului, utilizăm clasa Person:</p>
     <div class="code-inline">
      <pre><code>Person&nbsp;tom&nbsp;=&nbsp;new&nbsp;Person();<br>tom.name&nbsp;=&nbsp;"Tom";<br>tom.Print();&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;Person&nbsp;Tom</code></pre>
     </div>
     <div class="image-container">
      <img th:src="@{/images/C-sharp/3.Clase,%20structuri%20si%20spatii%20de%20nume%20in%20C-sharp/1.Clase%20si%20obiecte%20in%20C-sharp/images/image3.png}" alt="" class="responsive-image">
     </div>
     <p class="paragraph">Visual Studio oferă implicit șabloane încorporate pentru adăugarea unei clase. Pentru a adăuga o clasă, apăsăm în Visual Studio pe numele proiectului cu butonul drept al mouse-ului:</p>
     <div class="image-container">
      <img th:src="@{/images/C-sharp/3.Clase,%20structuri%20si%20spatii%20de%20nume%20in%20C-sharp/1.Clase%20si%20obiecte%20in%20C-sharp/images/image4.png}" alt="" class="responsive-image">
     </div>
     <p class="paragraph">În meniul contextual care apare, selectăm opțiunea Add -&gt; New Item... (sau Add -&gt; Class...)</p>
     <p class="paragraph">În fereastra care se deschide pentru adăugarea unui nou element, ne asigurăm că în partea centrală cu șabloane de elemente este selectată opțiunea Class. Iar în partea de jos a ferestrei, în câmpul Name, introducem numele clasei adăugate - să zicem că se va numi Person:</p>
     <div class="image-container">
      <img th:src="@{/images/C-sharp/3.Clase,%20structuri%20si%20spatii%20de%20nume%20in%20C-sharp/1.Clase%20si%20obiecte%20in%20C-sharp/images/image5.png}" alt="" class="responsive-image">
     </div>
     <p class="paragraph">Ca nume al clasei se poate introduce atât Person, cât și Person.cs. Iar după apăsarea butonului de adăugare, în proiect va fi adăugată o nouă clasă, în care putem defini același cod și să o utilizăm în fișierul Program.cs.</p>
     <p class="paragraph">Astfel, putem defini clase în fișiere separate și să le folosim în program.</p>
    </div>
   </main>
   <aside class="ad-section">
    <div class="ad-box">
     <p>Google Ad Here</p>
    </div>
    <div class="ad-box">
     <p>Promo: SQL Beginner Guide</p>
    </div>
   </aside>
  </div>
  <div class="lesson-navigation">
   <th:block th:if="${previousLesson != null}">
    <a th:href="@{'/lessons/' +
            ${#strings.toLowerCase(#strings.replace(previousLesson.chapter.topic.name, ' ', '-'))} + '/' +
            ${#strings.toLowerCase(#strings.replace(previousLesson.chapter.title, ' ', '-'))} + '/' +
            ${#strings.toLowerCase(#strings.replace(previousLesson.title, ' ', '-'))} }" class="nav-button">← Lecția anterioară</a>
   </th:block> <th:block th:if="${nextLesson != null}">
    <a th:href="@{'/lessons/' +
            ${#strings.toLowerCase(#strings.replace(nextLesson.chapter.topic.name, ' ', '-'))} + '/' +
            ${#strings.toLowerCase(#strings.replace(nextLesson.chapter.title, ' ', '-'))} + '/' +
            ${#strings.toLowerCase(#strings.replace(nextLesson.title, ' ', '-'))} }" class="nav-button">Lecția următoare →</a>
   </th:block>
  </div>
  <div th:replace="~{fragments/footer :: footer}"></div>
  <script th:src="@{/js/script.js}" defer></script>
 </body>
</html>
