<!doctype html>
<html lang="ro" xmlns:th="http://www.w3.org/1999/xhtml">
 <head>
    <link rel="icon" type="image/png" href="/nume-aplicatie/images/favicon.png">
    <script async src="https://www.googletagmanager.com/gtag/js?id=G-7Q2536ZKL2"></script>
    <script>
      window.dataLayer = window.dataLayer || [];
      window.gtag = function () { dataLayer.push(arguments); };
      gtag('consent', 'default', {
        'wait_for_update': 500,
        'region': ['RO'],
        'ad_storage': 'denied',
        'analytics_storage': 'denied',
        'ad_user_data': 'denied',
        'ad_personalization': 'denied'
      });
      gtag('js', new Date());
      gtag('config', 'G-7Q2536ZKL2');
    </script>


  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title th:text="${lesson.title}">Lesson</title>
  <link rel="stylesheet" th:href="@{/css/styles.css}">
  <style>
        body {
            background: #ffffff;
        }
    </style>
 </head>
 <body th:with="activeTopic='C-sharp', activeChapter='3.Clase, structuri si spatii de nume in C-sharp', activeLesson='20.Verificarea pentru null si operatorii'">
  <button class="mobile-sidebar-toggle" onclick="toggleMobileSidebar()">☰</button>
  <div th:replace="~{fragments/nav :: nav}"></div>
  <div class="top-nav">
   <th:block th:each="topic : ${topics}">
    <a th:href="@{'/lectii/topic/' + ${topic.id}}" th:text="${topic.name}" th:classappend="${topic.id} == ${activeTopicId} ? 'active' : ''"> </a>
   </th:block>
  </div>
  <div class="layout">
   <div class="mobile-sidebar" id="mobileSidebar">
    <button class="close-btn" onclick="toggleSidebar()">✖</button>
    <ul class="chapter-list">
     <th:block th:each="chapter : ${chapters}">
      <li class="chapter-item" th:classappend="${chapter.id} == ${activeChapterId} ? 'open' : ''">
       <div class="chapter-title" onclick="toggleChapter(this)">
        <strong th:text="${chapter.title}"></strong> <span class="arrow">▼</span>
       </div>
       <ul class="lesson-list">
        <th:block th:each="lesson : ${chapter.lessons}">
         <li><a th:href="@{'/lessons/' +
    ${#strings.toLowerCase(#strings.replace(chapter.topic.name, ' ', '-'))} + '/' +
    ${#strings.toLowerCase(#strings.replace(chapter.title, ' ', '-'))} + '/' +
    ${#strings.toLowerCase(#strings.replace(lesson.title, ' ', '-'))} }" th:text="${lesson.title}" th:classappend="${lesson.id} == ${activeLessonId} ? 'active' : ''"> </a></li>
        </th:block>
       </ul></li>
     </th:block>
    </ul>
   </div>
   <aside class="sidebar">
    <ul class="sidebar-list">
     <th:block th:each="chapter : ${chapters}">
      <li class="chapter-item" th:classappend="${chapter.id} == ${activeChapterId} ? 'open' : ''">
       <div class="chapter-toggle" onclick="toggleLessons(this)">
        <span th:text="${chapter.title}">Chapter</span>
       </div>
       <ul class="lesson-list hidden">
        <th:block th:each="lesson : ${chapter.lessons}">
         <li><a th:href="@{'/lessons/' +
    ${#strings.toLowerCase(#strings.replace(chapter.topic.name, ' ', '-'))} + '/' +
    ${#strings.toLowerCase(#strings.replace(chapter.title, ' ', '-'))} + '/' +
    ${#strings.toLowerCase(#strings.replace(lesson.title, ' ', '-'))} }" th:text="${lesson.title}" th:classappend="${lesson.id} == ${activeLessonId} ? 'active' : ''"> </a></li>
        </th:block>
       </ul></li>
     </th:block>
    </ul>
   </aside>
   <main class="content">
    <div class="document-container">
     <h1 class="main-title">Verificarea pentru null și operatorii ?. și ??</h1>
     <h2 class="subtitle">Verificarea pentru null - Null guard</h2>
     <p class="paragraph">Dacă urmează să utilizăm o variabilă sau un parametru care poate avea valoarea null, adică reprezintă un tip nullable (nu contează dacă este valoric sau de referință), pentru a evita apariția unei excepții NullReferenceException, putem verifica dacă este null:</p>
     <div class="code-inline">
      <pre><code>void&nbsp;PrintUpper(string?&nbsp;text)<br>{<br>&nbsp;&nbsp;&nbsp;if&nbsp;(text&nbsp;!=&nbsp;null)<br>&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Console.WriteLine(text.ToUpper());<br>&nbsp;&nbsp;&nbsp;}<br>}</code></pre>
     </div>
     <p class="paragraph">În acest caz, dacă parametrul text nu este null, apelăm metoda ToUpper() a șirului, care convertește caracterele șirului în majuscule.</p>
     <p class="paragraph">De asemenea, cu ajutorul operatorului is putem verifica valoarea unui obiect:</p>
     <div class="code-inline">
      <pre><code>obiect&nbsp;is&nbsp;valoare</code></pre>
     </div>
     <p class="paragraph">Dacă obiectul din stânga operatorului is are valoarea din dreapta operatorului, atunci operatorul is returnează true, altfel returnează false.</p>
     <p class="paragraph">De exemplu, verificarea parametrului/variabilei pentru valoarea null:</p>
     <div class="code-inline">
      <pre><code>void&nbsp;PrintUpper(string?&nbsp;text)<br>{<br>&nbsp;&nbsp;&nbsp;if&nbsp;(text&nbsp;is&nbsp;null)&nbsp;return;<br>&nbsp;&nbsp;&nbsp;Console.WriteLine(text.ToUpper());<br>}</code></pre>
     </div>
     <p class="paragraph">Sau, dimpotrivă, putem verifica absența valorii cu ajutorul is not:</p>
     <div class="code-inline">
      <pre><code>void&nbsp;PrintUpper(string?&nbsp;text)<br>{<br>&nbsp;&nbsp;&nbsp;if&nbsp;(text&nbsp;is&nbsp;not&nbsp;null)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Console.WriteLine(text.ToUpper());<br>}</code></pre>
     </div>
     <p class="paragraph">De asemenea, putem verifica dacă tipul este cel pe care dorim să-l folosim:</p>
     <div class="code-inline">
      <pre><code>void&nbsp;PrintUpper(string?&nbsp;text)<br>{<br>&nbsp;&nbsp;&nbsp;if&nbsp;(text&nbsp;is&nbsp;string)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Console.WriteLine(text.ToUpper());<br>&nbsp;&nbsp;&nbsp;else<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Console.WriteLine("NULL");<br>}</code></pre>
     </div>
     <p class="paragraph">Astfel de verificări sunt denumite null guard sau "protecție împotriva null".</p>
     <h2 class="subtitle">Operatorul ??</h2>
     <p class="paragraph">Operatorul ?? este denumit operatorul de coalescență null. Este utilizat pentru a seta valori implicite pentru tipurile care pot avea valoarea null:</p>
     <div class="code-inline">
      <pre><code>operand_stânga&nbsp;??&nbsp;operand_dreapta</code></pre>
     </div>
     <p class="paragraph">Operatorul ?? returnează operandul din stânga dacă acesta nu este null. În caz contrar, returnează operandul din dreapta. Operandul din stânga trebuie să poată avea valoarea null. Să vedem un exemplu:</p>
     <div class="code-inline">
      <pre><code>string?&nbsp;text&nbsp;=&nbsp;null;<br>string&nbsp;name&nbsp;=&nbsp;text&nbsp;??&nbsp;"Tom";&nbsp;&nbsp;//&nbsp;este&nbsp;egal&nbsp;cu&nbsp;Tom,&nbsp;deoarece&nbsp;text&nbsp;este&nbsp;null<br>Console.WriteLine(name);&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;Tom<br><br>int?&nbsp;id&nbsp;=&nbsp;200;<br>int&nbsp;personid&nbsp;=&nbsp;id&nbsp;??&nbsp;1;&nbsp;//&nbsp;este&nbsp;egal&nbsp;cu&nbsp;200,&nbsp;deoarece&nbsp;id&nbsp;nu&nbsp;este&nbsp;null<br>Console.WriteLine(personid);&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;200</code></pre>
     </div>
     <p class="paragraph">Nu putem scrie astfel:</p>
     <div class="code-inline">
      <pre><code>int&nbsp;x&nbsp;=&nbsp;44;<br>int&nbsp;y&nbsp;=&nbsp;x&nbsp;??&nbsp;100;</code></pre>
     </div>
     <p class="paragraph">Aici variabila x reprezintă un tip valoric int și nu poate avea valoarea null, deci nu poate fi folosită ca operand stânga în operația ??.</p>
     <p class="paragraph">De asemenea, putem folosi operatorul derivat ??=:</p>
     <div class="code-inline">
      <pre><code>string?&nbsp;text&nbsp;=&nbsp;null;<br>text&nbsp;??=&nbsp;"Sam";<br>//&nbsp;echivalent&nbsp;cu<br>//&nbsp;text&nbsp;=&nbsp;text&nbsp;??&nbsp;"Sam";<br>Console.WriteLine(text);&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;Sam<br><br>int?&nbsp;id&nbsp;=&nbsp;100;<br>id&nbsp;??=&nbsp;1;<br>//&nbsp;echivalent&nbsp;cu<br>//id&nbsp;=&nbsp;id&nbsp;??&nbsp;1;<br>Console.WriteLine(id);&nbsp;//&nbsp;100</code></pre>
     </div>
     <h2 class="subtitle">Operatorul condițional null</h2>
     <p class="paragraph">Uneori, când lucrăm cu obiecte care pot avea valoarea null, putem întâmpina o eroare: încercăm să accesăm un obiect care este null. De exemplu, să presupunem că avem următorul sistem de clase:</p>
     <div class="code-inline">
      <pre><code>class&nbsp;Person<br>{<br>&nbsp;&nbsp;&nbsp;public&nbsp;Company?&nbsp;Company&nbsp;{&nbsp;get;&nbsp;set;&nbsp;}&nbsp;&nbsp;&nbsp;//&nbsp;locul&nbsp;de&nbsp;muncă<br>}<br>class&nbsp;Company<br>{<br>&nbsp;&nbsp;&nbsp;public&nbsp;string?&nbsp;WebSite&nbsp;{&nbsp;get;&nbsp;set;&nbsp;}&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;site-ul&nbsp;companiei<br>}</code></pre>
     </div>
     <p class="paragraph">Obiectul Person reprezintă o persoană. Proprietatea Company reprezintă compania unde lucrează persoana. Dar persoana poate să nu lucreze, deci proprietatea Company este de tip Company?, adică poate avea valoarea null.</p>
     <p class="paragraph">Clasa Company, la rândul său, conține proprietatea WebSite, care reprezintă site-ul companiei. Dar compania poate să nu aibă un site propriu. De aceea, această proprietate este de tip string?, adică poate avea valoarea null.</p>
     <p class="paragraph">Să presupunem că trebuie să afișăm pe consolă cu litere mari site-ul companiei unde lucrează persoana (dacă, bineînțeles, lucrează și dacă compania are un site). La prima vedere, putem scrie următoarea construcție:</p>
     <div class="code-inline">
      <pre><code>void&nbsp;PrintWebSite(Person?&nbsp;person)<br>{<br>&nbsp;&nbsp;&nbsp;if&nbsp;(person&nbsp;!=&nbsp;null)<br>&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if(person.Company&nbsp;!=&nbsp;null)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if(person.Company.WebSite&nbsp;!=&nbsp;null)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Console.WriteLine(person.Company.WebSite.ToUpper());<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;}<br>}<br>class&nbsp;Person<br>{<br>&nbsp;&nbsp;&nbsp;public&nbsp;Company?&nbsp;Company&nbsp;{&nbsp;get;&nbsp;set;&nbsp;}&nbsp;&nbsp;&nbsp;//&nbsp;locul&nbsp;de&nbsp;muncă<br>}<br>class&nbsp;Company<br>{<br>&nbsp;&nbsp;&nbsp;public&nbsp;string?&nbsp;WebSite&nbsp;{&nbsp;get;&nbsp;set;&nbsp;}&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;site-ul&nbsp;companiei<br>}</code></pre>
     </div>
     <p class="paragraph">În metoda PrintWebSite(), primim un obiect Person? și, pentru a evita excepția NullReferenceException, verificăm pe rând toate valorile utilizate pentru null, astfel încât, la final, să folosim metoda ToUpper() pentru a afișa cu litere mari numele site-ului.</p>
     <p class="paragraph">Deși aceasta este o metodă funcțională, pentru un simplu afișaj de șir rezultă o construcție complexă. În realitate, putem simplifica:</p>
     <div class="code-inline">
      <pre><code>void&nbsp;PrintWebSite(Person?&nbsp;person)<br>{<br>&nbsp;&nbsp;&nbsp;if&nbsp;(person&nbsp;!=&nbsp;null&nbsp;&amp;&amp;&nbsp;person.Company&nbsp;!=&nbsp;null&nbsp;&amp;&amp;&nbsp;person.Company.WebSite&nbsp;!=&nbsp;null)<br>&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Console.WriteLine(person.Company.WebSite.ToUpper());<br>&nbsp;&nbsp;&nbsp;}<br>}</code></pre>
     </div>
     <p class="paragraph">Construcția este mult mai simplă, dar totuși destul de mare. Pentru a o simplifica și mai mult, în C# există operatorul condițional null (Null-Conditional Operator) - operatorul ?.:</p>
     <div class="code-inline">
      <pre><code>obiect?.component</code></pre>
     </div>
     <p class="paragraph">Dacă obiectul nu este null, se accesează componenta obiectului - câmpul, proprietatea, metoda. Dacă obiectul reprezintă valoarea null, accesarea componentei nu are loc.</p>
     <p class="paragraph">Aplicăm acest operator, modificând exemplul anterior:</p>
     <div class="code-inline">
      <pre><code>void&nbsp;PrintWebSite(Person?&nbsp;person)<br>{<br>&nbsp;&nbsp;&nbsp;Console.WriteLine(person?.Company?.WebSite?.ToUpper());<br>}</code></pre>
     </div>
     <p class="paragraph">Astfel, dacă person nu este null, se accesează proprietatea Company. Dacă proprietatea Company nu este null, se accesează proprietatea WebSite a obiectului Company. Dacă proprietatea WebSite nu este null, se apelează metoda ToUpper().</p>
    </div>
   </main>
   <aside class="ad-section">
    <div class="ad-box">
     <p>Google Ad Here</p>
    </div>
    <div class="ad-box">
     <p>Promo: SQL Beginner Guide</p>
    </div>
   </aside>
  </div>
  <div class="lesson-navigation">
   <th:block th:if="${previousLesson != null}">
    <a th:href="@{'/lessons/' +
            ${#strings.toLowerCase(#strings.replace(previousLesson.chapter.topic.name, ' ', '-'))} + '/' +
            ${#strings.toLowerCase(#strings.replace(previousLesson.chapter.title, ' ', '-'))} + '/' +
            ${#strings.toLowerCase(#strings.replace(previousLesson.title, ' ', '-'))} }" class="nav-button">← Lecția anterioară</a>
   </th:block> <th:block th:if="${nextLesson != null}">
    <a th:href="@{'/lessons/' +
            ${#strings.toLowerCase(#strings.replace(nextLesson.chapter.topic.name, ' ', '-'))} + '/' +
            ${#strings.toLowerCase(#strings.replace(nextLesson.chapter.title, ' ', '-'))} + '/' +
            ${#strings.toLowerCase(#strings.replace(nextLesson.title, ' ', '-'))} }" class="nav-button">Lecția următoare →</a>
   </th:block>
  </div>
  <div th:replace="~{fragments/footer :: footer}"></div>
  <script th:src="@{/js/script.js}" defer></script>
 </body>
</html>
