<!doctype html>
<html lang="ro" xmlns:th="http://www.w3.org/1999/xhtml">
 <head>
    <script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-4253419731329045"
            crossorigin="anonymous"></script>


  <link rel="canonical" th:href="${canonicalUrl}" />

    <link rel="icon" type="image/png" href="/nume-aplicatie/images/favicon.png">
    <script async src="https://www.googletagmanager.com/gtag/js?id=G-7Q2536ZKL2"></script>
    <script>
      window.dataLayer = window.dataLayer || [];
      window.gtag = function () { dataLayer.push(arguments); };
      gtag('consent', 'default', {
        'wait_for_update': 500,
        'region': ['RO'],
        'ad_storage': 'denied',
        'analytics_storage': 'denied',
        'ad_user_data': 'denied',
        'ad_personalization': 'denied'
      });
      gtag('js', new Date());
      gtag('config', 'G-7Q2536ZKL2');
    </script>


  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title th:text="${lesson.title}">Lesson</title>
  <link rel="stylesheet" th:href="@{/css/styles.css}">
  <style>body { background: #ffffff; }</style>
 </head>
 <body th:with="activeTopic='HTML', activeChapter='9.Design adaptiv', activeLesson='2.Metatagul Viewport'">
  <button class="mobile-sidebar-toggle" onclick="toggleMobileSidebar()">☰</button>
  <div th:replace="~{fragments/nav :: nav}"></div>
  <div class="top-nav">
   <th:block th:each="topic : ${topics}">
    <a th:href="@{'/lectii/topic/' + ${topic.id}}" th:text="${topic.name}" th:classappend="${topic.id} == ${activeTopicId} ? 'active' : ''"> </a>
   </th:block>
  </div>
  <div class="layout">
   <div class="mobile-sidebar" id="mobileSidebar">
    <button class="close-btn" onclick="toggleSidebar()">✖</button>
    <ul class="chapter-list">
     <th:block th:each="chapter : ${chapters}">
      <li class="chapter-item" th:classappend="${chapter.id} == ${activeChapterId} ? 'open' : ''">
       <div class="chapter-title" onclick="toggleChapter(this)">
        <strong th:text="${chapter.title}"></strong> <span class="arrow">▼</span>
       </div>
       <ul class="lesson-list">
        <th:block th:each="lesson : ${chapter.lessons}">
         <li><a th:href="@{'/lectii/' +
    ${#strings.toLowerCase(#strings.replace(chapter.topic.name, ' ', '-'))} + '/' +
    ${#strings.toLowerCase(#strings.replace(chapter.title, ' ', '-'))} + '/' +
    ${#strings.toLowerCase(#strings.replace(lesson.title, ' ', '-'))} }" th:text="${lesson.title}" th:classappend="${lesson.id} == ${activeLessonId} ? 'active' : ''"> </a></li>
        </th:block>
       </ul></li>
     </th:block>
    </ul>
   </div>
   <aside class="sidebar">
    <ul class="sidebar-list">
     <th:block th:each="chapter : ${chapters}">
      <li class="chapter-item" th:classappend="${chapter.id} == ${activeChapterId} ? 'open' : ''">
       <div class="chapter-toggle" onclick="toggleLessons(this)">
        <span th:text="${chapter.title}">Chapter</span>
       </div>
       <ul class="lesson-list hidden">
        <th:block th:each="lesson : ${chapter.lessons}">
         <li><a th:href="@{'/lectii/' +
    ${#strings.toLowerCase(#strings.replace(chapter.topic.name, ' ', '-'))} + '/' +
    ${#strings.toLowerCase(#strings.replace(chapter.title, ' ', '-'))} + '/' +
    ${#strings.toLowerCase(#strings.replace(lesson.title, ' ', '-'))} }" th:text="${lesson.title}" th:classappend="${lesson.id} == ${activeLessonId} ? 'active' : ''"> </a></li>
        </th:block>
       </ul></li>
     </th:block>
    </ul>
   </aside>
   <main class="content">
    <div class="document-container">
     <h1 class="main-title">Metatagul Viewport</h1>
     <p class="paragraph">În primul rând, să examinăm unul dintre aspectele cheie ale utilizării designului adaptiv - metatagul viewport (de fapt, designul adaptiv începe cu acest tag). Să avem la început următoarea pagină web:</p>
     <div class="code-inline">
      <pre><code>&lt;!DOCTYPE&nbsp;html&gt;<br>&lt;html&gt;<br>&nbsp;&nbsp;&nbsp;&lt;head&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;meta&nbsp;charset="utf-8"&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;title&gt;Pagină&nbsp;web&nbsp;obișnuită&lt;/title&gt;<br>&nbsp;&nbsp;&nbsp;&lt;/head&gt;<br>&nbsp;&nbsp;&nbsp;&lt;body&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;h2&gt;Pagină&nbsp;web&nbsp;obișnuită&lt;/h2&gt;<br>&nbsp;&nbsp;&nbsp;&lt;/body&gt;<br>&lt;/html&gt;</code></pre>
     </div>
     <p class="paragraph">Aceasta este o pagină web standard, care într-un browser obișnuit va arăta în felul următor:</p>
     <div class="image-container">
      <img th:src="@{/images/HTML/9.Design%20adaptiv/2.Metatagul%20Viewport/images/image1.png}" alt="" class="responsive-image">
     </div>
     <p class="paragraph">Cu toate acestea, dacă rulăm aceeași pagină web într-un emulator de dispozitiv mobil sau pe un dispozitiv mobil real, vom avea dificultăți în a citi ce este scris pe ea:</p>
     <div class="image-container">
      <img th:src="@{/images/HTML/9.Design%20adaptiv/2.Metatagul%20Viewport/images/image2.png}" alt="" class="responsive-image">
     </div>
     <p class="paragraph">Prin aplicarea scalării, utilizatorul poate în cele din urmă vedea ce este scris acolo. Totuși, acest lucru nu este foarte convenabil. În același timp, pagina web are mult spațiu liber, ceea ce nu este foarte estetic.</p>
     <p class="paragraph">De ce se întâmplă acest lucru? Problema este că fiecare browser mobil setează dimensiunile inițiale ale paginii și apoi încearcă să o adapteze la dimensiunile ecranului dispozitivului mobil curent.</p>
     <p class="paragraph">Întreaga zonă vizibilă pe ecranul browserului este descrisă de conceptul de Viewport. Esențialmente, viewport reprezintă zona în care browserul web încearcă să "încorporeze" pagina web. De exemplu, browserul Safari pe iPhone și iPod setează implicit lățimea viewportului la 980 de pixeli.</p>
     <p class="paragraph">Astfel, primind pagina și încadrând-o într-un viewport de 980 de pixeli lățime, browserul o comprimă la dimensiunile dispozitivului mobil. De exemplu, dacă lățimea ecranului smartphone-ului este de 320 de pixeli, atunci pagina va fi redusă la această dimensiune. Și un factor de scalare de 320/980 va fi aplicat tuturor elementelor paginii.</p>
     <p class="paragraph">De ce se utilizează în acest caz exact 980 de pixeli și nu dimensiunea reală a ecranului? Motivul este că, în mod implicit, browserul presupune că fiecare pagină web este destinată desktopurilor. Și o lățime tipică pentru un site desktop poate fi considerată de 980 de pixeli.</p>
     <p class="paragraph">În același timp, fiecare browser stabilește propria lățime a zonei viewport, care nu este neapărat de 980 de pixeli. Alte browsere pot suporta ca lățime inițială alte valori. Dar acestea vor efectua, de asemenea, scalare.</p>
     <p class="paragraph">Pentru a evita un astfel de scenariu neplăcut, este recomandabil să folosim metatagul viewport. Acesta are următoarea definiție:</p>
     <div class="code-inline">
      <pre><code>&lt;meta&nbsp;name="viewport"&nbsp;content="parametri_metatag"&gt;</code></pre>
     </div>
     <p class="paragraph">În atributul content al metatagului putem defini următorii parametri:</p>
     <div class="image-container">
      <img th:src="@{/images/HTML/9.Design%20adaptiv/2.Metatagul%20Viewport/images/image3.png}" alt="" class="responsive-image">
     </div>
     <p class="paragraph">Acum să modificăm exemplul anterior de pagină web, folosind metatagul:</p>
     <div class="code-inline">
      <pre><code>&lt;!DOCTYPE&nbsp;html&gt;<br>&lt;html&gt;<br>&nbsp;&nbsp;&nbsp;&lt;head&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;meta&nbsp;charset="utf-8"&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;meta&nbsp;name="viewport"&nbsp;content="width=device-width"&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;title&gt;Pagină&nbsp;web&nbsp;obișnuită&lt;/title&gt;<br>&nbsp;&nbsp;&nbsp;&lt;/head&gt;<br>&nbsp;&nbsp;&nbsp;&lt;body&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;h2&gt;Pagină&nbsp;web&nbsp;obișnuită&lt;/h2&gt;<br>&nbsp;&nbsp;&nbsp;&lt;/body&gt;<br>&lt;/html&gt;</code></pre>
     </div>
     <div class="image-container">
      <img th:src="@{/images/HTML/9.Design%20adaptiv/2.Metatagul%20Viewport/images/image4.png}" alt="" class="responsive-image">
     </div>
     <p class="paragraph">Pagina web arată cu siguranță mai bine datorită utilizării metatagului viewport. Utilizând parametrul width=device-width le spunem browserelor web să considere ca lățime inițială a zonei viewport nu 980 de pixeli sau un alt număr, ci lățimea reală a ecranului dispozitivului. Astfel, browserul web nu va efectua nicio scalare, deoarece lățimea viewportului și lățimea sunt aceleași.</p>
     <p class="paragraph">Putem de asemenea să folosim și alți parametri, de exemplu, să interzicem utilizatorului să scaleze dimensiunile paginii:</p>
     <div class="code-inline">
      <pre><code>&lt;meta&nbsp;name="viewport"&nbsp;content="width=device-width,&nbsp;maxi</code></pre>
     </div>
    </div>
   </main>
   <aside class="ad-section">
    <div class="ad-box">
     <p>Google Ad Here</p>
    </div>
    <div class="ad-box">
     <p>Promo: SQL Beginner Guide</p>
    </div>
   </aside>
  </div>
  <div class="lesson-navigation">
   <th:block th:if="${previousLesson != null}">
    <a th:href="@{'/lectii/' +
            ${#strings.toLowerCase(#strings.replace(previousLesson.chapter.topic.name, ' ', '-'))} + '/' +
            ${#strings.toLowerCase(#strings.replace(previousLesson.chapter.title, ' ', '-'))} + '/' +
            ${#strings.toLowerCase(#strings.replace(previousLesson.title, ' ', '-'))} }" class="nav-button">← Lecția anterioară</a>
   </th:block> <th:block th:if="${nextLesson != null}">
    <a th:href="@{'/lectii/' +
            ${#strings.toLowerCase(#strings.replace(nextLesson.chapter.topic.name, ' ', '-'))} + '/' +
            ${#strings.toLowerCase(#strings.replace(nextLesson.chapter.title, ' ', '-'))} + '/' +
            ${#strings.toLowerCase(#strings.replace(nextLesson.title, ' ', '-'))} }" class="nav-button">Lecția următoare →</a>
   </th:block>
  </div>
  <div th:replace="~{fragments/footer :: footer}"></div>
  <script th:src="@{/js/script.js}" defer></script>
 </body>
</html>
